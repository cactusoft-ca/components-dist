{"version":3,"file":"cdk-drag-drop.umd.min.js","sources":["../../src/cdk/drag-drop/directives/drag.ts","../../src/cdk/drag-drop/directives/drop-list-group.ts","../../src/cdk/drag-drop/directives/drop-list.ts","../../src/cdk/drag-drop/drag-drop-module.ts","../../src/cdk/drag-drop/drag-styling.ts","../../src/cdk/drag-drop/transition-duration.ts","../../src/cdk/drag-drop/drag-ref.ts","../../src/cdk/drag-drop/drag-utils.ts","../../src/cdk/drag-drop/drop-list-ref.ts","../../src/cdk/drag-drop/drag-drop-registry.ts","../../src/cdk/drag-drop/drag-drop.ts","../../src/cdk/drag-drop/drop-list-container.ts","../../src/cdk/drag-drop/drag-parent.ts","../../src/cdk/drag-drop/directives/drag-handle.ts","../../src/cdk/drag-drop/directives/drag-placeholder.ts","../../src/cdk/drag-drop/directives/drag-preview.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  AfterViewInit,\r\n  ContentChild,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  SkipSelf,\r\n  ViewContainerRef,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectorRef,\r\n  isDevMode,\r\n} from '@angular/core';\r\nimport {coerceBooleanProperty, coerceNumberProperty, coerceElement} from '@angular/cdk/coercion';\r\nimport {Observable, Observer, Subject, merge} from 'rxjs';\r\nimport {startWith, take, map, takeUntil, switchMap, tap} from 'rxjs/operators';\r\nimport {\r\n  CdkDragDrop,\r\n  CdkDragEnd,\r\n  CdkDragEnter,\r\n  CdkDragExit,\r\n  CdkDragMove,\r\n  CdkDragStart,\r\n  CdkDragRelease,\r\n} from '../drag-events';\r\nimport {CdkDragHandle} from './drag-handle';\r\nimport {CdkDragPlaceholder} from './drag-placeholder';\r\nimport {CdkDragPreview} from './drag-preview';\r\nimport {CDK_DROP_LIST} from '../drop-list-container';\r\nimport {CDK_DRAG_PARENT} from '../drag-parent';\r\nimport {DragRef, DragRefConfig, Point} from '../drag-ref';\r\nimport {CdkDropListInternal as CdkDropList} from './drop-list';\r\nimport {DragDrop} from '../drag-drop';\r\n\r\n/** Injection token that can be used to configure the behavior of `CdkDrag`. */\r\nexport const CDK_DRAG_CONFIG = new InjectionToken<DragRefConfig>('CDK_DRAG_CONFIG', {\r\n  providedIn: 'root',\r\n  factory: CDK_DRAG_CONFIG_FACTORY\r\n});\r\n\r\n/** @docs-private */\r\nexport function CDK_DRAG_CONFIG_FACTORY(): DragRefConfig {\r\n  return {dragStartThreshold: 5, pointerDirectionChangeThreshold: 5};\r\n}\r\n\r\n/** Element that can be moved inside a CdkDropList container. */\r\n@Directive({\r\n  selector: '[cdkDrag]',\r\n  exportAs: 'cdkDrag',\r\n  host: {\r\n    'class': 'cdk-drag',\r\n    '[class.cdk-drag-disabled]': 'disabled',\r\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\r\n  },\r\n  providers: [{provide: CDK_DRAG_PARENT, useExisting: CdkDrag}]\r\n})\r\nexport class CdkDrag<T = any> implements AfterViewInit, OnChanges, OnDestroy {\r\n  private _destroyed = new Subject<void>();\r\n\r\n  /** Reference to the underlying drag instance. */\r\n  _dragRef: DragRef<CdkDrag<T>>;\r\n\r\n  /** Elements that can be used to drag the draggable item. */\r\n  @ContentChildren(CdkDragHandle, {descendants: true}) _handles: QueryList<CdkDragHandle>;\r\n\r\n  /** Element that will be used as a template to create the draggable item's preview. */\r\n  @ContentChild(CdkDragPreview, {static: false}) _previewTemplate: CdkDragPreview;\r\n\r\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\r\n  @ContentChild(CdkDragPlaceholder, {static: false}) _placeholderTemplate: CdkDragPlaceholder;\r\n\r\n  /** Arbitrary data to attach to this drag instance. */\r\n  @Input('cdkDragData') data: T;\r\n\r\n  /** Locks the position of the dragged element along the specified axis. */\r\n  @Input('cdkDragLockAxis') lockAxis: 'x' | 'y';\r\n\r\n  /**\r\n   * Selector that will be used to determine the root draggable element, starting from\r\n   * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\r\n   * when trying to enable dragging on an element that you might not have access to.\r\n   */\r\n  @Input('cdkDragRootElement') rootElementSelector: string;\r\n\r\n  /**\r\n   * Node or selector that will be used to determine the element to which the draggable's\r\n   * position will be constrained. If a string is passed in, it'll be used as a selector that\r\n   * will be matched starting from the element's parent and going up the DOM until a match\r\n   * has been found.\r\n   */\r\n  @Input('cdkDragBoundary') boundaryElement: string | ElementRef<HTMLElement> | HTMLElement;\r\n\r\n  /**\r\n   * Selector that will be used to determine the element to which the draggable's position will\r\n   * be constrained. Matching starts from the element's parent and goes up the DOM until a matching\r\n   * element has been found\r\n   * @deprecated Use `boundaryElement` instead.\r\n   * @breaking-change 9.0.0\r\n   */\r\n  get boundaryElementSelector(): string {\r\n    return typeof this.boundaryElement === 'string' ? this.boundaryElement : undefined!;\r\n  }\r\n  set boundaryElementSelector(selector: string) {\r\n    this.boundaryElement = selector;\r\n  }\r\n\r\n  /**\r\n   * Amount of milliseconds to wait after the user has put their\r\n   * pointer down before starting to drag the element.\r\n   */\r\n  @Input('cdkDragStartDelay') dragStartDelay: number = 0;\r\n\r\n  /**\r\n   * Sets the position of a `CdkDrag` that is outside of a drop container.\r\n   * Can be used to restore the element's position for a returning user.\r\n   */\r\n  @Input('cdkDragFreeDragPosition') freeDragPosition: {x: number, y: number};\r\n\r\n  /** Whether starting to drag this element is disabled. */\r\n  @Input('cdkDragDisabled')\r\n  get disabled(): boolean {\r\n    return this._disabled || (this.dropContainer && this.dropContainer.disabled);\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n    this._dragRef.disabled = this._disabled;\r\n  }\r\n  private _disabled = false;\r\n\r\n  /**\r\n   * Function that can be used to customize the logic of how the position of the drag item\r\n   * is limited while it's being dragged. Gets called with a point containing the current position\r\n   * of the user's pointer on the page and should return a point describing where the item should\r\n   * be rendered.\r\n   */\r\n  @Input('cdkDragConstrainPosition') constrainPosition?: (point: Point, dragRef: DragRef) => Point;\r\n\r\n  /** Emits when the user starts dragging the item. */\r\n  @Output('cdkDragStarted') started: EventEmitter<CdkDragStart> = new EventEmitter<CdkDragStart>();\r\n\r\n  /** Emits when the user has released a drag item, before any animations have started. */\r\n  @Output('cdkDragReleased') released: EventEmitter<CdkDragRelease> =\r\n      new EventEmitter<CdkDragRelease>();\r\n\r\n  /** Emits when the user stops dragging an item in the container. */\r\n  @Output('cdkDragEnded') ended: EventEmitter<CdkDragEnd> = new EventEmitter<CdkDragEnd>();\r\n\r\n  /** Emits when the user has moved the item into a new container. */\r\n  @Output('cdkDragEntered') entered: EventEmitter<CdkDragEnter<any>> =\r\n      new EventEmitter<CdkDragEnter<any>>();\r\n\r\n  /** Emits when the user removes the item its container by dragging it into another container. */\r\n  @Output('cdkDragExited') exited: EventEmitter<CdkDragExit<any>> =\r\n      new EventEmitter<CdkDragExit<any>>();\r\n\r\n  /** Emits when the user drops the item inside a container. */\r\n  @Output('cdkDragDropped') dropped: EventEmitter<CdkDragDrop<any>> =\r\n      new EventEmitter<CdkDragDrop<any>>();\r\n\r\n  /**\r\n   * Emits as the user is dragging the item. Use with caution,\r\n   * because this event will fire for every pixel that the user has dragged.\r\n   */\r\n  @Output('cdkDragMoved') moved: Observable<CdkDragMove<T>> =\r\n      new Observable((observer: Observer<CdkDragMove<T>>) => {\r\n        const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\r\n          source: this,\r\n          pointerPosition: movedEvent.pointerPosition,\r\n          event: movedEvent.event,\r\n          delta: movedEvent.delta,\r\n          distance: movedEvent.distance\r\n        }))).subscribe(observer);\r\n\r\n        return () => {\r\n          subscription.unsubscribe();\r\n        };\r\n      });\r\n\r\n  constructor(\r\n      /** Element that the draggable is attached to. */\r\n      public element: ElementRef<HTMLElement>,\r\n      /** Droppable container that the draggable is a part of. */\r\n      @Inject(CDK_DROP_LIST) @Optional() @SkipSelf() public dropContainer: CdkDropList,\r\n      @Inject(DOCUMENT) private _document: any, private _ngZone: NgZone,\r\n      private _viewContainerRef: ViewContainerRef, @Inject(CDK_DRAG_CONFIG) config: DragRefConfig,\r\n      @Optional() private _dir: Directionality, dragDrop: DragDrop,\r\n      private _changeDetectorRef: ChangeDetectorRef) {\r\n    this._dragRef = dragDrop.createDrag(element, config);\r\n    this._dragRef.data = this;\r\n    this._syncInputs(this._dragRef);\r\n    this._handleEvents(this._dragRef);\r\n  }\r\n\r\n  /**\r\n   * Returns the element that is being used as a placeholder\r\n   * while the current element is being dragged.\r\n   */\r\n  getPlaceholderElement(): HTMLElement {\r\n    return this._dragRef.getPlaceholderElement();\r\n  }\r\n\r\n  /** Returns the root draggable element. */\r\n  getRootElement(): HTMLElement {\r\n    return this._dragRef.getRootElement();\r\n  }\r\n\r\n  /** Resets a standalone drag item to its initial position. */\r\n  reset(): void {\r\n    this._dragRef.reset();\r\n  }\r\n\r\n  /**\r\n   * Gets the pixel coordinates of the draggable outside of a drop container.\r\n   */\r\n  getFreeDragPosition(): {readonly x: number, readonly y: number} {\r\n    return this._dragRef.getFreeDragPosition();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // We need to wait for the zone to stabilize, in order for the reference\r\n    // element to be in the proper place in the DOM. This is mostly relevant\r\n    // for draggable elements inside portals since they get stamped out in\r\n    // their original DOM position and then they get transferred to the portal.\r\n    this._ngZone.onStable.asObservable()\r\n      .pipe(take(1), takeUntil(this._destroyed))\r\n      .subscribe(() => {\r\n        this._updateRootElement();\r\n\r\n        // Listen for any newly-added handles.\r\n        this._handles.changes.pipe(\r\n          startWith(this._handles),\r\n          // Sync the new handles with the DragRef.\r\n          tap((handles: QueryList<CdkDragHandle>) => {\r\n            const childHandleElements = handles\r\n              .filter(handle => handle._parentDrag === this)\r\n              .map(handle => handle.element);\r\n            this._dragRef.withHandles(childHandleElements);\r\n          }),\r\n          // Listen if the state of any of the handles changes.\r\n          switchMap((handles: QueryList<CdkDragHandle>) => {\r\n            return merge(...handles.map(item => item._stateChanges));\r\n          }),\r\n          takeUntil(this._destroyed)\r\n        ).subscribe(handleInstance => {\r\n          // Enabled/disable the handle that changed in the DragRef.\r\n          const dragRef = this._dragRef;\r\n          const handle = handleInstance.element.nativeElement;\r\n          handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\r\n        });\r\n\r\n        if (this.freeDragPosition) {\r\n          this._dragRef.setFreeDragPosition(this.freeDragPosition);\r\n        }\r\n      });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const rootSelectorChange = changes['rootElementSelector'];\r\n    const positionChange = changes['freeDragPosition'];\r\n\r\n    // We don't have to react to the first change since it's being\r\n    // handled in `ngAfterViewInit` where it needs to be deferred.\r\n    if (rootSelectorChange && !rootSelectorChange.firstChange) {\r\n      this._updateRootElement();\r\n    }\r\n\r\n    // Skip the first change since it's being handled in `ngAfterViewInit`.\r\n    if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\r\n      this._dragRef.setFreeDragPosition(this.freeDragPosition);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n    this._dragRef.dispose();\r\n  }\r\n\r\n  /** Syncs the root element with the `DragRef`. */\r\n  private _updateRootElement() {\r\n    const element = this.element.nativeElement;\r\n    const rootElement = this.rootElementSelector ?\r\n        getClosestMatchingAncestor(element, this.rootElementSelector) : element;\r\n\r\n    if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\r\n      throw Error(`cdkDrag must be attached to an element node. ` +\r\n                  `Currently attached to \"${rootElement.nodeName}\".`);\r\n    }\r\n\r\n    this._dragRef.withRootElement(rootElement || element);\r\n  }\r\n\r\n  /** Gets the boundary element, based on the `boundaryElement` value. */\r\n  private _getBoundaryElement() {\r\n    const boundary = this.boundaryElement;\r\n\r\n    if (!boundary) {\r\n      return null;\r\n    }\r\n\r\n    if (typeof boundary === 'string') {\r\n      return getClosestMatchingAncestor(this.element.nativeElement, boundary);\r\n    }\r\n\r\n    const element = coerceElement(boundary);\r\n\r\n    if (isDevMode() && !element.contains(this.element.nativeElement)) {\r\n      throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\r\n    }\r\n\r\n    return element;\r\n  }\r\n\r\n  /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\r\n  private _syncInputs(ref: DragRef<CdkDrag<T>>) {\r\n    ref.beforeStarted.subscribe(() => {\r\n      if (!ref.isDragging()) {\r\n        const dir = this._dir;\r\n        const placeholder = this._placeholderTemplate ? {\r\n          template: this._placeholderTemplate.templateRef,\r\n          context: this._placeholderTemplate.data,\r\n          viewContainer: this._viewContainerRef\r\n        } : null;\r\n        const preview = this._previewTemplate ? {\r\n          template: this._previewTemplate.templateRef,\r\n          context: this._previewTemplate.data,\r\n          viewContainer: this._viewContainerRef\r\n        } : null;\r\n\r\n        ref.disabled = this.disabled;\r\n        ref.lockAxis = this.lockAxis;\r\n        ref.dragStartDelay = coerceNumberProperty(this.dragStartDelay);\r\n        ref.constrainPosition = this.constrainPosition;\r\n        ref\r\n          .withBoundaryElement(this._getBoundaryElement())\r\n          .withPlaceholderTemplate(placeholder)\r\n          .withPreviewTemplate(preview);\r\n\r\n        if (dir) {\r\n          ref.withDirection(dir.value);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Handles the events from the underlying `DragRef`. */\r\n  private _handleEvents(ref: DragRef<CdkDrag<T>>) {\r\n    ref.started.subscribe(() => {\r\n      this.started.emit({source: this});\r\n\r\n      // Since all of these events run outside of change detection,\r\n      // we need to ensure that everything is marked correctly.\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    ref.released.subscribe(() => {\r\n      this.released.emit({source: this});\r\n    });\r\n\r\n    ref.ended.subscribe(event => {\r\n      this.ended.emit({source: this, distance: event.distance});\r\n\r\n      // Since all of these events run outside of change detection,\r\n      // we need to ensure that everything is marked correctly.\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    ref.entered.subscribe(event => {\r\n      this.entered.emit({\r\n        container: event.container.data,\r\n        item: this,\r\n        currentIndex: event.currentIndex\r\n      });\r\n    });\r\n\r\n    ref.exited.subscribe(event => {\r\n      this.exited.emit({\r\n        container: event.container.data,\r\n        item: this\r\n      });\r\n    });\r\n\r\n    ref.dropped.subscribe(event => {\r\n      this.dropped.emit({\r\n        previousIndex: event.previousIndex,\r\n        currentIndex: event.currentIndex,\r\n        previousContainer: event.previousContainer.data,\r\n        container: event.container.data,\r\n        isPointerOverContainer: event.isPointerOverContainer,\r\n        item: this,\r\n        distance: event.distance\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n/** Gets the closest ancestor of an element that matches a selector. */\r\nfunction getClosestMatchingAncestor(element: HTMLElement, selector: string) {\r\n  let currentElement = element.parentElement as HTMLElement | null;\r\n\r\n  while (currentElement) {\r\n    // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\r\n    if (currentElement.matches ? currentElement.matches(selector) :\r\n        (currentElement as any).msMatchesSelector(selector)) {\r\n      return currentElement;\r\n    }\r\n\r\n    currentElement = currentElement.parentElement;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, OnDestroy, Input} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\n\r\n/**\r\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\r\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\r\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\r\n * from `cdkDropList`.\r\n */\r\n@Directive({\r\n  selector: '[cdkDropListGroup]',\r\n  exportAs: 'cdkDropListGroup',\r\n})\r\nexport class CdkDropListGroup<T> implements OnDestroy {\r\n  /** Drop lists registered inside the group. */\r\n  readonly _items = new Set<T>();\r\n\r\n  /** Whether starting a dragging sequence from inside this group is disabled. */\r\n  @Input('cdkDropListGroupDisabled')\r\n  get disabled(): boolean { return this._disabled; }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n  }\r\n  private _disabled = false;\r\n\r\n  ngOnDestroy() {\r\n    this._items.clear();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceArray, coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n  QueryList,\r\n  Optional,\r\n  Directive,\r\n  ChangeDetectorRef,\r\n  SkipSelf,\r\n  AfterContentInit,\r\n} from '@angular/core';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {CdkDrag} from './drag';\r\nimport {CdkDragDrop, CdkDragEnter, CdkDragExit, CdkDragSortEvent} from '../drag-events';\r\nimport {CDK_DROP_LIST_CONTAINER, CdkDropListContainer} from '../drop-list-container';\r\nimport {CdkDropListGroup} from './drop-list-group';\r\nimport {DropListRef} from '../drop-list-ref';\r\nimport {DragRef} from '../drag-ref';\r\nimport {DragDrop} from '../drag-drop';\r\nimport {Subject} from 'rxjs';\r\nimport {startWith, takeUntil} from 'rxjs/operators';\r\n\r\n/** Counter used to generate unique ids for drop zones. */\r\nlet _uniqueIdCounter = 0;\r\n\r\n/**\r\n * Internal compile-time-only representation of a `CdkDropList`.\r\n * Used to avoid circular import issues between the `CdkDropList` and the `CdkDrag`.\r\n * @docs-private\r\n */\r\nexport interface CdkDropListInternal extends CdkDropList {}\r\n\r\n// @breaking-change 8.0.0 `CdkDropList` implements `CdkDropListContainer` for backwards\r\n// compatiblity. The implements clause, as well as all the methods that it enforces can\r\n// be removed when `CdkDropListContainer` is deleted.\r\n\r\n/** Container that wraps a set of draggable items. */\r\n@Directive({\r\n  selector: '[cdkDropList], cdk-drop-list',\r\n  exportAs: 'cdkDropList',\r\n  providers: [\r\n    // Prevent child drop lists from picking up the same group as their parent.\r\n    {provide: CdkDropListGroup, useValue: undefined},\r\n    {provide: CDK_DROP_LIST_CONTAINER, useExisting: CdkDropList},\r\n  ],\r\n  host: {\r\n    'class': 'cdk-drop-list',\r\n    '[id]': 'id',\r\n    '[class.cdk-drop-list-disabled]': 'disabled',\r\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\r\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\r\n  }\r\n})\r\nexport class CdkDropList<T = any> implements CdkDropListContainer, AfterContentInit, OnDestroy {\r\n  /** Emits when the list has been destroyed. */\r\n  private _destroyed = new Subject<void>();\r\n\r\n  /** Keeps track of the drop lists that are currently on the page. */\r\n  private static _dropLists: CdkDropList[] = [];\r\n\r\n  /** Reference to the underlying drop list instance. */\r\n  _dropListRef: DropListRef<CdkDropList<T>>;\r\n\r\n  /** Draggable items in the container. */\r\n  @ContentChildren(forwardRef(() => CdkDrag), {\r\n    // Explicitly set to false since some of the logic below makes assumptions about it.\r\n    // The `.withItems` call below should be updated if we ever need to switch this to `true`.\r\n    descendants: false\r\n  }) _draggables: QueryList<CdkDrag>;\r\n\r\n  /**\r\n   * Other draggable containers that this container is connected to and into which the\r\n   * container's items can be transferred. Can either be references to other drop containers,\r\n   * or their unique IDs.\r\n   */\r\n  @Input('cdkDropListConnectedTo')\r\n  connectedTo: (CdkDropList | string)[] | CdkDropList | string = [];\r\n\r\n  /** Arbitrary data to attach to this container. */\r\n  @Input('cdkDropListData') data: T;\r\n\r\n  /** Direction in which the list is oriented. */\r\n  @Input('cdkDropListOrientation') orientation: 'horizontal' | 'vertical' = 'vertical';\r\n\r\n  /**\r\n   * Unique ID for the drop zone. Can be used as a reference\r\n   * in the `connectedTo` of another `CdkDropList`.\r\n   */\r\n  @Input() id: string = `cdk-drop-list-${_uniqueIdCounter++}`;\r\n\r\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\r\n  @Input('cdkDropListLockAxis') lockAxis: 'x' | 'y';\r\n\r\n  /** Whether starting a dragging sequence from this container is disabled. */\r\n  @Input('cdkDropListDisabled')\r\n  get disabled(): boolean {\r\n    return this._disabled || (!!this._group && this._group.disabled);\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n  }\r\n  private _disabled = false;\r\n\r\n  /** Whether sorting within this drop list is disabled. */\r\n  @Input('cdkDropListSortingDisabled')\r\n  get sortingDisabled(): boolean { return this._sortingDisabled; }\r\n  set sortingDisabled(value: boolean) {\r\n    this._sortingDisabled = coerceBooleanProperty(value);\r\n  }\r\n  private _sortingDisabled = false;\r\n\r\n  /**\r\n   * Function that is used to determine whether an item\r\n   * is allowed to be moved into a drop container.\r\n   */\r\n  @Input('cdkDropListEnterPredicate')\r\n  enterPredicate: (drag: CdkDrag, drop: CdkDropList) => boolean = () => true\r\n\r\n  /** Whether to auto-scroll the view when the user moves their pointer close to the edges. */\r\n  @Input('cdkDropListAutoScrollDisabled')\r\n  autoScrollDisabled: boolean = false;\r\n\r\n  /** Emits when the user drops an item inside the container. */\r\n  @Output('cdkDropListDropped')\r\n  dropped: EventEmitter<CdkDragDrop<T, any>> = new EventEmitter<CdkDragDrop<T, any>>();\r\n\r\n  /**\r\n   * Emits when the user has moved a new drag item into this container.\r\n   */\r\n  @Output('cdkDropListEntered')\r\n  entered: EventEmitter<CdkDragEnter<T>> = new EventEmitter<CdkDragEnter<T>>();\r\n\r\n  /**\r\n   * Emits when the user removes an item from the container\r\n   * by dragging it into another container.\r\n   */\r\n  @Output('cdkDropListExited')\r\n  exited: EventEmitter<CdkDragExit<T>> = new EventEmitter<CdkDragExit<T>>();\r\n\r\n  /** Emits as the user is swapping items while actively dragging. */\r\n  @Output('cdkDropListSorted')\r\n  sorted: EventEmitter<CdkDragSortEvent<T>> = new EventEmitter<CdkDragSortEvent<T>>();\r\n\r\n  constructor(\r\n      /** Element that the drop list is attached to. */\r\n      public element: ElementRef<HTMLElement>, dragDrop: DragDrop,\r\n      private _changeDetectorRef: ChangeDetectorRef, @Optional() private _dir?: Directionality,\r\n      @Optional() @SkipSelf() private _group?: CdkDropListGroup<CdkDropList>) {\r\n    this._dropListRef = dragDrop.createDropList(element);\r\n    this._dropListRef.data = this;\r\n    this._dropListRef.enterPredicate = (drag: DragRef<CdkDrag>, drop: DropListRef<CdkDropList>) => {\r\n      return this.enterPredicate(drag.data, drop.data);\r\n    };\r\n\r\n    this._syncInputs(this._dropListRef);\r\n    this._handleEvents(this._dropListRef);\r\n    CdkDropList._dropLists.push(this);\r\n\r\n    if (_group) {\r\n      _group._items.add(this);\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._draggables.changes\r\n      .pipe(startWith(this._draggables), takeUntil(this._destroyed))\r\n      .subscribe((items: QueryList<CdkDrag>) => {\r\n        this._dropListRef.withItems(items.map(drag => drag._dragRef));\r\n      });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    const index = CdkDropList._dropLists.indexOf(this);\r\n\r\n    if (index > -1) {\r\n      CdkDropList._dropLists.splice(index, 1);\r\n    }\r\n\r\n    if (this._group) {\r\n      this._group._items.delete(this);\r\n    }\r\n\r\n    this._dropListRef.dispose();\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /** Starts dragging an item. */\r\n  start(): void {\r\n    this._dropListRef.start();\r\n  }\r\n\r\n  /**\r\n   * Drops an item into this container.\r\n   * @param item Item being dropped into the container.\r\n   * @param currentIndex Index at which the item should be inserted.\r\n   * @param previousContainer Container from which the item got dragged in.\r\n   * @param isPointerOverContainer Whether the user's pointer was over the\r\n   *    container when the item was dropped.\r\n   */\r\n  drop(item: CdkDrag, currentIndex: number, previousContainer: Partial<CdkDropListContainer>,\r\n    isPointerOverContainer: boolean): void {\r\n    this._dropListRef.drop(item._dragRef, currentIndex,\r\n      (previousContainer as CdkDropList)._dropListRef, isPointerOverContainer);\r\n  }\r\n\r\n  /**\r\n   * Emits an event to indicate that the user moved an item into the container.\r\n   * @param item Item that was moved into the container.\r\n   * @param pointerX Position of the item along the X axis.\r\n   * @param pointerY Position of the item along the Y axis.\r\n   */\r\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void {\r\n    this._dropListRef.enter(item._dragRef, pointerX, pointerY);\r\n  }\r\n\r\n  /**\r\n   * Removes an item from the container after it was dragged into another container by the user.\r\n   * @param item Item that was dragged out.\r\n   */\r\n  exit(item: CdkDrag): void {\r\n    this._dropListRef.exit(item._dragRef);\r\n  }\r\n\r\n  /**\r\n   * Figures out the index of an item in the container.\r\n   * @param item Item whose index should be determined.\r\n   */\r\n  getItemIndex(item: CdkDrag): number {\r\n    return this._dropListRef.getItemIndex(item._dragRef);\r\n  }\r\n\r\n  /**\r\n   * Sorts an item inside the container based on its position.\r\n   * @param item Item to be sorted.\r\n   * @param pointerX Position of the item along the X axis.\r\n   * @param pointerY Position of the item along the Y axis.\r\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\r\n   */\r\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number,\r\n            pointerDelta: {x: number, y: number}): void {\r\n    return this._dropListRef._sortItem(item._dragRef, pointerX, pointerY, pointerDelta);\r\n  }\r\n\r\n  /**\r\n   * Figures out whether an item should be moved into a sibling\r\n   * drop container, based on its current position.\r\n   * @param item Drag item that is being moved.\r\n   * @param x Position of the item along the X axis.\r\n   * @param y Position of the item along the Y axis.\r\n   */\r\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\r\n    CdkDropListContainer | null {\r\n    const result = this._dropListRef._getSiblingContainerFromPosition(item._dragRef, x, y);\r\n    return result ? result.data : null;\r\n  }\r\n\r\n  /**\r\n   * Checks whether the user's pointer is positioned over the container.\r\n   * @param x Pointer position along the X axis.\r\n   * @param y Pointer position along the Y axis.\r\n   */\r\n  _isOverContainer(x: number, y: number): boolean {\r\n    return this._dropListRef._isOverContainer(x, y);\r\n  }\r\n\r\n  /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\r\n  private _syncInputs(ref: DropListRef<CdkDropList>) {\r\n    if (this._dir) {\r\n      this._dir.change\r\n        .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\r\n        .subscribe(value => ref.withDirection(value));\r\n    }\r\n\r\n    ref.beforeStarted.subscribe(() => {\r\n      const siblings = coerceArray(this.connectedTo).map(drop => {\r\n        return typeof drop === 'string' ?\r\n            CdkDropList._dropLists.find(list => list.id === drop)! : drop;\r\n      });\r\n\r\n      if (this._group) {\r\n        this._group._items.forEach(drop => {\r\n          if (siblings.indexOf(drop) === -1) {\r\n            siblings.push(drop);\r\n          }\r\n        });\r\n      }\r\n\r\n      ref.disabled = this.disabled;\r\n      ref.lockAxis = this.lockAxis;\r\n      ref.sortingDisabled = this.sortingDisabled;\r\n      ref.autoScrollDisabled = this.autoScrollDisabled;\r\n      ref\r\n        .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\r\n        .withOrientation(this.orientation);\r\n    });\r\n  }\r\n\r\n  /** Handles events from the underlying DropListRef. */\r\n  private _handleEvents(ref: DropListRef<CdkDropList>) {\r\n    ref.beforeStarted.subscribe(() => {\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    ref.entered.subscribe(event => {\r\n      this.entered.emit({\r\n        container: this,\r\n        item: event.item.data,\r\n        currentIndex: event.currentIndex\r\n      });\r\n    });\r\n\r\n    ref.exited.subscribe(event => {\r\n      this.exited.emit({\r\n        container: this,\r\n        item: event.item.data\r\n      });\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    ref.sorted.subscribe(event => {\r\n      this.sorted.emit({\r\n        previousIndex: event.previousIndex,\r\n        currentIndex: event.currentIndex,\r\n        container: this,\r\n        item: event.item.data\r\n      });\r\n    });\r\n\r\n    ref.dropped.subscribe(event => {\r\n      this.dropped.emit({\r\n        previousIndex: event.previousIndex,\r\n        currentIndex: event.currentIndex,\r\n        previousContainer: event.previousContainer.data,\r\n        container: event.container.data,\r\n        item: event.item.data,\r\n        isPointerOverContainer: event.isPointerOverContainer,\r\n        distance: event.distance\r\n      });\r\n\r\n      // Mark for check since all of these events run outside of change\r\n      // detection and we're not guaranteed for something else to have triggered it.\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CdkDropList} from './directives/drop-list';\r\nimport {CdkDropListGroup} from './directives/drop-list-group';\r\nimport {CdkDrag} from './directives/drag';\r\nimport {CdkDragHandle} from './directives/drag-handle';\r\nimport {CdkDragPreview} from './directives/drag-preview';\r\nimport {CdkDragPlaceholder} from './directives/drag-placeholder';\r\nimport {DragDrop} from './drag-drop';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CdkDropList,\r\n    CdkDropListGroup,\r\n    CdkDrag,\r\n    CdkDragHandle,\r\n    CdkDragPreview,\r\n    CdkDragPlaceholder,\r\n  ],\r\n  exports: [\r\n    CdkDropList,\r\n    CdkDropListGroup,\r\n    CdkDrag,\r\n    CdkDragHandle,\r\n    CdkDragPreview,\r\n    CdkDragPlaceholder,\r\n  ],\r\n  providers: [\r\n    DragDrop,\r\n  ]\r\n})\r\nexport class DragDropModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\r\n// Helper type that ignores `readonly` properties. This is used in\r\n// `extendStyles` to ignore the readonly properties on CSSStyleDeclaration\r\n// since we won't be touching those anyway.\r\ntype Writeable<T> = { -readonly [P in keyof T]-?: T[P] };\r\n\r\n/**\r\n * Extended CSSStyleDeclaration that includes a couple of drag-related\r\n * properties that aren't in the built-in TS typings.\r\n */\r\ninterface DragCSSStyleDeclaration extends CSSStyleDeclaration {\r\n  webkitUserDrag: string;\r\n  MozUserSelect: string; // For some reason the Firefox property is in PascalCase.\r\n}\r\n\r\n/**\r\n * Shallow-extends a stylesheet object with another stylesheet object.\r\n * @docs-private\r\n */\r\nexport function extendStyles(\r\n    dest: Writeable<CSSStyleDeclaration>,\r\n    source: Partial<DragCSSStyleDeclaration>) {\r\n  for (let key in source) {\r\n    if (source.hasOwnProperty(key)) {\r\n      dest[key as keyof CSSStyleDeclaration] = source[key as keyof CSSStyleDeclaration];\r\n    }\r\n  }\r\n\r\n  return dest;\r\n}\r\n\r\n\r\n/**\r\n * Toggles whether the native drag interactions should be enabled for an element.\r\n * @param element Element on which to toggle the drag interactions.\r\n * @param enable Whether the drag interactions should be enabled.\r\n * @docs-private\r\n */\r\nexport function toggleNativeDragInteractions(element: HTMLElement, enable: boolean) {\r\n  const userSelect = enable ? '' : 'none';\r\n\r\n  extendStyles(element.style, {\r\n    touchAction: enable ? '' : 'none',\r\n    webkitUserDrag: enable ? '' : 'none',\r\n    webkitTapHighlightColor: enable ? '' : 'transparent',\r\n    userSelect: userSelect,\r\n    msUserSelect: userSelect,\r\n    webkitUserSelect: userSelect,\r\n    MozUserSelect: userSelect\r\n  });\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** Parses a CSS time value to milliseconds. */\r\nfunction parseCssTimeUnitsToMs(value: string): number {\r\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\r\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\r\n  return parseFloat(value) * multiplier;\r\n}\r\n\r\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\r\nexport function getTransformTransitionDurationInMs(element: HTMLElement): number {\r\n  const computedStyle = getComputedStyle(element);\r\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\r\n  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\r\n\r\n  // If there's no transition for `all` or `transform`, we shouldn't do anything.\r\n  if (!property) {\r\n    return 0;\r\n  }\r\n\r\n  // Get the index of the property that we're interested in and match\r\n  // it up to the same index in `transition-delay` and `transition-duration`.\r\n  const propertyIndex = transitionedProperties.indexOf(property);\r\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\r\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\r\n\r\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\r\n         parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\r\n}\r\n\r\n/** Parses out multiple values from a computed style into an array. */\r\nfunction parseCssPropertyValue(computedStyle: CSSStyleDeclaration, name: string): string[] {\r\n  const value = computedStyle.getPropertyValue(name);\r\n  return value.split(',').map(part => part.trim());\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {EmbeddedViewRef, ElementRef, NgZone, ViewContainerRef, TemplateRef} from '@angular/core';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {Direction} from '@angular/cdk/bidi';\r\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\r\nimport {coerceBooleanProperty, coerceElement} from '@angular/cdk/coercion';\r\nimport {Subscription, Subject, Observable} from 'rxjs';\r\nimport {startWith} from 'rxjs/operators';\r\nimport {DropListRefInternal as DropListRef} from './drop-list-ref';\r\nimport {DragDropRegistry} from './drag-drop-registry';\r\nimport {extendStyles, toggleNativeDragInteractions} from './drag-styling';\r\nimport {getTransformTransitionDurationInMs} from './transition-duration';\r\n\r\n/** Object that can be used to configure the behavior of DragRef. */\r\nexport interface DragRefConfig {\r\n  /**\r\n   * Minimum amount of pixels that the user should\r\n   * drag, before the CDK initiates a drag sequence.\r\n   */\r\n  dragStartThreshold: number;\r\n\r\n  /**\r\n   * Amount the pixels the user should drag before the CDK\r\n   * considers them to have changed the drag direction.\r\n   */\r\n  pointerDirectionChangeThreshold: number;\r\n}\r\n\r\n/** Options that can be used to bind a passive event listener. */\r\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\r\n\r\n/** Options that can be used to bind an active event listener. */\r\nconst activeEventListenerOptions = normalizePassiveListenerOptions({passive: false});\r\n\r\n/**\r\n * Time in milliseconds for which to ignore mouse events, after\r\n * receiving a touch event. Used to avoid doing double work for\r\n * touch devices where the browser fires fake mouse events, in\r\n * addition to touch events.\r\n */\r\nconst MOUSE_EVENT_IGNORE_TIME = 800;\r\n\r\n// TODO(crisbeto): add an API for moving a draggable up/down the\r\n// list programmatically. Useful for keyboard controls.\r\n\r\n/**\r\n * Internal compile-time-only representation of a `DragRef`.\r\n * Used to avoid circular import issues between the `DragRef` and the `DropListRef`.\r\n * @docs-private\r\n */\r\nexport interface DragRefInternal extends DragRef {}\r\n\r\n/** Template that can be used to create a drag helper element (e.g. a preview or a placeholder). */\r\ninterface DragHelperTemplate<T = any> {\r\n  template: TemplateRef<T> | null;\r\n  viewContainer: ViewContainerRef;\r\n  context: T;\r\n}\r\n\r\n/**\r\n * Reference to a draggable item. Used to manipulate or dispose of the item.\r\n * @docs-private\r\n */\r\nexport class DragRef<T = any> {\r\n  /** Element displayed next to the user's pointer while the element is dragged. */\r\n  private _preview: HTMLElement;\r\n\r\n  /** Reference to the view of the preview element. */\r\n  private _previewRef: EmbeddedViewRef<any> | null;\r\n\r\n  /** Reference to the view of the placeholder element. */\r\n  private _placeholderRef: EmbeddedViewRef<any> | null;\r\n\r\n  /** Element that is rendered instead of the draggable item while it is being sorted. */\r\n  private _placeholder: HTMLElement;\r\n\r\n  /** Coordinates within the element at which the user picked up the element. */\r\n  private _pickupPositionInElement: Point;\r\n\r\n  /** Coordinates on the page at which the user picked up the element. */\r\n  private _pickupPositionOnPage: Point;\r\n\r\n  /**\r\n   * Reference to the element that comes after the draggable in the DOM, at the time\r\n   * it was picked up. Used for restoring its initial position when it's dropped.\r\n   */\r\n  private _nextSibling: Node | null;\r\n\r\n  /**\r\n   * CSS `transform` applied to the element when it isn't being dragged. We need a\r\n   * passive transform in order for the dragged element to retain its new position\r\n   * after the user has stopped dragging and because we need to know the relative\r\n   * position in case they start dragging again. This corresponds to `element.style.transform`.\r\n   */\r\n  private _passiveTransform: Point = {x: 0, y: 0};\r\n\r\n  /** CSS `transform` that is applied to the element while it's being dragged. */\r\n  private _activeTransform: Point = {x: 0, y: 0};\r\n\r\n  /** Inline `transform` value that the element had before the first dragging sequence. */\r\n  private _initialTransform?: string;\r\n\r\n  /**\r\n   * Whether the dragging sequence has been started. Doesn't\r\n   * necessarily mean that the element has been moved.\r\n   */\r\n  private _hasStartedDragging: boolean;\r\n\r\n  /** Whether the element has moved since the user started dragging it. */\r\n  private _hasMoved: boolean;\r\n\r\n  /** Drop container in which the DragRef resided when dragging began. */\r\n  private _initialContainer: DropListRef;\r\n\r\n  /** Cached scroll position on the page when the element was picked up. */\r\n  private _scrollPosition: {top: number, left: number};\r\n\r\n  /** Emits when the item is being moved. */\r\n  private _moveEvents = new Subject<{\r\n    source: DragRef;\r\n    pointerPosition: {x: number, y: number};\r\n    event: MouseEvent | TouchEvent;\r\n    distance: Point;\r\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\r\n  }>();\r\n\r\n  /** Keeps track of the direction in which the user is dragging along each axis. */\r\n  private _pointerDirectionDelta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\r\n\r\n  /** Pointer position at which the last change in the delta occurred. */\r\n  private _pointerPositionAtLastDirectionChange: Point;\r\n\r\n  /**\r\n   * Root DOM node of the drag instance. This is the element that will\r\n   * be moved around as the user is dragging.\r\n   */\r\n  private _rootElement: HTMLElement;\r\n\r\n  /**\r\n   * Inline style value of `-webkit-tap-highlight-color` at the time the\r\n   * dragging was started. Used to restore the value once we're done dragging.\r\n   */\r\n  private _rootElementTapHighlight: string | null;\r\n\r\n  /** Subscription to pointer movement events. */\r\n  private _pointerMoveSubscription = Subscription.EMPTY;\r\n\r\n  /** Subscription to the event that is dispatched when the user lifts their pointer. */\r\n  private _pointerUpSubscription = Subscription.EMPTY;\r\n\r\n  /** Subscription to the viewport being scrolled. */\r\n  private _scrollSubscription = Subscription.EMPTY;\r\n\r\n  /**\r\n   * Time at which the last touch event occurred. Used to avoid firing the same\r\n   * events multiple times on touch devices where the browser will fire a fake\r\n   * mouse event for each touch event, after a certain time.\r\n   */\r\n  private _lastTouchEventTime: number;\r\n\r\n  /** Time at which the last dragging sequence was started. */\r\n  private _dragStartTime: number;\r\n\r\n  /** Cached reference to the boundary element. */\r\n  private _boundaryElement: HTMLElement | null = null;\r\n\r\n  /** Whether the native dragging interactions have been enabled on the root element. */\r\n  private _nativeInteractionsEnabled = true;\r\n\r\n  /** Cached dimensions of the preview element. */\r\n  private _previewRect?: ClientRect;\r\n\r\n  /** Cached dimensions of the boundary element. */\r\n  private _boundaryRect?: ClientRect;\r\n\r\n  /** Element that will be used as a template to create the draggable item's preview. */\r\n  private _previewTemplate?: DragHelperTemplate | null;\r\n\r\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\r\n  private _placeholderTemplate?: DragHelperTemplate | null;\r\n\r\n  /** Elements that can be used to drag the draggable item. */\r\n  private _handles: HTMLElement[] = [];\r\n\r\n  /** Registered handles that are currently disabled. */\r\n  private _disabledHandles = new Set<HTMLElement>();\r\n\r\n  /** Droppable container that the draggable is a part of. */\r\n  private _dropContainer?: DropListRef;\r\n\r\n  /** Layout direction of the item. */\r\n  private _direction: Direction = 'ltr';\r\n\r\n  /** Axis along which dragging is locked. */\r\n  lockAxis: 'x' | 'y';\r\n\r\n  /**\r\n   * Amount of milliseconds to wait after the user has put their\r\n   * pointer down before starting to drag the element.\r\n   */\r\n  dragStartDelay: number = 0;\r\n\r\n  /** Whether starting to drag this element is disabled. */\r\n  get disabled(): boolean {\r\n    return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\r\n  }\r\n  set disabled(value: boolean) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this._disabled) {\r\n      this._disabled = newValue;\r\n      this._toggleNativeDragInteractions();\r\n    }\r\n  }\r\n  private _disabled = false;\r\n\r\n  /** Emits as the drag sequence is being prepared. */\r\n  beforeStarted = new Subject<void>();\r\n\r\n  /** Emits when the user starts dragging the item. */\r\n  started = new Subject<{source: DragRef}>();\r\n\r\n  /** Emits when the user has released a drag item, before any animations have started. */\r\n  released = new Subject<{source: DragRef}>();\r\n\r\n  /** Emits when the user stops dragging an item in the container. */\r\n  ended = new Subject<{source: DragRef, distance: Point}>();\r\n\r\n  /** Emits when the user has moved the item into a new container. */\r\n  entered = new Subject<{container: DropListRef, item: DragRef, currentIndex: number}>();\r\n\r\n  /** Emits when the user removes the item its container by dragging it into another container. */\r\n  exited = new Subject<{container: DropListRef, item: DragRef}>();\r\n\r\n  /** Emits when the user drops the item inside a container. */\r\n  dropped = new Subject<{\r\n    previousIndex: number;\r\n    currentIndex: number;\r\n    item: DragRef;\r\n    container: DropListRef;\r\n    previousContainer: DropListRef;\r\n    distance: Point;\r\n    isPointerOverContainer: boolean;\r\n  }>();\r\n\r\n  /**\r\n   * Emits as the user is dragging the item. Use with caution,\r\n   * because this event will fire for every pixel that the user has dragged.\r\n   */\r\n  moved: Observable<{\r\n    source: DragRef;\r\n    pointerPosition: {x: number, y: number};\r\n    event: MouseEvent | TouchEvent;\r\n    distance: Point;\r\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\r\n  }> = this._moveEvents.asObservable();\r\n\r\n  /** Arbitrary data that can be attached to the drag item. */\r\n  data: T;\r\n\r\n  /**\r\n   * Function that can be used to customize the logic of how the position of the drag item\r\n   * is limited while it's being dragged. Gets called with a point containing the current position\r\n   * of the user's pointer on the page and should return a point describing where the item should\r\n   * be rendered.\r\n   */\r\n  constrainPosition?: (point: Point, dragRef: DragRef) => Point;\r\n\r\n  constructor(\r\n    element: ElementRef<HTMLElement> | HTMLElement,\r\n    private _config: DragRefConfig,\r\n    private _document: Document,\r\n    private _ngZone: NgZone,\r\n    private _viewportRuler: ViewportRuler,\r\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {\r\n\r\n    this.withRootElement(element);\r\n    _dragDropRegistry.registerDragItem(this);\r\n  }\r\n\r\n  /**\r\n   * Returns the element that is being used as a placeholder\r\n   * while the current element is being dragged.\r\n   */\r\n  getPlaceholderElement(): HTMLElement {\r\n    return this._placeholder;\r\n  }\r\n\r\n  /** Returns the root draggable element. */\r\n  getRootElement(): HTMLElement {\r\n    return this._rootElement;\r\n  }\r\n\r\n  /** Registers the handles that can be used to drag the element. */\r\n  withHandles(handles: (HTMLElement | ElementRef<HTMLElement>)[]): this {\r\n    this._handles = handles.map(handle => coerceElement(handle));\r\n    this._handles.forEach(handle => toggleNativeDragInteractions(handle, false));\r\n    this._toggleNativeDragInteractions();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Registers the template that should be used for the drag preview.\r\n   * @param template Template that from which to stamp out the preview.\r\n   */\r\n  withPreviewTemplate(template: DragHelperTemplate | null): this {\r\n    this._previewTemplate = template;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Registers the template that should be used for the drag placeholder.\r\n   * @param template Template that from which to stamp out the placeholder.\r\n   */\r\n  withPlaceholderTemplate(template: DragHelperTemplate | null): this {\r\n    this._placeholderTemplate = template;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets an alternate drag root element. The root element is the element that will be moved as\r\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\r\n   * dragging on an element that you might not have access to.\r\n   */\r\n  withRootElement(rootElement: ElementRef<HTMLElement> | HTMLElement): this {\r\n    const element = coerceElement(rootElement);\r\n\r\n    if (element !== this._rootElement) {\r\n      if (this._rootElement) {\r\n        this._removeRootElementListeners(this._rootElement);\r\n      }\r\n\r\n      element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\r\n      element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\r\n      this._initialTransform = undefined;\r\n      this._rootElement = element;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Element to which the draggable's position will be constrained.\r\n   */\r\n  withBoundaryElement(boundaryElement: ElementRef<HTMLElement> | HTMLElement | null): this {\r\n    this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\r\n    return this;\r\n  }\r\n\r\n  /** Removes the dragging functionality from the DOM element. */\r\n  dispose() {\r\n    this._removeRootElementListeners(this._rootElement);\r\n\r\n    // Do this check before removing from the registry since it'll\r\n    // stop being considered as dragged once it is removed.\r\n    if (this.isDragging()) {\r\n      // Since we move out the element to the end of the body while it's being\r\n      // dragged, we have to make sure that it's removed if it gets destroyed.\r\n      removeElement(this._rootElement);\r\n    }\r\n\r\n    this._destroyPreview();\r\n    this._destroyPlaceholder();\r\n    this._dragDropRegistry.removeDragItem(this);\r\n    this._removeSubscriptions();\r\n    this.beforeStarted.complete();\r\n    this.started.complete();\r\n    this.released.complete();\r\n    this.ended.complete();\r\n    this.entered.complete();\r\n    this.exited.complete();\r\n    this.dropped.complete();\r\n    this._moveEvents.complete();\r\n    this._handles = [];\r\n    this._disabledHandles.clear();\r\n    this._dropContainer = undefined;\r\n    this._boundaryElement = this._rootElement = this._placeholderTemplate =\r\n        this._previewTemplate = this._nextSibling = null!;\r\n  }\r\n\r\n  /** Checks whether the element is currently being dragged. */\r\n  isDragging(): boolean {\r\n    return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\r\n  }\r\n\r\n  /** Resets a standalone drag item to its initial position. */\r\n  reset(): void {\r\n    this._rootElement.style.transform = this._initialTransform || '';\r\n    this._activeTransform = {x: 0, y: 0};\r\n    this._passiveTransform = {x: 0, y: 0};\r\n  }\r\n\r\n  /**\r\n   * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\r\n   * @param handle Handle element that should be disabled.\r\n   */\r\n  disableHandle(handle: HTMLElement) {\r\n    if (this._handles.indexOf(handle) > -1) {\r\n      this._disabledHandles.add(handle);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enables a handle, if it has been disabled.\r\n   * @param handle Handle element to be enabled.\r\n   */\r\n  enableHandle(handle: HTMLElement) {\r\n    this._disabledHandles.delete(handle);\r\n  }\r\n\r\n  /** Sets the layout direction of the draggable item. */\r\n  withDirection(direction: Direction): this {\r\n    this._direction = direction;\r\n    return this;\r\n  }\r\n\r\n  /** Sets the container that the item is part of. */\r\n  _withDropContainer(container: DropListRef) {\r\n    this._dropContainer = container;\r\n  }\r\n\r\n  /**\r\n   * Gets the current position in pixels the draggable outside of a drop container.\r\n   */\r\n  getFreeDragPosition(): Readonly<Point> {\r\n    const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\r\n    return {x: position.x, y: position.y};\r\n  }\r\n\r\n  /**\r\n   * Sets the current position in pixels the draggable outside of a drop container.\r\n   * @param value New position to be set.\r\n   */\r\n  setFreeDragPosition(value: Point): this {\r\n    this._activeTransform = {x: 0, y: 0};\r\n    this._passiveTransform.x = value.x;\r\n    this._passiveTransform.y = value.y;\r\n\r\n    if (!this._dropContainer) {\r\n      this._applyRootElementTransform(value.x, value.y);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** Updates the item's sort order based on the last-known pointer position. */\r\n  _sortFromLastPointerPosition() {\r\n    const position = this._pointerPositionAtLastDirectionChange;\r\n\r\n    if (position && this._dropContainer) {\r\n      this._updateActiveDropContainer(position);\r\n    }\r\n  }\r\n\r\n  /** Unsubscribes from the global subscriptions. */\r\n  private _removeSubscriptions() {\r\n    this._pointerMoveSubscription.unsubscribe();\r\n    this._pointerUpSubscription.unsubscribe();\r\n    this._scrollSubscription.unsubscribe();\r\n  }\r\n\r\n  /** Destroys the preview element and its ViewRef. */\r\n  private _destroyPreview() {\r\n    if (this._preview) {\r\n      removeElement(this._preview);\r\n    }\r\n\r\n    if (this._previewRef) {\r\n      this._previewRef.destroy();\r\n    }\r\n\r\n    this._preview = this._previewRef = null!;\r\n  }\r\n\r\n  /** Destroys the placeholder element and its ViewRef. */\r\n  private _destroyPlaceholder() {\r\n    if (this._placeholder) {\r\n      removeElement(this._placeholder);\r\n    }\r\n\r\n    if (this._placeholderRef) {\r\n      this._placeholderRef.destroy();\r\n    }\r\n\r\n    this._placeholder = this._placeholderRef = null!;\r\n  }\r\n\r\n  /** Handler for the `mousedown`/`touchstart` events. */\r\n  private _pointerDown = (event: MouseEvent | TouchEvent) => {\r\n    this.beforeStarted.next();\r\n\r\n    // Delegate the event based on whether it started from a handle or the element itself.\r\n    if (this._handles.length) {\r\n      const targetHandle = this._handles.find(handle => {\r\n        const target = event.target;\r\n        return !!target && (target === handle || handle.contains(target as HTMLElement));\r\n      });\r\n\r\n      if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\r\n        this._initializeDragSequence(targetHandle, event);\r\n      }\r\n    } else if (!this.disabled) {\r\n      this._initializeDragSequence(this._rootElement, event);\r\n    }\r\n  }\r\n\r\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\r\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\r\n    if (!this._hasStartedDragging) {\r\n      const pointerPosition = this._getPointerPositionOnPage(event);\r\n      const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\r\n      const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\r\n      const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\r\n\r\n      // Only start dragging after the user has moved more than the minimum distance in either\r\n      // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\r\n      // in the `pointerMove` subscription, because we're not guaranteed to have one move event\r\n      // per pixel of movement (e.g. if the user moves their pointer quickly).\r\n      if (isOverThreshold) {\r\n        const isDelayElapsed = Date.now() >= this._dragStartTime + (this.dragStartDelay || 0);\r\n        if (!isDelayElapsed) {\r\n          this._endDragSequence(event);\r\n          return;\r\n        }\r\n\r\n        // We need to prevent default here in case the pointer move starts a scroll sequence.\r\n        // If we do not prevent the scroll from starting, then we won't be able to prevent future\r\n        // touchemove events.\r\n        event.preventDefault();\r\n\r\n        // Prevent other drag sequences from starting while something in the container is still\r\n        // being dragged. This can happen while we're waiting for the drop animation to finish\r\n        // and can cause errors, because some elements might still be moving around.\r\n        if (!this._dropContainer || !this._dropContainer.isDragging()) {\r\n          this._hasStartedDragging = true;\r\n          this._ngZone.run(() => this._startDragSequence(event));\r\n        }\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    // We only need the preview dimensions if we have a boundary element.\r\n    if (this._boundaryElement) {\r\n      // Cache the preview element rect if we haven't cached it already or if\r\n      // we cached it too early before the element dimensions were computed.\r\n      if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\r\n        this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\r\n      }\r\n    }\r\n\r\n    const constrainedPointerPosition = this._getConstrainedPointerPosition(event);\r\n    this._hasMoved = true;\r\n    event.preventDefault();\r\n    this._updatePointerDirectionDelta(constrainedPointerPosition);\r\n\r\n    if (this._dropContainer) {\r\n      this._updateActiveDropContainer(constrainedPointerPosition);\r\n    } else {\r\n      const activeTransform = this._activeTransform;\r\n      activeTransform.x =\r\n          constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\r\n      activeTransform.y =\r\n          constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\r\n\r\n      this._applyRootElementTransform(activeTransform.x, activeTransform.y);\r\n\r\n      // Apply transform as attribute if dragging and svg element to work for IE\r\n      if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\r\n        const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\r\n        this._rootElement.setAttribute('transform', appliedTransform);\r\n      }\r\n    }\r\n\r\n    // Since this event gets fired for every pixel while dragging, we only\r\n    // want to fire it if the consumer opted into it. Also we have to\r\n    // re-enter the zone because we run all of the events on the outside.\r\n    if (this._moveEvents.observers.length) {\r\n      this._ngZone.run(() => {\r\n        this._moveEvents.next({\r\n          source: this,\r\n          pointerPosition: constrainedPointerPosition,\r\n          event,\r\n          distance: this._getDragDistance(constrainedPointerPosition),\r\n          delta: this._pointerDirectionDelta\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\r\n  private _pointerUp = (event: MouseEvent | TouchEvent) => {\r\n    this._endDragSequence(event);\r\n  }\r\n\r\n  /**\r\n   * Clears subscriptions and stops the dragging sequence.\r\n   * @param event Browser event object that ended the sequence.\r\n   */\r\n  private _endDragSequence(event: MouseEvent | TouchEvent) {\r\n    toggleNativeDragInteractions(this._rootElement, true);\r\n\r\n    // Note that here we use `isDragging` from the service, rather than from `this`.\r\n    // The difference is that the one from the service reflects whether a dragging sequence\r\n    // has been initiated, whereas the one on `this` includes whether the user has passed\r\n    // the minimum dragging threshold.\r\n    if (!this._dragDropRegistry.isDragging(this)) {\r\n      return;\r\n    }\r\n\r\n    this._removeSubscriptions();\r\n    this._dragDropRegistry.stopDragging(this);\r\n\r\n    if (this._handles) {\r\n      this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\r\n    }\r\n\r\n    if (!this._hasStartedDragging) {\r\n      return;\r\n    }\r\n\r\n    this.released.next({source: this});\r\n\r\n    if (this._dropContainer) {\r\n      // Stop scrolling immediately, instead of waiting for the animation to finish.\r\n      this._dropContainer._stopScrolling();\r\n      this._animatePreviewToPlaceholder().then(() => {\r\n        this._cleanupDragArtifacts(event);\r\n        this._dragDropRegistry.stopDragging(this);\r\n      });\r\n    } else {\r\n      // Convert the active transform into a passive one. This means that next time\r\n      // the user starts dragging the item, its position will be calculated relatively\r\n      // to the new passive transform.\r\n      this._passiveTransform.x = this._activeTransform.x;\r\n      this._passiveTransform.y = this._activeTransform.y;\r\n      this._ngZone.run(() => {\r\n        this.ended.next({\r\n          source: this,\r\n          distance: this._getDragDistance(this._getPointerPositionOnPage(event))\r\n        });\r\n      });\r\n      this._dragDropRegistry.stopDragging(this);\r\n    }\r\n  }\r\n\r\n  /** Starts the dragging sequence. */\r\n  private _startDragSequence(event: MouseEvent | TouchEvent) {\r\n    this._dragDropRegistry.startDragging(this);\r\n\r\n    // Emit the event on the item before the one on the container.\r\n    this.started.next({source: this});\r\n\r\n    if (isTouchEvent(event)) {\r\n      this._lastTouchEventTime = Date.now();\r\n    }\r\n\r\n    this._toggleNativeDragInteractions();\r\n\r\n    if (this._dropContainer) {\r\n      const element = this._rootElement;\r\n\r\n      // Grab the `nextSibling` before the preview and placeholder\r\n      // have been created so we don't get the preview by accident.\r\n      this._nextSibling = element.nextSibling;\r\n\r\n      const preview = this._preview = this._createPreviewElement();\r\n      const placeholder = this._placeholder = this._createPlaceholderElement();\r\n\r\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\r\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\r\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\r\n      element.style.display = 'none';\r\n      this._document.body.appendChild(element.parentNode!.replaceChild(placeholder, element));\r\n      getPreviewInsertionPoint(this._document).appendChild(preview);\r\n      this._dropContainer.start();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets up the different variables and subscriptions\r\n   * that will be necessary for the dragging sequence.\r\n   * @param referenceElement Element that started the drag sequence.\r\n   * @param event Browser event object that started the sequence.\r\n   */\r\n  private _initializeDragSequence(referenceElement: HTMLElement, event: MouseEvent | TouchEvent) {\r\n    // Always stop propagation for the event that initializes\r\n    // the dragging sequence, in order to prevent it from potentially\r\n    // starting another sequence for a draggable parent somewhere up the DOM tree.\r\n    event.stopPropagation();\r\n\r\n    const isDragging = this.isDragging();\r\n    const isTouchSequence = isTouchEvent(event);\r\n    const isAuxiliaryMouseButton = !isTouchSequence && (event as MouseEvent).button !== 0;\r\n    const rootElement = this._rootElement;\r\n    const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\r\n      this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\r\n\r\n    // If the event started from an element with the native HTML drag&drop, it'll interfere\r\n    // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\r\n    // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\r\n    // it's flaky and it fails if the user drags it away quickly. Also note that we only want\r\n    // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\r\n    // events from firing on touch devices.\r\n    if (event.target && (event.target as HTMLElement).draggable && event.type === 'mousedown') {\r\n      event.preventDefault();\r\n    }\r\n\r\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\r\n    if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\r\n      return;\r\n    }\r\n\r\n    // If we've got handles, we need to disable the tap highlight on the entire root element,\r\n    // otherwise iOS will still add it, even though all the drag interactions on the handle\r\n    // are disabled.\r\n    if (this._handles.length) {\r\n      this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\r\n      rootElement.style.webkitTapHighlightColor = 'transparent';\r\n    }\r\n\r\n    this._hasStartedDragging = this._hasMoved = false;\r\n    this._initialContainer = this._dropContainer!;\r\n\r\n    // Avoid multiple subscriptions and memory leaks when multi touch\r\n    // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\r\n    this._removeSubscriptions();\r\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\r\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\r\n    this._scrollSubscription = this._dragDropRegistry.scroll.pipe(startWith(null)).subscribe(() => {\r\n      this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\r\n    });\r\n\r\n    if (this._boundaryElement) {\r\n      this._boundaryRect = this._boundaryElement.getBoundingClientRect();\r\n    }\r\n\r\n    // If we have a custom preview template, the element won't be visible anyway so we avoid the\r\n    // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\r\n    this._pickupPositionInElement = this._previewTemplate && this._previewTemplate.template ?\r\n      {x: 0, y: 0} :\r\n      this._getPointerPositionInElement(referenceElement, event);\r\n    const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\r\n    this._pointerDirectionDelta = {x: 0, y: 0};\r\n    this._pointerPositionAtLastDirectionChange = {x: pointerPosition.x, y: pointerPosition.y};\r\n    this._dragStartTime = Date.now();\r\n    this._dragDropRegistry.initializeDragging(this, event);\r\n  }\r\n\r\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\r\n  private _cleanupDragArtifacts(event: MouseEvent | TouchEvent) {\r\n    // Restore the element's visibility and insert it at its old position in the DOM.\r\n    // It's important that we maintain the position, because moving the element around in the DOM\r\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\r\n    // while moving the existing elements in all other cases.\r\n    this._rootElement.style.display = '';\r\n\r\n    if (this._nextSibling) {\r\n      this._nextSibling.parentNode!.insertBefore(this._rootElement, this._nextSibling);\r\n    } else {\r\n      coerceElement(this._initialContainer.element).appendChild(this._rootElement);\r\n    }\r\n\r\n    this._destroyPreview();\r\n    this._destroyPlaceholder();\r\n    this._boundaryRect = this._previewRect = undefined;\r\n\r\n    // Re-enter the NgZone since we bound `document` events on the outside.\r\n    this._ngZone.run(() => {\r\n      const container = this._dropContainer!;\r\n      const currentIndex = container.getItemIndex(this);\r\n      const pointerPosition = this._getPointerPositionOnPage(event);\r\n      const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\r\n      const isPointerOverContainer = container._isOverContainer(\r\n        pointerPosition.x, pointerPosition.y);\r\n\r\n      this.ended.next({source: this, distance});\r\n      this.dropped.next({\r\n        item: this,\r\n        currentIndex,\r\n        previousIndex: this._initialContainer.getItemIndex(this),\r\n        container: container,\r\n        previousContainer: this._initialContainer,\r\n        isPointerOverContainer,\r\n        distance\r\n      });\r\n      container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer, distance);\r\n      this._dropContainer = this._initialContainer;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates the item's position in its drop container, or moves it\r\n   * into a new one, depending on its current drag position.\r\n   */\r\n  private _updateActiveDropContainer({x, y}: Point) {\r\n    // Drop container that draggable has been moved into.\r\n    let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\r\n\r\n    // If we couldn't find a new container to move the item into, and the item has left it's\r\n    // initial container, check whether the it's over the initial container. This handles the\r\n    // case where two containers are connected one way and the user tries to undo dragging an\r\n    // item into a new container.\r\n    if (!newContainer && this._dropContainer !== this._initialContainer &&\r\n        this._initialContainer._isOverContainer(x, y)) {\r\n      newContainer = this._initialContainer;\r\n    }\r\n\r\n    if (newContainer && newContainer !== this._dropContainer) {\r\n      this._ngZone.run(() => {\r\n        // Notify the old container that the item has left.\r\n        this.exited.next({item: this, container: this._dropContainer!});\r\n        this._dropContainer!.exit(this);\r\n        // Notify the new container that the item has entered.\r\n        this._dropContainer = newContainer!;\r\n        this._dropContainer.enter(this, x, y);\r\n        this.entered.next({\r\n          item: this,\r\n          container: newContainer!,\r\n          currentIndex: newContainer!.getItemIndex(this)\r\n        });\r\n      });\r\n    }\r\n\r\n    this._dropContainer!._startScrollingIfNecessary(x, y);\r\n    this._dropContainer!._sortItem(this, x, y, this._pointerDirectionDelta);\r\n    this._preview.style.transform =\r\n        getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\r\n  }\r\n\r\n  /**\r\n   * Creates the element that will be rendered next to the user's pointer\r\n   * and will be used as a preview of the element that is being dragged.\r\n   */\r\n  private _createPreviewElement(): HTMLElement {\r\n    const previewConfig = this._previewTemplate;\r\n    const previewTemplate = previewConfig ? previewConfig.template : null;\r\n    let preview: HTMLElement;\r\n\r\n    if (previewTemplate) {\r\n      const viewRef = previewConfig!.viewContainer.createEmbeddedView(previewTemplate,\r\n                                                                      previewConfig!.context);\r\n      preview = viewRef.rootNodes[0];\r\n      this._previewRef = viewRef;\r\n      preview.style.transform =\r\n          getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\r\n    } else {\r\n      const element = this._rootElement;\r\n      const elementRect = element.getBoundingClientRect();\r\n\r\n      preview = deepCloneNode(element);\r\n      preview.style.width = `${elementRect.width}px`;\r\n      preview.style.height = `${elementRect.height}px`;\r\n      preview.style.transform = getTransform(elementRect.left, elementRect.top);\r\n    }\r\n\r\n    extendStyles(preview.style, {\r\n      // It's important that we disable the pointer events on the preview, because\r\n      // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\r\n      pointerEvents: 'none',\r\n      position: 'fixed',\r\n      top: '0',\r\n      left: '0',\r\n      zIndex: '1000'\r\n    });\r\n\r\n    toggleNativeDragInteractions(preview, false);\r\n\r\n    preview.classList.add('cdk-drag-preview');\r\n    preview.setAttribute('dir', this._direction);\r\n\r\n    return preview;\r\n  }\r\n\r\n  /**\r\n   * Animates the preview element from its current position to the location of the drop placeholder.\r\n   * @returns Promise that resolves when the animation completes.\r\n   */\r\n  private _animatePreviewToPlaceholder(): Promise<void> {\r\n    // If the user hasn't moved yet, the transitionend event won't fire.\r\n    if (!this._hasMoved) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    const placeholderRect = this._placeholder.getBoundingClientRect();\r\n\r\n    // Apply the class that adds a transition to the preview.\r\n    this._preview.classList.add('cdk-drag-animating');\r\n\r\n    // Move the preview to the placeholder position.\r\n    this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\r\n\r\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\r\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\r\n    // apply its style, we take advantage of the available info to figure out whether we need to\r\n    // bind the event in the first place.\r\n    const duration = getTransformTransitionDurationInMs(this._preview);\r\n\r\n    if (duration === 0) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    return this._ngZone.runOutsideAngular(() => {\r\n      return new Promise(resolve => {\r\n        const handler = ((event: TransitionEvent) => {\r\n          if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\r\n            this._preview.removeEventListener('transitionend', handler);\r\n            resolve();\r\n            clearTimeout(timeout);\r\n          }\r\n        }) as EventListenerOrEventListenerObject;\r\n\r\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\r\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\r\n        // fire if the transition hasn't completed when it was supposed to.\r\n        const timeout = setTimeout(handler as Function, duration * 1.5);\r\n        this._preview.addEventListener('transitionend', handler);\r\n      });\r\n    });\r\n  }\r\n\r\n  /** Creates an element that will be shown instead of the current element while dragging. */\r\n  private _createPlaceholderElement(): HTMLElement {\r\n    const placeholderConfig = this._placeholderTemplate;\r\n    const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\r\n    let placeholder: HTMLElement;\r\n\r\n    if (placeholderTemplate) {\r\n      this._placeholderRef = placeholderConfig!.viewContainer.createEmbeddedView(\r\n        placeholderTemplate,\r\n        placeholderConfig!.context\r\n      );\r\n      placeholder = this._placeholderRef.rootNodes[0];\r\n    } else {\r\n      placeholder = deepCloneNode(this._rootElement);\r\n    }\r\n\r\n    placeholder.classList.add('cdk-drag-placeholder');\r\n    return placeholder;\r\n  }\r\n\r\n  /**\r\n   * Figures out the coordinates at which an element was picked up.\r\n   * @param referenceElement Element that initiated the dragging.\r\n   * @param event Event that initiated the dragging.\r\n   */\r\n  private _getPointerPositionInElement(referenceElement: HTMLElement,\r\n                                       event: MouseEvent | TouchEvent): Point {\r\n    const elementRect = this._rootElement.getBoundingClientRect();\r\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\r\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\r\n    const point = isTouchEvent(event) ? event.targetTouches[0] : event;\r\n    const x = point.pageX - referenceRect.left - this._scrollPosition.left;\r\n    const y = point.pageY - referenceRect.top - this._scrollPosition.top;\r\n\r\n    return {\r\n      x: referenceRect.left - elementRect.left + x,\r\n      y: referenceRect.top - elementRect.top + y\r\n    };\r\n  }\r\n\r\n  /** Determines the point of the page that was touched by the user. */\r\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\r\n    // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\r\n    const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\r\n\r\n    return {\r\n      x: point.pageX - this._scrollPosition.left,\r\n      y: point.pageY - this._scrollPosition.top\r\n    };\r\n  }\r\n\r\n\r\n  /** Gets the pointer position on the page, accounting for any position constraints. */\r\n  private _getConstrainedPointerPosition(event: MouseEvent | TouchEvent): Point {\r\n    const point = this._getPointerPositionOnPage(event);\r\n    const constrainedPoint = this.constrainPosition ? this.constrainPosition(point, this) : point;\r\n    const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\r\n\r\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\r\n      constrainedPoint.y = this._pickupPositionOnPage.y;\r\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\r\n      constrainedPoint.x = this._pickupPositionOnPage.x;\r\n    }\r\n\r\n    if (this._boundaryRect) {\r\n      const {x: pickupX, y: pickupY} = this._pickupPositionInElement;\r\n      const boundaryRect = this._boundaryRect;\r\n      const previewRect = this._previewRect!;\r\n      const minY = boundaryRect.top + pickupY;\r\n      const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\r\n      const minX = boundaryRect.left + pickupX;\r\n      const maxX = boundaryRect.right - (previewRect.width - pickupX);\r\n\r\n      constrainedPoint.x = clamp(constrainedPoint.x, minX, maxX);\r\n      constrainedPoint.y = clamp(constrainedPoint.y, minY, maxY);\r\n    }\r\n\r\n    return constrainedPoint;\r\n  }\r\n\r\n\r\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\r\n  private _updatePointerDirectionDelta(pointerPositionOnPage: Point) {\r\n    const {x, y} = pointerPositionOnPage;\r\n    const delta = this._pointerDirectionDelta;\r\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\r\n\r\n    // Amount of pixels the user has dragged since the last time the direction changed.\r\n    const changeX = Math.abs(x - positionSinceLastChange.x);\r\n    const changeY = Math.abs(y - positionSinceLastChange.y);\r\n\r\n    // Because we handle pointer events on a per-pixel basis, we don't want the delta\r\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\r\n    // To make the delta more consistent, we track how much the user has moved since the last\r\n    // delta change and we only update it after it has reached a certain threshold.\r\n    if (changeX > this._config.pointerDirectionChangeThreshold) {\r\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\r\n      positionSinceLastChange.x = x;\r\n    }\r\n\r\n    if (changeY > this._config.pointerDirectionChangeThreshold) {\r\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\r\n      positionSinceLastChange.y = y;\r\n    }\r\n\r\n    return delta;\r\n  }\r\n\r\n  /** Toggles the native drag interactions, based on how many handles are registered. */\r\n  private _toggleNativeDragInteractions() {\r\n    if (!this._rootElement || !this._handles) {\r\n      return;\r\n    }\r\n\r\n    const shouldEnable = this._handles.length > 0 || !this.isDragging();\r\n\r\n    if (shouldEnable !== this._nativeInteractionsEnabled) {\r\n      this._nativeInteractionsEnabled = shouldEnable;\r\n      toggleNativeDragInteractions(this._rootElement, shouldEnable);\r\n    }\r\n  }\r\n\r\n  /** Removes the manually-added event listeners from the root element. */\r\n  private _removeRootElementListeners(element: HTMLElement) {\r\n    element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\r\n    element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\r\n  }\r\n\r\n  /**\r\n   * Applies a `transform` to the root element, taking into account any existing transforms on it.\r\n   * @param x New transform value along the X axis.\r\n   * @param y New transform value along the Y axis.\r\n   */\r\n  private _applyRootElementTransform(x: number, y: number) {\r\n    const transform = getTransform(x, y);\r\n\r\n    // Cache the previous transform amount only after the first drag sequence, because\r\n    // we don't want our own transforms to stack on top of each other.\r\n    if (this._initialTransform == null) {\r\n      this._initialTransform = this._rootElement.style.transform || '';\r\n    }\r\n\r\n    // Preserve the previous `transform` value, if there was one. Note that we apply our own\r\n    // transform before the user's, because things like rotation can affect which direction\r\n    // the element will be translated towards.\r\n    this._rootElement.style.transform = this._initialTransform ?\r\n      transform + ' ' + this._initialTransform  : transform;\r\n  }\r\n\r\n  /**\r\n   * Gets the distance that the user has dragged during the current drag sequence.\r\n   * @param currentPosition Current position of the user's pointer.\r\n   */\r\n  private _getDragDistance(currentPosition: Point): Point {\r\n    const pickupPosition = this._pickupPositionOnPage;\r\n\r\n    if (pickupPosition) {\r\n      return {x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y};\r\n    }\r\n\r\n    return {x: 0, y: 0};\r\n  }\r\n}\r\n\r\n/** Point on the page or within an element. */\r\nexport interface Point {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\n/**\r\n * Gets a 3d `transform` that can be applied to an element.\r\n * @param x Desired position of the element along the X axis.\r\n * @param y Desired position of the element along the Y axis.\r\n */\r\nfunction getTransform(x: number, y: number): string {\r\n  // Round the transforms since some browsers will\r\n  // blur the elements for sub-pixel transforms.\r\n  return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\r\n}\r\n\r\n/** Creates a deep clone of an element. */\r\nfunction deepCloneNode(node: HTMLElement): HTMLElement {\r\n  const clone = node.cloneNode(true) as HTMLElement;\r\n  const descendantsWithId = clone.querySelectorAll('[id]');\r\n  const descendantCanvases = node.querySelectorAll('canvas');\r\n\r\n  // Remove the `id` to avoid having multiple elements with the same id on the page.\r\n  clone.removeAttribute('id');\r\n\r\n  for (let i = 0; i < descendantsWithId.length; i++) {\r\n    descendantsWithId[i].removeAttribute('id');\r\n  }\r\n\r\n  // `cloneNode` won't transfer the content of `canvas` elements so we have to do it ourselves.\r\n  // We match up the cloned canvas to their sources using their index in the DOM.\r\n  if (descendantCanvases.length) {\r\n    const cloneCanvases = clone.querySelectorAll('canvas');\r\n\r\n    for (let i = 0; i < descendantCanvases.length; i++) {\r\n      const correspondingCloneContext = cloneCanvases[i].getContext('2d');\r\n\r\n      if (correspondingCloneContext) {\r\n        correspondingCloneContext.drawImage(descendantCanvases[i], 0, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  return clone;\r\n}\r\n\r\n/** Clamps a value between a minimum and a maximum. */\r\nfunction clamp(value: number, min: number, max: number) {\r\n  return Math.max(min, Math.min(max, value));\r\n}\r\n\r\n/**\r\n * Helper to remove an element from the DOM and to do all the necessary null checks.\r\n * @param element Element to be removed.\r\n */\r\nfunction removeElement(element: HTMLElement | null) {\r\n  if (element && element.parentNode) {\r\n    element.parentNode.removeChild(element);\r\n  }\r\n}\r\n\r\n/** Determines whether an event is a touch event. */\r\nfunction isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\r\n  // This function is called for every pixel that the user has dragged so we need it to be\r\n  // as fast as possible. Since we only bind mouse events and touch events, we can assume\r\n  // that if the event's name starts with `t`, it's a touch event.\r\n  return event.type[0] === 't';\r\n}\r\n\r\n/** Gets the element into which the drag preview should be inserted. */\r\nfunction getPreviewInsertionPoint(documentRef: any): HTMLElement {\r\n  // We can't use the body if the user is in fullscreen mode,\r\n  // because the preview will render under the fullscreen element.\r\n  // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\r\n  return documentRef.fullscreenElement ||\r\n         documentRef.webkitFullscreenElement ||\r\n         documentRef.mozFullScreenElement ||\r\n         documentRef.msFullscreenElement ||\r\n         documentRef.body;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Moves an item one index in an array to another.\r\n * @param array Array in which to move the item.\r\n * @param fromIndex Starting index of the item.\r\n * @param toIndex Index to which the item should be moved.\r\n */\r\nexport function moveItemInArray<T = any>(array: T[], fromIndex: number, toIndex: number): void {\r\n  const from = clamp(fromIndex, array.length - 1);\r\n  const to = clamp(toIndex, array.length - 1);\r\n\r\n  if (from === to) {\r\n    return;\r\n  }\r\n\r\n  const target = array[from];\r\n  const delta = to < from ? -1 : 1;\r\n\r\n  for (let i = from; i !== to; i += delta) {\r\n    array[i] = array[i + delta];\r\n  }\r\n\r\n  array[to] = target;\r\n}\r\n\r\n\r\n/**\r\n * Moves an item from one array to another.\r\n * @param currentArray Array from which to transfer the item.\r\n * @param targetArray Array into which to put the item.\r\n * @param currentIndex Index of the item in its current array.\r\n * @param targetIndex Index at which to insert the item.\r\n */\r\nexport function transferArrayItem<T = any>(currentArray: T[],\r\n                                           targetArray: T[],\r\n                                           currentIndex: number,\r\n                                           targetIndex: number): void {\r\n  const from = clamp(currentIndex, currentArray.length - 1);\r\n  const to = clamp(targetIndex, targetArray.length);\r\n\r\n  if (currentArray.length) {\r\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\r\n  }\r\n}\r\n\r\n/**\r\n * Copies an item from one array to another, leaving it in its\r\n * original position in current array.\r\n * @param currentArray Array from which to copy the item.\r\n * @param targetArray Array into which is copy the item.\r\n * @param currentIndex Index of the item in its current array.\r\n * @param targetIndex Index at which to insert the item.\r\n *\r\n */\r\nexport function copyArrayItem<T = any>(currentArray: T[],\r\n                                       targetArray: T[],\r\n                                       currentIndex: number,\r\n                                       targetIndex: number): void {\r\n  const to = clamp(targetIndex, targetArray.length);\r\n\r\n  if (currentArray.length) {\r\n    targetArray.splice(to, 0, currentArray[currentIndex]);\r\n  }\r\n}\r\n\r\n/** Clamps a number between zero and a maximum. */\r\nfunction clamp(value: number, max: number): number {\r\n  return Math.max(0, Math.min(max, value));\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ElementRef, NgZone} from '@angular/core';\r\nimport {Direction} from '@angular/cdk/bidi';\r\nimport {coerceElement} from '@angular/cdk/coercion';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {Subject, Subscription, interval, animationFrameScheduler} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\nimport {moveItemInArray} from './drag-utils';\r\nimport {DragDropRegistry} from './drag-drop-registry';\r\nimport {DragRefInternal as DragRef, Point} from './drag-ref';\r\n\r\n/** Counter used to generate unique ids for drop refs. */\r\nlet _uniqueIdCounter = 0;\r\n\r\n/**\r\n * Proximity, as a ratio to width/height, at which a\r\n * dragged item will affect the drop container.\r\n */\r\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\r\n\r\n/**\r\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\r\n * viewport. The value comes from trying it out manually until it feels right.\r\n */\r\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\r\n\r\n/**\r\n * Number of pixels to scroll for each frame when auto-scrolling an element.\r\n * The value comes from trying it out manually until it feels right.\r\n */\r\nconst AUTO_SCROLL_STEP = 2;\r\n\r\n/**\r\n * Entry in the position cache for draggable items.\r\n * @docs-private\r\n */\r\ninterface CachedItemPosition {\r\n  /** Instance of the drag item. */\r\n  drag: DragRef;\r\n  /** Dimensions of the item. */\r\n  clientRect: ClientRect;\r\n  /** Amount by which the item has been moved since dragging started. */\r\n  offset: number;\r\n}\r\n\r\n/** Object holding the scroll position of something. */\r\ninterface ScrollPosition {\r\n  top: number;\r\n  left: number;\r\n}\r\n\r\n/** Vertical direction in which we can auto-scroll. */\r\nconst enum AutoScrollVerticalDirection {NONE, UP, DOWN}\r\n\r\n/** Horizontal direction in which we can auto-scroll. */\r\nconst enum AutoScrollHorizontalDirection {NONE, LEFT, RIGHT}\r\n\r\n/**\r\n * Internal compile-time-only representation of a `DropListRef`.\r\n * Used to avoid circular import issues between the `DropListRef` and the `DragRef`.\r\n * @docs-private\r\n */\r\nexport interface DropListRefInternal extends DropListRef {}\r\n\r\n/**\r\n * Reference to a drop list. Used to manipulate or dispose of the container.\r\n * @docs-private\r\n */\r\nexport class DropListRef<T = any> {\r\n  private _document: Document;\r\n\r\n  /** Element that the drop list is attached to. */\r\n  element: HTMLElement | ElementRef<HTMLElement>;\r\n\r\n  /**\r\n   * Unique ID for the drop list.\r\n   * @deprecated No longer being used. To be removed.\r\n   * @breaking-change 8.0.0\r\n   */\r\n  id = `cdk-drop-list-ref-${_uniqueIdCounter++}`;\r\n\r\n  /** Whether starting a dragging sequence from this container is disabled. */\r\n  disabled: boolean = false;\r\n\r\n  /** Whether sorting items within the list is disabled. */\r\n  sortingDisabled: boolean = true;\r\n\r\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\r\n  lockAxis: 'x' | 'y';\r\n\r\n  /**\r\n   * Whether auto-scrolling the view when the user\r\n   * moves their pointer close to the edges is disabled.\r\n   */\r\n  autoScrollDisabled: boolean = false;\r\n\r\n  /**\r\n   * Function that is used to determine whether an item\r\n   * is allowed to be moved into a drop container.\r\n   */\r\n  enterPredicate: (drag: DragRef, drop: DropListRef) => boolean = () => true;\r\n\r\n  /** Emits right before dragging has started. */\r\n  beforeStarted = new Subject<void>();\r\n\r\n  /**\r\n   * Emits when the user has moved a new drag item into this container.\r\n   */\r\n  entered = new Subject<{item: DragRef, container: DropListRef, currentIndex: number}>();\r\n\r\n  /**\r\n   * Emits when the user removes an item from the container\r\n   * by dragging it into another container.\r\n   */\r\n  exited = new Subject<{item: DragRef, container: DropListRef}>();\r\n\r\n  /** Emits when the user drops an item inside the container. */\r\n  dropped = new Subject<{\r\n    item: DragRef,\r\n    currentIndex: number,\r\n    previousIndex: number,\r\n    container: DropListRef,\r\n    previousContainer: DropListRef,\r\n    isPointerOverContainer: boolean,\r\n    distance: Point;\r\n  }>();\r\n\r\n  /** Emits as the user is swapping items while actively dragging. */\r\n  sorted = new Subject<{\r\n    previousIndex: number,\r\n    currentIndex: number,\r\n    container: DropListRef,\r\n    item: DragRef\r\n  }>();\r\n\r\n  /** Arbitrary data that can be attached to the drop list. */\r\n  data: T;\r\n\r\n  /** Whether an item in the list is being dragged. */\r\n  private _isDragging = false;\r\n\r\n  /** Cache of the dimensions of all the items inside the container. */\r\n  private _itemPositions: CachedItemPosition[] = [];\r\n\r\n  /** Keeps track of the container's scroll position. */\r\n  private _scrollPosition: ScrollPosition = {top: 0, left: 0};\r\n\r\n  /** Keeps track of the scroll position of the viewport. */\r\n  private _viewportScrollPosition: ScrollPosition = {top: 0, left: 0};\r\n\r\n  /** Cached `ClientRect` of the drop list. */\r\n  private _clientRect: ClientRect;\r\n\r\n  /**\r\n   * Draggable items that are currently active inside the container. Includes the items\r\n   * from `_draggables`, as well as any items that have been dragged in, but haven't\r\n   * been dropped yet.\r\n   */\r\n  private _activeDraggables: DragRef[];\r\n\r\n  /**\r\n   * Keeps track of the item that was last swapped with the dragged item, as\r\n   * well as what direction the pointer was moving in when the swap occured.\r\n   */\r\n  private _previousSwap = {drag: null as DragRef | null, delta: 0};\r\n\r\n  /** Draggable items in the container. */\r\n  private _draggables: ReadonlyArray<DragRef>;\r\n\r\n  /** Drop lists that are connected to the current one. */\r\n  private _siblings: ReadonlyArray<DropListRef> = [];\r\n\r\n  /** Direction in which the list is oriented. */\r\n  private _orientation: 'horizontal' | 'vertical' = 'vertical';\r\n\r\n  /** Connected siblings that currently have a dragged item. */\r\n  private _activeSiblings = new Set<DropListRef>();\r\n\r\n  /** Layout direction of the drop list. */\r\n  private _direction: Direction = 'ltr';\r\n\r\n  /** Subscription to the window being scrolled. */\r\n  private _viewportScrollSubscription = Subscription.EMPTY;\r\n\r\n  /** Vertical direction in which the list is currently scrolling. */\r\n  private _verticalScrollDirection = AutoScrollVerticalDirection.NONE;\r\n\r\n  /** Horizontal direction in which the list is currently scrolling. */\r\n  private _horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\r\n\r\n  /** Node that is being auto-scrolled. */\r\n  private _scrollNode: HTMLElement | Window;\r\n\r\n  /** Used to signal to the current auto-scroll sequence when to stop. */\r\n  private _stopScrollTimers = new Subject<void>();\r\n\r\n  constructor(\r\n    element: ElementRef<HTMLElement> | HTMLElement,\r\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\r\n    _document: any,\r\n    /**\r\n     * @deprecated _ngZone and _viewportRuler parameters to be made required.\r\n     * @breaking-change 9.0.0\r\n     */\r\n    private _ngZone?: NgZone,\r\n    private _viewportRuler?: ViewportRuler) {\r\n    _dragDropRegistry.registerDropContainer(this);\r\n    this._document = _document;\r\n    this.element = element instanceof ElementRef ? element.nativeElement : element;\r\n  }\r\n\r\n  /** Removes the drop list functionality from the DOM element. */\r\n  dispose() {\r\n    this._stopScrolling();\r\n    this._stopScrollTimers.complete();\r\n    this._removeListeners();\r\n    this.beforeStarted.complete();\r\n    this.entered.complete();\r\n    this.exited.complete();\r\n    this.dropped.complete();\r\n    this.sorted.complete();\r\n    this._activeSiblings.clear();\r\n    this._scrollNode = null!;\r\n    this._dragDropRegistry.removeDropContainer(this);\r\n  }\r\n\r\n  /** Whether an item from this list is currently being dragged. */\r\n  isDragging() {\r\n    return this._isDragging;\r\n  }\r\n\r\n  /** Starts dragging an item. */\r\n  start(): void {\r\n    const element = coerceElement(this.element);\r\n    this.beforeStarted.next();\r\n    this._isDragging = true;\r\n    this._cacheItems();\r\n    this._siblings.forEach(sibling => sibling._startReceiving(this));\r\n    this._removeListeners();\r\n\r\n    // @breaking-change 9.0.0 Remove check for _ngZone once it's marked as a required param.\r\n    if (this._ngZone) {\r\n      this._ngZone.runOutsideAngular(() => element.addEventListener('scroll', this._handleScroll));\r\n    } else {\r\n      element.addEventListener('scroll', this._handleScroll);\r\n    }\r\n\r\n    // @breaking-change 9.0.0 Remove check for _viewportRuler once it's marked as a required param.\r\n    if (this._viewportRuler) {\r\n      this._viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();\r\n      this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe(() => {\r\n        if (this.isDragging()) {\r\n          const newPosition = this._viewportRuler!.getViewportScrollPosition();\r\n          this._updateAfterScroll(this._viewportScrollPosition, newPosition.top, newPosition.left,\r\n                                  this._clientRect);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emits an event to indicate that the user moved an item into the container.\r\n   * @param item Item that was moved into the container.\r\n   * @param pointerX Position of the item along the X axis.\r\n   * @param pointerY Position of the item along the Y axis.\r\n   */\r\n  enter(item: DragRef, pointerX: number, pointerY: number): void {\r\n    this.start();\r\n\r\n    // If sorting is disabled, we want the item to return to its starting\r\n    // position if the user is returning it to its initial container.\r\n    let newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\r\n\r\n    if (newIndex === -1) {\r\n      // We use the coordinates of where the item entered the drop\r\n      // zone to figure out at which index it should be inserted.\r\n      newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\r\n    }\r\n\r\n    const activeDraggables = this._activeDraggables;\r\n    const currentIndex = activeDraggables.indexOf(item);\r\n    const placeholder = item.getPlaceholderElement();\r\n    let newPositionReference: DragRef | undefined = activeDraggables[newIndex];\r\n\r\n    // If the item at the new position is the same as the item that is being dragged,\r\n    // it means that we're trying to restore the item to its initial position. In this\r\n    // case we should use the next item from the list as the reference.\r\n    if (newPositionReference === item) {\r\n      newPositionReference = activeDraggables[newIndex + 1];\r\n    }\r\n\r\n    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\r\n    // into another container and back again), we have to ensure that it isn't duplicated.\r\n    if (currentIndex > -1) {\r\n      activeDraggables.splice(currentIndex, 1);\r\n    }\r\n\r\n    // Don't use items that are being dragged as a reference, because\r\n    // their element has been moved down to the bottom of the body.\r\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\r\n      const element = newPositionReference.getRootElement();\r\n      element.parentElement!.insertBefore(placeholder, element);\r\n      activeDraggables.splice(newIndex, 0, item);\r\n    } else {\r\n      coerceElement(this.element).appendChild(placeholder);\r\n      activeDraggables.push(item);\r\n    }\r\n\r\n    // The transform needs to be cleared so it doesn't throw off the measurements.\r\n    placeholder.style.transform = '';\r\n\r\n    // Note that the positions were already cached when we called `start` above,\r\n    // but we need to refresh them since the amount of items has changed.\r\n    this._cacheItemPositions();\r\n    this.entered.next({item, container: this, currentIndex: this.getItemIndex(item)});\r\n  }\r\n\r\n  /**\r\n   * Removes an item from the container after it was dragged into another container by the user.\r\n   * @param item Item that was dragged out.\r\n   */\r\n  exit(item: DragRef): void {\r\n    this._reset();\r\n    this.exited.next({item, container: this});\r\n  }\r\n\r\n  /**\r\n   * Drops an item into this container.\r\n   * @param item Item being dropped into the container.\r\n   * @param currentIndex Index at which the item should be inserted.\r\n   * @param previousContainer Container from which the item got dragged in.\r\n   * @param isPointerOverContainer Whether the user's pointer was over the\r\n   *    container when the item was dropped.\r\n   * @param distance Distance the user has dragged since the start of the dragging sequence.\r\n   * @breaking-change 9.0.0 `distance` parameter to become required.\r\n   */\r\n  drop(item: DragRef, currentIndex: number, previousContainer: DropListRef,\r\n    isPointerOverContainer: boolean, distance: Point = {x: 0, y: 0}): void {\r\n    this._reset();\r\n    this.dropped.next({\r\n      item,\r\n      currentIndex,\r\n      previousIndex: previousContainer.getItemIndex(item),\r\n      container: this,\r\n      previousContainer,\r\n      isPointerOverContainer,\r\n      distance\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets the draggable items that are a part of this list.\r\n   * @param items Items that are a part of this list.\r\n   */\r\n  withItems(items: DragRef[]): this {\r\n    this._draggables = items;\r\n    items.forEach(item => item._withDropContainer(this));\r\n\r\n    if (this.isDragging()) {\r\n      this._cacheItems();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** Sets the layout direction of the drop list. */\r\n  withDirection(direction: Direction): this {\r\n    this._direction = direction;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the containers that are connected to this one. When two or more containers are\r\n   * connected, the user will be allowed to transfer items between them.\r\n   * @param connectedTo Other containers that the current containers should be connected to.\r\n   */\r\n  connectedTo(connectedTo: DropListRef[]): this {\r\n    this._siblings = connectedTo.slice();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the orientation of the container.\r\n   * @param orientation New orientation for the container.\r\n   */\r\n  withOrientation(orientation: 'vertical' | 'horizontal'): this {\r\n    this._orientation = orientation;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Figures out the index of an item in the container.\r\n   * @param item Item whose index should be determined.\r\n   */\r\n  getItemIndex(item: DragRef): number {\r\n    if (!this._isDragging) {\r\n      return this._draggables.indexOf(item);\r\n    }\r\n\r\n    // Items are sorted always by top/left in the cache, however they flow differently in RTL.\r\n    // The rest of the logic still stands no matter what orientation we're in, however\r\n    // we need to invert the array when determining the index.\r\n    const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\r\n        this._itemPositions.slice().reverse() : this._itemPositions;\r\n\r\n    return findIndex(items, currentItem => currentItem.drag === item);\r\n  }\r\n\r\n  /**\r\n   * Whether the list is able to receive the item that\r\n   * is currently being dragged inside a connected drop list.\r\n   */\r\n  isReceiving(): boolean {\r\n    return this._activeSiblings.size > 0;\r\n  }\r\n\r\n  /**\r\n   * Sorts an item inside the container based on its position.\r\n   * @param item Item to be sorted.\r\n   * @param pointerX Position of the item along the X axis.\r\n   * @param pointerY Position of the item along the Y axis.\r\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\r\n   */\r\n  _sortItem(item: DragRef, pointerX: number, pointerY: number,\r\n            pointerDelta: {x: number, y: number}): void {\r\n    // Don't sort the item if sorting is disabled or it's out of range.\r\n    if (this.sortingDisabled || !this._isPointerNearDropContainer(pointerX, pointerY)) {\r\n      return;\r\n    }\r\n\r\n    const siblings = this._itemPositions;\r\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\r\n\r\n    if (newIndex === -1 && siblings.length > 0) {\r\n      return;\r\n    }\r\n\r\n    const isHorizontal = this._orientation === 'horizontal';\r\n    const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\r\n    const siblingAtNewPosition = siblings[newIndex];\r\n    const currentPosition = siblings[currentIndex].clientRect;\r\n    const newPosition = siblingAtNewPosition.clientRect;\r\n    const delta = currentIndex > newIndex ? 1 : -1;\r\n\r\n    this._previousSwap.drag = siblingAtNewPosition.drag;\r\n    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\r\n\r\n    // How many pixels the item's placeholder should be offset.\r\n    const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\r\n\r\n    // How many pixels all the other items should be offset.\r\n    const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\r\n\r\n    // Save the previous order of the items before moving the item to its new index.\r\n    // We use this to check whether an item has been moved as a result of the sorting.\r\n    const oldOrder = siblings.slice();\r\n\r\n    // Shuffle the array in place.\r\n    moveItemInArray(siblings, currentIndex, newIndex);\r\n\r\n    this.sorted.next({\r\n      previousIndex: currentIndex,\r\n      currentIndex: newIndex,\r\n      container: this,\r\n      item\r\n    });\r\n\r\n    siblings.forEach((sibling, index) => {\r\n      // Don't do anything if the position hasn't changed.\r\n      if (oldOrder[index] === sibling) {\r\n        return;\r\n      }\r\n\r\n      const isDraggedItem = sibling.drag === item;\r\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\r\n      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\r\n                                              sibling.drag.getRootElement();\r\n\r\n      // Update the offset to reflect the new position.\r\n      sibling.offset += offset;\r\n\r\n      // Since we're moving the items with a `transform`, we need to adjust their cached\r\n      // client rects to reflect their new position, as well as swap their positions in the cache.\r\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\r\n      // elements may be mid-animation which will give us a wrong result.\r\n      if (isHorizontal) {\r\n        // Round the transforms since some browsers will\r\n        // blur the elements, for sub-pixel transforms.\r\n        elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\r\n        adjustClientRect(sibling.clientRect, 0, offset);\r\n      } else {\r\n        elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\r\n        adjustClientRect(sibling.clientRect, offset, 0);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Checks whether the user's pointer is close to the edges of either the\r\n   * viewport or the drop list and starts the auto-scroll sequence.\r\n   * @param pointerX User's pointer position along the x axis.\r\n   * @param pointerY User's pointer position along the y axis.\r\n   */\r\n  _startScrollingIfNecessary(pointerX: number, pointerY: number) {\r\n    if (this.autoScrollDisabled) {\r\n      return;\r\n    }\r\n\r\n    let scrollNode: HTMLElement | Window | undefined;\r\n    let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\r\n    let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\r\n\r\n    // @breaking-change 9.0.0 Remove null check for _viewportRuler once it's a required parameter.\r\n    // Check whether we're in range to scroll the viewport.\r\n    if (this._viewportRuler) {\r\n      const {width, height} = this._viewportRuler.getViewportSize();\r\n      const clientRect = {width, height, top: 0, right: width, bottom: height, left: 0};\r\n      verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\r\n      horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\r\n      scrollNode = window;\r\n    }\r\n\r\n    // If we couldn't find a scroll direction based on the\r\n    // window, try with the container, if the pointer is close by.\r\n    if (!verticalScrollDirection && !horizontalScrollDirection &&\r\n        this._isPointerNearDropContainer(pointerX, pointerY)) {\r\n      verticalScrollDirection = getVerticalScrollDirection(this._clientRect, pointerY);\r\n      horizontalScrollDirection = getHorizontalScrollDirection(this._clientRect, pointerX);\r\n      scrollNode = coerceElement(this.element);\r\n    }\r\n\r\n    // TODO(crisbeto): we also need to account for whether the view or element are scrollable in\r\n    // the first place. With the current approach we'll still try to scroll them, but it just\r\n    // won't do anything. The only case where this is relevant is that if we have a scrollable\r\n    // list close to the viewport edge where the viewport isn't scrollable. In this case the\r\n    // we'll be trying to scroll the viewport rather than the list.\r\n\r\n    if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\r\n        horizontalScrollDirection !== this._horizontalScrollDirection ||\r\n        scrollNode !== this._scrollNode)) {\r\n      this._verticalScrollDirection = verticalScrollDirection;\r\n      this._horizontalScrollDirection = horizontalScrollDirection;\r\n      this._scrollNode = scrollNode;\r\n\r\n      if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\r\n        // @breaking-change 9.0.0 Remove null check for `_ngZone` once it is made required.\r\n        if (this._ngZone) {\r\n          this._ngZone.runOutsideAngular(this._startScrollInterval);\r\n        } else {\r\n          this._startScrollInterval();\r\n        }\r\n      } else {\r\n        this._stopScrolling();\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Stops any currently-running auto-scroll sequences. */\r\n  _stopScrolling() {\r\n    this._stopScrollTimers.next();\r\n  }\r\n\r\n  /** Caches the position of the drop list. */\r\n  private _cacheOwnPosition() {\r\n    const element = coerceElement(this.element);\r\n    this._clientRect = getMutableClientRect(element);\r\n    this._scrollPosition = {top: element.scrollTop, left: element.scrollLeft};\r\n  }\r\n\r\n  /** Refreshes the position cache of the items and sibling containers. */\r\n  private _cacheItemPositions() {\r\n    const isHorizontal = this._orientation === 'horizontal';\r\n\r\n    this._itemPositions = this._activeDraggables.map(drag => {\r\n      const elementToMeasure = this._dragDropRegistry.isDragging(drag) ?\r\n          // If the element is being dragged, we have to measure the\r\n          // placeholder, because the element is hidden.\r\n          drag.getPlaceholderElement() :\r\n          drag.getRootElement();\r\n      return {drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure)};\r\n    }).sort((a, b) => {\r\n      return isHorizontal ? a.clientRect.left - b.clientRect.left :\r\n                            a.clientRect.top - b.clientRect.top;\r\n    });\r\n  }\r\n\r\n  /** Resets the container to its initial state. */\r\n  private _reset() {\r\n    this._isDragging = false;\r\n\r\n    // TODO(crisbeto): may have to wait for the animations to finish.\r\n    this._activeDraggables.forEach(item => item.getRootElement().style.transform = '');\r\n    this._siblings.forEach(sibling => sibling._stopReceiving(this));\r\n    this._activeDraggables = [];\r\n    this._itemPositions = [];\r\n    this._previousSwap.drag = null;\r\n    this._previousSwap.delta = 0;\r\n    this._stopScrolling();\r\n    this._removeListeners();\r\n  }\r\n\r\n  /**\r\n   * Gets the offset in pixels by which the items that aren't being dragged should be moved.\r\n   * @param currentIndex Index of the item currently being dragged.\r\n   * @param siblings All of the items in the list.\r\n   * @param delta Direction in which the user is moving.\r\n   */\r\n  private _getSiblingOffsetPx(currentIndex: number,\r\n                              siblings: CachedItemPosition[],\r\n                              delta: 1 | -1) {\r\n\r\n    const isHorizontal = this._orientation === 'horizontal';\r\n    const currentPosition = siblings[currentIndex].clientRect;\r\n    const immediateSibling = siblings[currentIndex + delta * -1];\r\n    let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\r\n\r\n    if (immediateSibling) {\r\n      const start = isHorizontal ? 'left' : 'top';\r\n      const end = isHorizontal ? 'right' : 'bottom';\r\n\r\n      // Get the spacing between the start of the current item and the end of the one immediately\r\n      // after it in the direction in which the user is dragging, or vice versa. We add it to the\r\n      // offset in order to push the element to where it will be when it's inline and is influenced\r\n      // by the `margin` of its siblings.\r\n      if (delta === -1) {\r\n        siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\r\n      } else {\r\n        siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\r\n      }\r\n    }\r\n\r\n    return siblingOffset;\r\n  }\r\n\r\n  /**\r\n   * Checks whether the pointer coordinates are close to the drop container.\r\n   * @param pointerX Coordinates along the X axis.\r\n   * @param pointerY Coordinates along the Y axis.\r\n   */\r\n  private _isPointerNearDropContainer(pointerX: number, pointerY: number): boolean {\r\n    const {top, right, bottom, left, width, height} = this._clientRect;\r\n    const xThreshold = width * DROP_PROXIMITY_THRESHOLD;\r\n    const yThreshold = height * DROP_PROXIMITY_THRESHOLD;\r\n\r\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\r\n           pointerX > left - xThreshold && pointerX < right + xThreshold;\r\n  }\r\n\r\n  /**\r\n   * Gets the offset in pixels by which the item that is being dragged should be moved.\r\n   * @param currentPosition Current position of the item.\r\n   * @param newPosition Position of the item where the current item should be moved.\r\n   * @param delta Direction in which the user is moving.\r\n   */\r\n  private _getItemOffsetPx(currentPosition: ClientRect, newPosition: ClientRect, delta: 1 | -1) {\r\n    const isHorizontal = this._orientation === 'horizontal';\r\n    let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\r\n                                    newPosition.top - currentPosition.top;\r\n\r\n    // Account for differences in the item width/height.\r\n    if (delta === -1) {\r\n      itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\r\n                                   newPosition.height - currentPosition.height;\r\n    }\r\n\r\n    return itemOffset;\r\n  }\r\n\r\n  /**\r\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\r\n   * @param item Item that is being sorted.\r\n   * @param pointerX Position of the user's pointer along the X axis.\r\n   * @param pointerY Position of the user's pointer along the Y axis.\r\n   * @param delta Direction in which the user is moving their pointer.\r\n   */\r\n  private _getItemIndexFromPointerPosition(item: DragRef, pointerX: number, pointerY: number,\r\n                                           delta?: {x: number, y: number}) {\r\n    const isHorizontal = this._orientation === 'horizontal';\r\n\r\n    return findIndex(this._itemPositions, ({drag, clientRect}, _, array) => {\r\n      if (drag === item) {\r\n        // If there's only one item left in the container, it must be\r\n        // the dragged item itself so we use it as a reference.\r\n        return array.length < 2;\r\n      }\r\n\r\n      if (delta) {\r\n        const direction = isHorizontal ? delta.x : delta.y;\r\n\r\n        // If the user is still hovering over the same item as last time, and they didn't change\r\n        // the direction in which they're dragging, we don't consider it a direction swap.\r\n        if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return isHorizontal ?\r\n          // Round these down since most browsers report client rects with\r\n          // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\r\n          pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\r\n          pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\r\n    });\r\n  }\r\n\r\n  /** Caches the current items in the list and their positions. */\r\n  private _cacheItems(): void {\r\n    this._activeDraggables = this._draggables.slice();\r\n    this._cacheItemPositions();\r\n    this._cacheOwnPosition();\r\n  }\r\n\r\n  /**\r\n   * Updates the internal state of the container after a scroll event has happened.\r\n   * @param scrollPosition Object that is keeping track of the scroll position.\r\n   * @param newTop New top scroll position.\r\n   * @param newLeft New left scroll position.\r\n   * @param extraClientRect Extra `ClientRect` object that should be updated, in addition to the\r\n   *  ones of the drag items. Useful when the viewport has been scrolled and we also need to update\r\n   *  the `ClientRect` of the list.\r\n   */\r\n  private _updateAfterScroll(scrollPosition: ScrollPosition, newTop: number, newLeft: number,\r\n    extraClientRect?: ClientRect) {\r\n    const topDifference = scrollPosition.top - newTop;\r\n    const leftDifference = scrollPosition.left - newLeft;\r\n\r\n    if (extraClientRect) {\r\n      adjustClientRect(extraClientRect, topDifference, leftDifference);\r\n    }\r\n\r\n    // Since we know the amount that the user has scrolled we can shift all of the client rectangles\r\n    // ourselves. This is cheaper than re-measuring everything and we can avoid inconsistent\r\n    // behavior where we might be measuring the element before its position has changed.\r\n    this._itemPositions.forEach(({clientRect}) => {\r\n      adjustClientRect(clientRect, topDifference, leftDifference);\r\n    });\r\n\r\n    // We need two loops for this, because we want all of the cached\r\n    // positions to be up-to-date before we re-sort the item.\r\n    this._itemPositions.forEach(({drag}) => {\r\n      if (this._dragDropRegistry.isDragging(drag)) {\r\n        // We need to re-sort the item manually, because the pointer move\r\n        // events won't be dispatched while the user is scrolling.\r\n        drag._sortFromLastPointerPosition();\r\n      }\r\n    });\r\n\r\n    scrollPosition.top = newTop;\r\n    scrollPosition.left = newLeft;\r\n  }\r\n\r\n  /** Handles the container being scrolled. Has to be an arrow function to preserve the context. */\r\n  private _handleScroll = () => {\r\n    if (!this.isDragging()) {\r\n      return;\r\n    }\r\n\r\n    const element = coerceElement(this.element);\r\n    this._updateAfterScroll(this._scrollPosition, element.scrollTop, element.scrollLeft);\r\n  }\r\n\r\n  /** Removes the event listeners associated with this drop list. */\r\n  private _removeListeners() {\r\n    coerceElement(this.element).removeEventListener('scroll', this._handleScroll);\r\n    this._viewportScrollSubscription.unsubscribe();\r\n  }\r\n\r\n  /** Starts the interval that'll auto-scroll the element. */\r\n  private _startScrollInterval = () => {\r\n    this._stopScrolling();\r\n\r\n    interval(0, animationFrameScheduler)\r\n      .pipe(takeUntil(this._stopScrollTimers))\r\n      .subscribe(() => {\r\n        const node = this._scrollNode;\r\n\r\n        if (this._verticalScrollDirection === AutoScrollVerticalDirection.UP) {\r\n          incrementVerticalScroll(node, -AUTO_SCROLL_STEP);\r\n        } else if (this._verticalScrollDirection === AutoScrollVerticalDirection.DOWN) {\r\n          incrementVerticalScroll(node, AUTO_SCROLL_STEP);\r\n        }\r\n\r\n        if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.LEFT) {\r\n          incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);\r\n        } else if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.RIGHT) {\r\n          incrementHorizontalScroll(node, AUTO_SCROLL_STEP);\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Checks whether the user's pointer is positioned over the container.\r\n   * @param x Pointer position along the X axis.\r\n   * @param y Pointer position along the Y axis.\r\n   */\r\n  _isOverContainer(x: number, y: number): boolean {\r\n    return isInsideClientRect(this._clientRect, x, y);\r\n  }\r\n\r\n  /**\r\n   * Figures out whether an item should be moved into a sibling\r\n   * drop container, based on its current position.\r\n   * @param item Drag item that is being moved.\r\n   * @param x Position of the item along the X axis.\r\n   * @param y Position of the item along the Y axis.\r\n   */\r\n  _getSiblingContainerFromPosition(item: DragRef, x: number, y: number): DropListRef | undefined {\r\n    return this._siblings.find(sibling => sibling._canReceive(item, x, y));\r\n  }\r\n\r\n  /**\r\n   * Checks whether the drop list can receive the passed-in item.\r\n   * @param item Item that is being dragged into the list.\r\n   * @param x Position of the item along the X axis.\r\n   * @param y Position of the item along the Y axis.\r\n   */\r\n  _canReceive(item: DragRef, x: number, y: number): boolean {\r\n    if (!this.enterPredicate(item, this) || !isInsideClientRect(this._clientRect, x, y)) {\r\n      return false;\r\n    }\r\n\r\n    const elementFromPoint = this._document.elementFromPoint(x, y) as HTMLElement | null;\r\n\r\n    // If there's no element at the pointer position, then\r\n    // the client rect is probably scrolled out of the view.\r\n    if (!elementFromPoint) {\r\n      return false;\r\n    }\r\n\r\n    const nativeElement = coerceElement(this.element);\r\n\r\n    // The `ClientRect`, that we're using to find the container over which the user is\r\n    // hovering, doesn't give us any information on whether the element has been scrolled\r\n    // out of the view or whether it's overlapping with other containers. This means that\r\n    // we could end up transferring the item into a container that's invisible or is positioned\r\n    // below another one. We use the result from `elementFromPoint` to get the top-most element\r\n    // at the pointer position and to find whether it's one of the intersecting drop containers.\r\n    return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\r\n  }\r\n\r\n  /**\r\n   * Called by one of the connected drop lists when a dragging sequence has started.\r\n   * @param sibling Sibling in which dragging has started.\r\n   */\r\n  _startReceiving(sibling: DropListRef) {\r\n    const activeSiblings = this._activeSiblings;\r\n\r\n    if (!activeSiblings.has(sibling)) {\r\n      activeSiblings.add(sibling);\r\n      this._cacheOwnPosition();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called by a connected drop list when dragging has stopped.\r\n   * @param sibling Sibling whose dragging has stopped.\r\n   */\r\n  _stopReceiving(sibling: DropListRef) {\r\n    this._activeSiblings.delete(sibling);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\r\n * @param clientRect `ClientRect` that should be updated.\r\n * @param top Amount to add to the `top` position.\r\n * @param left Amount to add to the `left` position.\r\n */\r\nfunction adjustClientRect(clientRect: ClientRect, top: number, left: number) {\r\n  clientRect.top += top;\r\n  clientRect.bottom = clientRect.top + clientRect.height;\r\n\r\n  clientRect.left += left;\r\n  clientRect.right = clientRect.left + clientRect.width;\r\n}\r\n\r\n\r\n/**\r\n * Finds the index of an item that matches a predicate function. Used as an equivalent\r\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\r\n * @param array Array in which to look for matches.\r\n * @param predicate Function used to determine whether an item is a match.\r\n */\r\nfunction findIndex<T>(array: T[],\r\n                      predicate: (value: T, index: number, obj: T[]) => boolean): number {\r\n\r\n  for (let i = 0; i < array.length; i++) {\r\n    if (predicate(array[i], i, array)) {\r\n      return i;\r\n    }\r\n  }\r\n\r\n  return -1;\r\n}\r\n\r\n\r\n/**\r\n * Checks whether some coordinates are within a `ClientRect`.\r\n * @param clientRect ClientRect that is being checked.\r\n * @param x Coordinates along the X axis.\r\n * @param y Coordinates along the Y axis.\r\n */\r\nfunction isInsideClientRect(clientRect: ClientRect, x: number, y: number) {\r\n  const {top, bottom, left, right} = clientRect;\r\n  return y >= top && y <= bottom && x >= left && x <= right;\r\n}\r\n\r\n\r\n/** Gets a mutable version of an element's bounding `ClientRect`. */\r\nfunction getMutableClientRect(element: Element): ClientRect {\r\n  const clientRect = element.getBoundingClientRect();\r\n\r\n  // We need to clone the `clientRect` here, because all the values on it are readonly\r\n  // and we need to be able to update them. Also we can't use a spread here, because\r\n  // the values on a `ClientRect` aren't own properties. See:\r\n  // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\r\n  return {\r\n    top: clientRect.top,\r\n    right: clientRect.right,\r\n    bottom: clientRect.bottom,\r\n    left: clientRect.left,\r\n    width: clientRect.width,\r\n    height: clientRect.height\r\n  };\r\n}\r\n\r\n/**\r\n * Increments the vertical scroll position of a node.\r\n * @param node Node whose scroll position should change.\r\n * @param amount Amount of pixels that the `node` should be scrolled.\r\n */\r\nfunction incrementVerticalScroll(node: HTMLElement | Window, amount: number) {\r\n  if (node === window) {\r\n    (node as Window).scrollBy(0, amount);\r\n  } else {\r\n    // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\r\n    (node as HTMLElement).scrollTop += amount;\r\n  }\r\n}\r\n\r\n/**\r\n * Increments the horizontal scroll position of a node.\r\n * @param node Node whose scroll position should change.\r\n * @param amount Amount of pixels that the `node` should be scrolled.\r\n */\r\nfunction incrementHorizontalScroll(node: HTMLElement | Window, amount: number) {\r\n  if (node === window) {\r\n    (node as Window).scrollBy(amount, 0);\r\n  } else {\r\n    // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\r\n    (node as HTMLElement).scrollLeft += amount;\r\n  }\r\n}\r\n\r\n/**\r\n * Gets whether the vertical auto-scroll direction of a node.\r\n * @param clientRect Dimensions of the node.\r\n * @param pointerY Position of the user's pointer along the y axis.\r\n */\r\nfunction getVerticalScrollDirection(clientRect: ClientRect, pointerY: number) {\r\n  const {top, bottom, height} = clientRect;\r\n  const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\r\n\r\n  if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\r\n    return AutoScrollVerticalDirection.UP;\r\n  } else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\r\n    return AutoScrollVerticalDirection.DOWN;\r\n  }\r\n\r\n  return AutoScrollVerticalDirection.NONE;\r\n}\r\n\r\n/**\r\n * Gets whether the horizontal auto-scroll direction of a node.\r\n * @param clientRect Dimensions of the node.\r\n * @param pointerX Position of the user's pointer along the x axis.\r\n */\r\nfunction getHorizontalScrollDirection(clientRect: ClientRect, pointerX: number) {\r\n  const {left, right, width} = clientRect;\r\n  const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\r\n\r\n  if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\r\n    return AutoScrollHorizontalDirection.LEFT;\r\n  } else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\r\n    return AutoScrollHorizontalDirection.RIGHT;\r\n  }\r\n\r\n  return AutoScrollHorizontalDirection.NONE;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, NgZone, OnDestroy, Inject} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\r\nimport {Subject} from 'rxjs';\r\n\r\n/** Event options that can be used to bind an active, capturing event. */\r\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\r\n  passive: false,\r\n  capture: true\r\n});\r\n\r\n/**\r\n * Service that keeps track of all the drag item and drop container\r\n * instances, and manages global event listeners on the `document`.\r\n * @docs-private\r\n */\r\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\r\n// to avoid circular imports. If we were to reference them here, importing the registry into the\r\n// classes that are registering themselves will introduce a circular import.\r\n@Injectable({providedIn: 'root'})\r\nexport class DragDropRegistry<I, C extends {id: string}> implements OnDestroy {\r\n  private _document: Document;\r\n\r\n  /** Registered drop container instances. */\r\n  private _dropInstances = new Set<C>();\r\n\r\n  /** Registered drag item instances. */\r\n  private _dragInstances = new Set<I>();\r\n\r\n  /** Drag item instances for which a drag sequence has been initialized. */\r\n  private _initializedDragSequences = new Set<I>();\r\n\r\n  /** Drag item instances that are currently being dragged. */\r\n  private _startedDragSequences = new Set<I>();\r\n\r\n  /** Keeps track of the event listeners that we've bound to the `document`. */\r\n  private _globalListeners = new Map<string, {\r\n    handler: (event: Event) => void,\r\n    options?: AddEventListenerOptions | boolean\r\n  }>();\r\n\r\n  /**\r\n   * Emits the `touchmove` or `mousemove` events that are dispatched\r\n   * while the user is dragging a drag item instance.\r\n   */\r\n  readonly pointerMove: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\r\n\r\n  /**\r\n   * Emits the `touchend` or `mouseup` events that are dispatched\r\n   * while the user is dragging a drag item instance.\r\n   */\r\n  readonly pointerUp: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\r\n\r\n  /** Emits when the viewport has been scrolled while the user is dragging an item. */\r\n  readonly scroll: Subject<Event> = new Subject<Event>();\r\n\r\n  constructor(\r\n    private _ngZone: NgZone,\r\n    @Inject(DOCUMENT) _document: any) {\r\n    this._document = _document;\r\n  }\r\n\r\n  /** Adds a drop container to the registry. */\r\n  registerDropContainer(drop: C) {\r\n    if (!this._dropInstances.has(drop)) {\r\n      if (this.getDropContainer(drop.id)) {\r\n        throw Error(`Drop instance with id \"${drop.id}\" has already been registered.`);\r\n      }\r\n\r\n      this._dropInstances.add(drop);\r\n    }\r\n  }\r\n\r\n  /** Adds a drag item instance to the registry. */\r\n  registerDragItem(drag: I) {\r\n    this._dragInstances.add(drag);\r\n\r\n    // The `touchmove` event gets bound once, ahead of time, because WebKit\r\n    // won't preventDefault on a dynamically-added `touchmove` listener.\r\n    // See https://bugs.webkit.org/show_bug.cgi?id=184250.\r\n    if (this._dragInstances.size === 1) {\r\n      this._ngZone.runOutsideAngular(() => {\r\n        // The event handler has to be explicitly active,\r\n        // because newer browsers make it passive by default.\r\n        this._document.addEventListener('touchmove', this._preventDefaultWhileDragging,\r\n            activeCapturingEventOptions);\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Removes a drop container from the registry. */\r\n  removeDropContainer(drop: C) {\r\n    this._dropInstances.delete(drop);\r\n  }\r\n\r\n  /** Removes a drag item instance from the registry. */\r\n  removeDragItem(drag: I) {\r\n    this._dragInstances.delete(drag);\r\n    this.stopDragging(drag);\r\n\r\n    if (this._dragInstances.size === 0) {\r\n      this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging,\r\n          activeCapturingEventOptions);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts the dragging sequence for a drag instance.\r\n   * @param drag Drag instance which is being dragged.\r\n   * @param event Event that initiated the dragging.\r\n   */\r\n  initializeDragging(drag: I, event: TouchEvent | MouseEvent) {\r\n    // Do not process the same drag twice to avoid memory leaks and redundant listeners\r\n    if (this._initializedDragSequences.has(drag)) {\r\n      return;\r\n    }\r\n\r\n    this._initializedDragSequences.add(drag);\r\n\r\n    if (this._initializedDragSequences.size === 1) {\r\n      const isTouchEvent = event.type.startsWith('touch');\r\n      const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\r\n      const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\r\n\r\n      // We explicitly bind __active__ listeners here, because newer browsers will default to\r\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\r\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\r\n      this._globalListeners\r\n        .set(moveEvent, {\r\n          handler: (e: Event) => this.pointerMove.next(e as TouchEvent | MouseEvent),\r\n          options: activeCapturingEventOptions\r\n        })\r\n        .set(upEvent, {\r\n          handler: (e: Event) => this.pointerUp.next(e as TouchEvent | MouseEvent),\r\n          options: true\r\n        })\r\n        .set('scroll', {\r\n          handler: (e: Event) => this.scroll.next(e)\r\n        })\r\n        // Preventing the default action on `mousemove` isn't enough to disable text selection\r\n        // on Safari so we need to prevent the selection event as well. Alternatively this can\r\n        // be done by setting `user-select: none` on the `body`, however it has causes a style\r\n        // recalculation which can be expensive on pages with a lot of elements.\r\n        .set('selectstart', {\r\n          handler: this._preventDefaultWhileDragging,\r\n          options: activeCapturingEventOptions\r\n        });\r\n\r\n      this._ngZone.runOutsideAngular(() => {\r\n        this._globalListeners.forEach((config, name) => {\r\n          this._document.addEventListener(name, config.handler, config.options);\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  startDragging(drag: I) {\r\n    if (this._startedDragSequences.has(drag)) {\r\n      return;\r\n    }\r\n\r\n    this._startedDragSequences.add(drag);\r\n  }\r\n\r\n  /** Stops dragging a drag item instance. */\r\n  stopDragging(drag: I) {\r\n\r\n    this._startedDragSequences.delete(drag);\r\n    this._initializedDragSequences.delete(drag);\r\n\r\n    if (this._initializedDragSequences.size === 0) {\r\n      this._clearGlobalListeners();\r\n    }\r\n  }\r\n\r\n  /** Gets whether a drag item instance is currently being dragged. */\r\n  isDragging(drag: I) {\r\n    return this._initializedDragSequences.has(drag);\r\n  }\r\n\r\n  /**\r\n   * Gets a drop container by its id.\r\n   * @deprecated No longer being used. To be removed.\r\n   * @breaking-change 8.0.0\r\n   */\r\n  getDropContainer(id: string): C | undefined {\r\n    return Array.from(this._dropInstances).find(instance => instance.id === id);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\r\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\r\n    this._clearGlobalListeners();\r\n    this.pointerMove.complete();\r\n    this.pointerUp.complete();\r\n  }\r\n\r\n  /**\r\n   * Event listener that will prevent the default browser action while the user is dragging.\r\n   * @param event Event whose default action should be prevented.\r\n   */\r\n  private _preventDefaultWhileDragging = (event: Event) => {\r\n    if (this._startedDragSequences.size) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  /** Clears out the global event listeners from the `document`. */\r\n  private _clearGlobalListeners() {\r\n    this._globalListeners.forEach((config, name) => {\r\n      this._document.removeEventListener(name, config.handler, config.options);\r\n    });\r\n\r\n    this._globalListeners.clear();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, Inject, NgZone, ElementRef} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {DragRef, DragRefConfig} from './drag-ref';\r\nimport {DropListRef} from './drop-list-ref';\r\nimport {DragDropRegistry} from './drag-drop-registry';\r\n\r\n/** Default configuration to be used when creating a `DragRef`. */\r\nconst DEFAULT_CONFIG = {\r\n  dragStartThreshold: 5,\r\n  pointerDirectionChangeThreshold: 5\r\n};\r\n\r\n/**\r\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class DragDrop {\r\n  constructor(\r\n    @Inject(DOCUMENT) private _document: any,\r\n    private _ngZone: NgZone,\r\n    private _viewportRuler: ViewportRuler,\r\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {}\r\n\r\n  /**\r\n   * Turns an element into a draggable item.\r\n   * @param element Element to which to attach the dragging functionality.\r\n   * @param config Object used to configure the dragging behavior.\r\n   */\r\n  createDrag<T = any>(element: ElementRef<HTMLElement> | HTMLElement,\r\n                config: DragRefConfig = DEFAULT_CONFIG): DragRef<T> {\r\n\r\n    return new DragRef<T>(element, config, this._document, this._ngZone, this._viewportRuler,\r\n        this._dragDropRegistry);\r\n  }\r\n\r\n  /**\r\n   * Turns an element into a drop list.\r\n   * @param element Element to which to attach the drop list functionality.\r\n   */\r\n  createDropList<T = any>(element: ElementRef<HTMLElement> | HTMLElement): DropListRef<T> {\r\n    return new DropListRef<T>(element, this._dragDropRegistry, this._document, this._ngZone,\r\n        this._viewportRuler);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken, QueryList, ElementRef} from '@angular/core';\r\nimport {CdkDrag} from './directives/drag';\r\n\r\n\r\n/**\r\n * @deprecated To be removed. No longer being used. Previously the interface was used to avoid\r\n * circular imports between `CdkDrag` and `CdkDropList`, however now we're using the\r\n * `CdkDropListInternal` interface to achieve the same result, without having to maintain\r\n * this large of an interface.\r\n * @breaking-change 8.0.0\r\n */\r\nexport interface CdkDropListContainer<T = any> {\r\n  /** DOM node that corresponds to the drop container. */\r\n  element: ElementRef<HTMLElement>;\r\n\r\n  /** Arbitrary data to attach to all events emitted by this container. */\r\n  data: T;\r\n\r\n  /** Unique ID for the drop zone. */\r\n  id: string;\r\n\r\n  /** Direction in which the list is oriented. */\r\n  orientation: 'horizontal' | 'vertical';\r\n\r\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\r\n  lockAxis: 'x' | 'y';\r\n\r\n  /** Whether starting a dragging sequence from this container is disabled. */\r\n  disabled: boolean;\r\n\r\n  /** Starts dragging an item. */\r\n  start(): void;\r\n\r\n  /**\r\n   * Drops an item into this container.\r\n   * @param item Item being dropped into the container.\r\n   * @param currentIndex Index at which the item should be inserted.\r\n   * @param previousContainer Container from which the item got dragged in.\r\n   * @param isPointerOverContainer Whether the user's pointer was over the\r\n   *    container when the item was dropped.\r\n   */\r\n  drop(item: CdkDrag, currentIndex: number, previousContainer: Partial<CdkDropListContainer>,\r\n        isPointerOverContainer: boolean): void;\r\n\r\n  /**\r\n   * Emits an event to indicate that the user moved an item into the container.\r\n   * @param item Item that was moved into the container.\r\n   * @param pointerX Position of the item along the X axis.\r\n   * @param pointerY Position of the item along the Y axis.\r\n   */\r\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void;\r\n\r\n  /**\r\n   * Removes an item from the container after it was dragged into another container by the user.\r\n   * @param item Item that was dragged out.\r\n   */\r\n  exit(item: CdkDrag): void;\r\n\r\n  /**\r\n   * Figures out the index of an item in the container.\r\n   * @param item Item whose index should be determined.\r\n   */\r\n  getItemIndex(item: CdkDrag): number;\r\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number, delta: {x: number, y: number}): void;\r\n  _draggables: QueryList<CdkDrag>;\r\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\r\n      CdkDropListContainer | null;\r\n  _isOverContainer(x: number, y: number): boolean;\r\n}\r\n\r\n/**\r\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\r\n * Used for avoiding circular imports.\r\n */\r\nexport const CDK_DROP_LIST = new InjectionToken<CdkDropListContainer>('CDK_DROP_LIST');\r\n\r\n/**\r\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\r\n * Used for avoiding circular imports.\r\n * @deprecated Use `CDK_DROP_LIST` instead.\r\n * @breaking-change 8.0.0\r\n */\r\nexport const CDK_DROP_LIST_CONTAINER = CDK_DROP_LIST;\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken} from '@angular/core';\r\n\r\n/**\r\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\r\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\r\n * to avoid circular imports.\r\n * @docs-private\r\n */\r\nexport const CDK_DRAG_PARENT = new InjectionToken<{}>('CDK_DRAG_PARENT');\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, ElementRef, Inject, Optional, Input, OnDestroy} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Subject} from 'rxjs';\r\nimport {CDK_DRAG_PARENT} from '../drag-parent';\r\nimport {toggleNativeDragInteractions} from '../drag-styling';\r\n\r\n/** Handle that can be used to drag and CdkDrag instance. */\r\n@Directive({\r\n  selector: '[cdkDragHandle]',\r\n  host: {\r\n    'class': 'cdk-drag-handle'\r\n  }\r\n})\r\nexport class CdkDragHandle implements OnDestroy {\r\n  /** Closest parent draggable instance. */\r\n  _parentDrag: {} | undefined;\r\n\r\n  /** Emits when the state of the handle has changed. */\r\n  _stateChanges = new Subject<CdkDragHandle>();\r\n\r\n  /** Whether starting to drag through this handle is disabled. */\r\n  @Input('cdkDragHandleDisabled')\r\n  get disabled(): boolean { return this._disabled; }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n    this._stateChanges.next(this);\r\n  }\r\n  private _disabled = false;\r\n\r\n  constructor(\r\n    public element: ElementRef<HTMLElement>,\r\n    @Inject(CDK_DRAG_PARENT) @Optional() parentDrag?: any) {\r\n\r\n    this._parentDrag = parentDrag;\r\n    toggleNativeDragInteractions(element.nativeElement, false);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._stateChanges.complete();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, TemplateRef, Input} from '@angular/core';\r\n\r\n/**\r\n * Element that will be used as a template for the placeholder of a CdkDrag when\r\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\r\n */\r\n@Directive({\r\n  selector: 'ng-template[cdkDragPlaceholder]'\r\n})\r\nexport class CdkDragPlaceholder<T = any> {\r\n  /** Context data to be added to the placeholder template instance. */\r\n  @Input() data: T;\r\n  constructor(public templateRef: TemplateRef<T>) {}\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, TemplateRef, Input} from '@angular/core';\r\n\r\n/**\r\n * Element that will be used as a template for the preview\r\n * of a CdkDrag when it is being dragged.\r\n */\r\n@Directive({\r\n  selector: 'ng-template[cdkDragPreview]'\r\n})\r\nexport class CdkDragPreview<T = any> {\r\n  /** Context data to be added to the preview template instance. */\r\n  @Input() data: T;\r\n  constructor(public templateRef: TemplateRef<T>) {}\r\n}\r\n"],"names":["this","moved","Observable","observer","subscription","_this","_dragRef","pipe","map","movedEvent","source","pointerPosition","event","delta","distance","subscribe","unsubscribe","dragDrop","createDrag","element","config","data","_syncInputs","_handleEvents","Object","defineProperty","CdkDrag","prototype","boundaryElement","selector","_disabled","dropContainer","disabled","value","coerceBooleanProperty","getPlaceholderElement","getRootElement","reset","getFreeDragPosition","ngAfterViewInit","_ngZone","onStable","asObservable","take","takeUntil","_destroyed","_updateRootElement","_handles","changes","startWith","tap","handles","childHandleElements","filter","handle","_parentDrag","withHandles","switchMap","merge","apply","item","_stateChanges","handleInstance","dragRef","nativeElement","disableHandle","enableHandle","freeDragPosition","setFreeDragPosition","ngOnChanges","rootSelectorChange","positionChange","firstChange","ngOnDestroy","next","complete","dispose","rootElement","rootElementSelector","getClosestMatchingAncestor","nodeType","_document","ELEMENT_NODE","Error","nodeName","withRootElement","_getBoundaryElement","boundary","coerceElement","isDevMode","contains","ref","beforeStarted","isDragging","dir","_dir","placeholder","_placeholderTemplate","template","templateRef","context","viewContainer","_viewContainerRef","preview","_previewTemplate","lockAxis","dragStartDelay","coerceNumberProperty","constrainPosition","withBoundaryElement","withPlaceholderTemplate","withPreviewTemplate","withDirection","started","emit","_changeDetectorRef","markForCheck","released","ended","entered","container","currentIndex","exited","dropped","previousIndex","previousContainer","isPointerOverContainer","type","Directive","args","exportAs","host","class","[class.cdk-drag-disabled]","[class.cdk-drag-dragging]","providers","provide","CDK_DRAG_PARENT","useExisting","ElementRef","undefined","decorators","Inject","CDK_DROP_LIST","Optional","SkipSelf","DOCUMENT","NgZone","ViewContainerRef","CDK_DRAG_CONFIG","Directionality","DragDrop","ChangeDetectorRef","ContentChildren","CdkDragHandle","descendants","ContentChild","CdkDragPreview","static","CdkDragPlaceholder","Input","Output","CdkDropListGroup","_items","Set","clear","_uniqueIdCounter","CdkDropList","_group","Subject","connectedTo","orientation","id","_sortingDisabled","enterPredicate","autoScrollDisabled","EventEmitter","sorted","_dropListRef","createDropList","drag","drop","_dropLists","push","add","ngAfterContentInit","_draggables","items","withItems","index","indexOf","splice","delete","start","enter","pointerX","pointerY","exit","getItemIndex","_sortItem","pointerDelta","_getSiblingContainerFromPosition","x","y","result","_isOverContainer","change","siblings","coerceArray","find","list","forEach","sortingDisabled","withOrientation","useValue","CDK_DROP_LIST_CONTAINER","[id]","[class.cdk-drop-list-disabled]","[class.cdk-drop-list-dragging]","[class.cdk-drop-list-receiving]","forwardRef","DragDropModule","NgModule","declarations","exports","extendStyles","dest","key","hasOwnProperty","toggleNativeDragInteractions","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","multiplier","toLowerCase","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","prop","propertyIndex","rawDurations","rawDelays","name","getPropertyValue","split","part","trim","getTransform","Math","round","deepCloneNode","node","clone","cloneNode","descendantsWithId","querySelectorAll","descendantCanvases","removeAttribute","i","length","cloneCanvases","correspondingCloneContext","getContext","drawImage","clamp","min","max","removeElement","parentNode","removeChild","isTouchEvent","getPreviewInsertionPoint","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","body","moveItemInArray","array","fromIndex","toIndex","from","to","target","transferArrayItem","currentArray","targetArray","targetIndex","copyArrayItem","adjustClientRect","clientRect","top","left","bottom","height","right","width","findIndex","predicate","isInsideClientRect","getMutableClientRect","getBoundingClientRect","incrementVerticalScroll","amount","window","scrollBy","scrollTop","incrementHorizontalScroll","scrollLeft","getVerticalScrollDirection","yThreshold","SCROLL_PROXIMITY_THRESHOLD","getHorizontalScrollDirection","xThreshold","CDK_DRAG_CONFIG_FACTORY","dragStartThreshold","pointerDirectionChangeThreshold","currentElement","matches","msMatchesSelector","parentElement","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","DragRef","_config","_viewportRuler","_dragDropRegistry","_passiveTransform","_activeTransform","_moveEvents","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_boundaryElement","_nativeInteractionsEnabled","_disabledHandles","_direction","_pointerDown","targetHandle","has","_initializeDragSequence","_rootElement","_pointerMove","_hasStartedDragging","_previewRect","_preview","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","preventDefault","_updatePointerDirectionDelta","_dropContainer","_updateActiveDropContainer","activeTransform","_pickupPositionOnPage","_applyRootElementTransform","SVGElement","appliedTransform","setAttribute","observers","run","_getDragDistance","_pointerDirectionDelta","_getPointerPositionOnPage","abs","Date","now","_dragStartTime","_endDragSequence","_startDragSequence","_pointerUp","registerDragItem","newValue","_toggleNativeDragInteractions","_placeholder","_removeRootElementListeners","addEventListener","_initialTransform","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","_nextSibling","transform","direction","_withDropContainer","position","_sortFromLastPointerPosition","_pointerPositionAtLastDirectionChange","_previewRef","destroy","_placeholderRef","stopDragging","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","startDragging","_lastTouchEventTime","nextSibling","_createPreviewElement","_createPlaceholderElement","display","appendChild","replaceChild","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","_initialContainer","pointerMove","pointerUp","scroll","_scrollPosition","getViewportScrollPosition","_boundaryRect","_pickupPositionInElement","_getPointerPositionInElement","initializeDragging","insertBefore","_a","newContainer","_startScrollingIfNecessary","previewConfig","previewTemplate","viewRef","createEmbeddedView","rootNodes","elementRect","pointerEvents","zIndex","classList","Promise","resolve","placeholderRect","duration","runOutsideAngular","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","handleElement","referenceRect","point","targetTouches","pageX","pageY","touches","changedTouches","constrainedPoint","dropContainerLock","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","minX","maxX","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","shouldEnable","currentPosition","pickupPosition","AUTO_SCROLL_STEP","DropListRef","_isDragging","_itemPositions","_viewportScrollPosition","_previousSwap","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_handleScroll","_updateAfterScroll","_startScrollInterval","interval","animationFrameScheduler","_scrollNode","registerDropContainer","_removeListeners","removeDropContainer","_cacheItems","sibling","_startReceiving","newPosition","_clientRect","newIndex","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","_cacheItemPositions","_reset","slice","reverse","currentItem","isReceiving","size","_isPointerNearDropContainer","isHorizontal","siblingAtNewPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","isDraggedItem","offset","elementToOffset","scrollNode","verticalScrollDirection","horizontalScrollDirection","getViewportSize","_cacheOwnPosition","sort","a","b","_stopReceiving","immediateSibling","end","_","floor","scrollPosition","newTop","newLeft","extraClientRect","topDifference","leftDifference","_canReceive","elementFromPoint","activeSiblings","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_initializedDragSequences","_startedDragSequences","_globalListeners","Map","_preventDefaultWhileDragging","getDropContainer","startsWith","moveEvent","upEvent","set","e","options","_clearGlobalListeners","Array","instance","Injectable","providedIn","DEFAULT_CONFIG","ViewportRuler","InjectionToken","parentDrag","TemplateRef","factory"],"mappings":"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"}