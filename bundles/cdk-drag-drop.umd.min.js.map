{"version":3,"file":"cdk-drag-drop.umd.min.js","sources":["../../src/cdk/drag-drop/directives/drag.ts","../../src/cdk/drag-drop/directives/drop-list-group.ts","../../src/cdk/drag-drop/directives/drop-list.ts","../../src/cdk/drag-drop/drag-drop-module.ts","../../src/cdk/drag-drop/drag-styling.ts","../../src/cdk/drag-drop/transition-duration.ts","../../src/cdk/drag-drop/drag-ref.ts","../../src/cdk/drag-drop/drag-utils.ts","../../src/cdk/drag-drop/drop-list-ref.ts","../../src/cdk/drag-drop/drag-drop-registry.ts","../../src/cdk/drag-drop/drag-drop.ts","../../src/cdk/drag-drop/drop-list-container.ts","../../src/cdk/drag-drop/drag-parent.ts","../../src/cdk/drag-drop/directives/drag-handle.ts","../../src/cdk/drag-drop/directives/drag-placeholder.ts","../../src/cdk/drag-drop/directives/drag-preview.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  AfterViewInit,\r\n  ContentChild,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  SkipSelf,\r\n  ViewContainerRef,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectorRef,\r\n  isDevMode,\r\n} from '@angular/core';\r\nimport {coerceBooleanProperty, coerceNumberProperty, coerceElement} from '@angular/cdk/coercion';\r\nimport {Observable, Observer, Subject, merge} from 'rxjs';\r\nimport {startWith, take, map, takeUntil, switchMap, tap} from 'rxjs/operators';\r\nimport {\r\n  CdkDragDrop,\r\n  CdkDragEnd,\r\n  CdkDragEnter,\r\n  CdkDragExit,\r\n  CdkDragMove,\r\n  CdkDragStart,\r\n  CdkDragRelease,\r\n} from '../drag-events';\r\nimport {CdkDragHandle} from './drag-handle';\r\nimport {CdkDragPlaceholder} from './drag-placeholder';\r\nimport {CdkDragPreview} from './drag-preview';\r\nimport {CDK_DROP_LIST} from '../drop-list-container';\r\nimport {CDK_DRAG_PARENT} from '../drag-parent';\r\nimport {DragRef, DragRefConfig, Point} from '../drag-ref';\r\nimport {CdkDropListInternal as CdkDropList} from './drop-list';\r\nimport {DragDrop} from '../drag-drop';\r\n\r\n/** Injection token that can be used to configure the behavior of `CdkDrag`. */\r\nexport const CDK_DRAG_CONFIG = new InjectionToken<DragRefConfig>('CDK_DRAG_CONFIG', {\r\n  providedIn: 'root',\r\n  factory: CDK_DRAG_CONFIG_FACTORY\r\n});\r\n\r\n/** @docs-private */\r\nexport function CDK_DRAG_CONFIG_FACTORY(): DragRefConfig {\r\n  return {dragStartThreshold: 5, pointerDirectionChangeThreshold: 5};\r\n}\r\n\r\n/** Element that can be moved inside a CdkDropList container. */\r\n@Directive({\r\n  selector: '[cdkDrag]',\r\n  exportAs: 'cdkDrag',\r\n  host: {\r\n    'class': 'cdk-drag',\r\n    '[class.cdk-drag-disabled]': 'disabled',\r\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\r\n  },\r\n  providers: [{provide: CDK_DRAG_PARENT, useExisting: CdkDrag}]\r\n})\r\nexport class CdkDrag<T = any> implements AfterViewInit, OnChanges, OnDestroy {\r\n  private _destroyed = new Subject<void>();\r\n\r\n  /** Reference to the underlying drag instance. */\r\n  _dragRef: DragRef<CdkDrag<T>>;\r\n\r\n  /** Elements that can be used to drag the draggable item. */\r\n  @ContentChildren(CdkDragHandle, {descendants: true}) _handles: QueryList<CdkDragHandle>;\r\n\r\n  /** Element that will be used as a template to create the draggable item's preview. */\r\n  @ContentChild(CdkDragPreview, {static: false}) _previewTemplate: CdkDragPreview;\r\n\r\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\r\n  @ContentChild(CdkDragPlaceholder, {static: false}) _placeholderTemplate: CdkDragPlaceholder;\r\n\r\n  /** Arbitrary data to attach to this drag instance. */\r\n  @Input('cdkDragData') data: T;\r\n\r\n  /** Locks the position of the dragged element along the specified axis. */\r\n  @Input('cdkDragLockAxis') lockAxis: 'x' | 'y';\r\n\r\n  /**\r\n   * Selector that will be used to determine the root draggable element, starting from\r\n   * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\r\n   * when trying to enable dragging on an element that you might not have access to.\r\n   */\r\n  @Input('cdkDragRootElement') rootElementSelector: string;\r\n\r\n  /**\r\n   * Node or selector that will be used to determine the element to which the draggable's\r\n   * position will be constrained. If a string is passed in, it'll be used as a selector that\r\n   * will be matched starting from the element's parent and going up the DOM until a match\r\n   * has been found.\r\n   */\r\n  @Input('cdkDragBoundary') boundaryElement: string | ElementRef<HTMLElement> | HTMLElement;\r\n\r\n  /**\r\n   * Selector that will be used to determine the element to which the draggable's position will\r\n   * be constrained. Matching starts from the element's parent and goes up the DOM until a matching\r\n   * element has been found\r\n   * @deprecated Use `boundaryElement` instead.\r\n   * @breaking-change 9.0.0\r\n   */\r\n  get boundaryElementSelector(): string {\r\n    return typeof this.boundaryElement === 'string' ? this.boundaryElement : undefined!;\r\n  }\r\n  set boundaryElementSelector(selector: string) {\r\n    this.boundaryElement = selector;\r\n  }\r\n\r\n  /**\r\n   * Amount of milliseconds to wait after the user has put their\r\n   * pointer down before starting to drag the element.\r\n   */\r\n  @Input('cdkDragStartDelay') dragStartDelay: number = 0;\r\n\r\n  /**\r\n   * Sets the position of a `CdkDrag` that is outside of a drop container.\r\n   * Can be used to restore the element's position for a returning user.\r\n   */\r\n  @Input('cdkDragFreeDragPosition') freeDragPosition: {x: number, y: number};\r\n\r\n  /** Whether starting to drag this element is disabled. */\r\n  @Input('cdkDragDisabled')\r\n  get disabled(): boolean {\r\n    return this._disabled || (this.dropContainer && this.dropContainer.disabled);\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n    this._dragRef.disabled = this._disabled;\r\n  }\r\n  private _disabled = false;\r\n\r\n  /**\r\n   * Function that can be used to customize the logic of how the position of the drag item\r\n   * is limited while it's being dragged. Gets called with a point containing the current position\r\n   * of the user's pointer on the page and should return a point describing where the item should\r\n   * be rendered.\r\n   */\r\n  @Input('cdkDragConstrainPosition') constrainPosition?: (point: Point) => Point;\r\n\r\n  /** Emits when the user starts dragging the item. */\r\n  @Output('cdkDragStarted') started: EventEmitter<CdkDragStart> = new EventEmitter<CdkDragStart>();\r\n\r\n  /** Emits when the user has released a drag item, before any animations have started. */\r\n  @Output('cdkDragReleased') released: EventEmitter<CdkDragRelease> =\r\n      new EventEmitter<CdkDragRelease>();\r\n\r\n  /** Emits when the user stops dragging an item in the container. */\r\n  @Output('cdkDragEnded') ended: EventEmitter<CdkDragEnd> = new EventEmitter<CdkDragEnd>();\r\n\r\n  /** Emits when the user has moved the item into a new container. */\r\n  @Output('cdkDragEntered') entered: EventEmitter<CdkDragEnter<any>> =\r\n      new EventEmitter<CdkDragEnter<any>>();\r\n\r\n  /** Emits when the user removes the item its container by dragging it into another container. */\r\n  @Output('cdkDragExited') exited: EventEmitter<CdkDragExit<any>> =\r\n      new EventEmitter<CdkDragExit<any>>();\r\n\r\n  /** Emits when the user drops the item inside a container. */\r\n  @Output('cdkDragDropped') dropped: EventEmitter<CdkDragDrop<any>> =\r\n      new EventEmitter<CdkDragDrop<any>>();\r\n\r\n  /**\r\n   * Emits as the user is dragging the item. Use with caution,\r\n   * because this event will fire for every pixel that the user has dragged.\r\n   */\r\n  @Output('cdkDragMoved') moved: Observable<CdkDragMove<T>> =\r\n      new Observable((observer: Observer<CdkDragMove<T>>) => {\r\n        const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\r\n          source: this,\r\n          pointerPosition: movedEvent.pointerPosition,\r\n          event: movedEvent.event,\r\n          delta: movedEvent.delta,\r\n          distance: movedEvent.distance\r\n        }))).subscribe(observer);\r\n\r\n        return () => {\r\n          subscription.unsubscribe();\r\n        };\r\n      });\r\n\r\n  constructor(\r\n      /** Element that the draggable is attached to. */\r\n      public element: ElementRef<HTMLElement>,\r\n      /** Droppable container that the draggable is a part of. */\r\n      @Inject(CDK_DROP_LIST) @Optional() @SkipSelf() public dropContainer: CdkDropList,\r\n      @Inject(DOCUMENT) private _document: any, private _ngZone: NgZone,\r\n      private _viewContainerRef: ViewContainerRef, @Inject(CDK_DRAG_CONFIG) config: DragRefConfig,\r\n      @Optional() private _dir: Directionality, dragDrop: DragDrop,\r\n      private _changeDetectorRef: ChangeDetectorRef) {\r\n    this._dragRef = dragDrop.createDrag(element, config);\r\n    this._dragRef.data = this;\r\n    this._syncInputs(this._dragRef);\r\n    this._handleEvents(this._dragRef);\r\n  }\r\n\r\n  /**\r\n   * Returns the element that is being used as a placeholder\r\n   * while the current element is being dragged.\r\n   */\r\n  getPlaceholderElement(): HTMLElement {\r\n    return this._dragRef.getPlaceholderElement();\r\n  }\r\n\r\n  /** Returns the root draggable element. */\r\n  getRootElement(): HTMLElement {\r\n    return this._dragRef.getRootElement();\r\n  }\r\n\r\n  /** Resets a standalone drag item to its initial position. */\r\n  reset(): void {\r\n    this._dragRef.reset();\r\n  }\r\n\r\n  /**\r\n   * Gets the pixel coordinates of the draggable outside of a drop container.\r\n   */\r\n  getFreeDragPosition(): {readonly x: number, readonly y: number} {\r\n    return this._dragRef.getFreeDragPosition();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // We need to wait for the zone to stabilize, in order for the reference\r\n    // element to be in the proper place in the DOM. This is mostly relevant\r\n    // for draggable elements inside portals since they get stamped out in\r\n    // their original DOM position and then they get transferred to the portal.\r\n    this._ngZone.onStable.asObservable()\r\n      .pipe(take(1), takeUntil(this._destroyed))\r\n      .subscribe(() => {\r\n        this._updateRootElement();\r\n\r\n        // Listen for any newly-added handles.\r\n        this._handles.changes.pipe(\r\n          startWith(this._handles),\r\n          // Sync the new handles with the DragRef.\r\n          tap((handles: QueryList<CdkDragHandle>) => {\r\n            const childHandleElements = handles\r\n              .filter(handle => handle._parentDrag === this)\r\n              .map(handle => handle.element);\r\n            this._dragRef.withHandles(childHandleElements);\r\n          }),\r\n          // Listen if the state of any of the handles changes.\r\n          switchMap((handles: QueryList<CdkDragHandle>) => {\r\n            return merge(...handles.map(item => item._stateChanges));\r\n          }),\r\n          takeUntil(this._destroyed)\r\n        ).subscribe(handleInstance => {\r\n          // Enabled/disable the handle that changed in the DragRef.\r\n          const dragRef = this._dragRef;\r\n          const handle = handleInstance.element.nativeElement;\r\n          handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\r\n        });\r\n\r\n        if (this.freeDragPosition) {\r\n          this._dragRef.setFreeDragPosition(this.freeDragPosition);\r\n        }\r\n      });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const rootSelectorChange = changes['rootElementSelector'];\r\n    const positionChange = changes['freeDragPosition'];\r\n\r\n    // We don't have to react to the first change since it's being\r\n    // handled in `ngAfterViewInit` where it needs to be deferred.\r\n    if (rootSelectorChange && !rootSelectorChange.firstChange) {\r\n      this._updateRootElement();\r\n    }\r\n\r\n    // Skip the first change since it's being handled in `ngAfterViewInit`.\r\n    if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\r\n      this._dragRef.setFreeDragPosition(this.freeDragPosition);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n    this._dragRef.dispose();\r\n  }\r\n\r\n  /** Syncs the root element with the `DragRef`. */\r\n  private _updateRootElement() {\r\n    const element = this.element.nativeElement;\r\n    const rootElement = this.rootElementSelector ?\r\n        getClosestMatchingAncestor(element, this.rootElementSelector) : element;\r\n\r\n    if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\r\n      throw Error(`cdkDrag must be attached to an element node. ` +\r\n                  `Currently attached to \"${rootElement.nodeName}\".`);\r\n    }\r\n\r\n    this._dragRef.withRootElement(rootElement || element);\r\n  }\r\n\r\n  /** Gets the boundary element, based on the `boundaryElement` value. */\r\n  private _getBoundaryElement() {\r\n    const boundary = this.boundaryElement;\r\n\r\n    if (!boundary) {\r\n      return null;\r\n    }\r\n\r\n    if (typeof boundary === 'string') {\r\n      return getClosestMatchingAncestor(this.element.nativeElement, boundary);\r\n    }\r\n\r\n    const element = coerceElement(boundary);\r\n\r\n    if (isDevMode() && !element.contains(this.element.nativeElement)) {\r\n      throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\r\n    }\r\n\r\n    return element;\r\n  }\r\n\r\n  /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\r\n  private _syncInputs(ref: DragRef<CdkDrag<T>>) {\r\n    ref.beforeStarted.subscribe(() => {\r\n      if (!ref.isDragging()) {\r\n        const dir = this._dir;\r\n        const placeholder = this._placeholderTemplate ? {\r\n          template: this._placeholderTemplate.templateRef,\r\n          context: this._placeholderTemplate.data,\r\n          viewContainer: this._viewContainerRef\r\n        } : null;\r\n        const preview = this._previewTemplate ? {\r\n          template: this._previewTemplate.templateRef,\r\n          context: this._previewTemplate.data,\r\n          viewContainer: this._viewContainerRef\r\n        } : null;\r\n\r\n        ref.disabled = this.disabled;\r\n        ref.lockAxis = this.lockAxis;\r\n        ref.dragStartDelay = coerceNumberProperty(this.dragStartDelay);\r\n        ref.constrainPosition = this.constrainPosition;\r\n        ref\r\n          .withBoundaryElement(this._getBoundaryElement())\r\n          .withPlaceholderTemplate(placeholder)\r\n          .withPreviewTemplate(preview);\r\n\r\n        if (dir) {\r\n          ref.withDirection(dir.value);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Handles the events from the underlying `DragRef`. */\r\n  private _handleEvents(ref: DragRef<CdkDrag<T>>) {\r\n    ref.started.subscribe(() => {\r\n      this.started.emit({source: this});\r\n\r\n      // Since all of these events run outside of change detection,\r\n      // we need to ensure that everything is marked correctly.\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    ref.released.subscribe(() => {\r\n      this.released.emit({source: this});\r\n    });\r\n\r\n    ref.ended.subscribe(event => {\r\n      this.ended.emit({source: this, distance: event.distance});\r\n\r\n      // Since all of these events run outside of change detection,\r\n      // we need to ensure that everything is marked correctly.\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    ref.entered.subscribe(event => {\r\n      this.entered.emit({\r\n        container: event.container.data,\r\n        item: this,\r\n        currentIndex: event.currentIndex\r\n      });\r\n    });\r\n\r\n    ref.exited.subscribe(event => {\r\n      this.exited.emit({\r\n        container: event.container.data,\r\n        item: this\r\n      });\r\n    });\r\n\r\n    ref.dropped.subscribe(event => {\r\n      this.dropped.emit({\r\n        previousIndex: event.previousIndex,\r\n        currentIndex: event.currentIndex,\r\n        previousContainer: event.previousContainer.data,\r\n        container: event.container.data,\r\n        isPointerOverContainer: event.isPointerOverContainer,\r\n        item: this,\r\n        distance: event.distance\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n/** Gets the closest ancestor of an element that matches a selector. */\r\nfunction getClosestMatchingAncestor(element: HTMLElement, selector: string) {\r\n  let currentElement = element.parentElement as HTMLElement | null;\r\n\r\n  while (currentElement) {\r\n    // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\r\n    if (currentElement.matches ? currentElement.matches(selector) :\r\n        (currentElement as any).msMatchesSelector(selector)) {\r\n      return currentElement;\r\n    }\r\n\r\n    currentElement = currentElement.parentElement;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, OnDestroy, Input} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\n\r\n/**\r\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\r\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\r\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\r\n * from `cdkDropList`.\r\n */\r\n@Directive({\r\n  selector: '[cdkDropListGroup]',\r\n  exportAs: 'cdkDropListGroup',\r\n})\r\nexport class CdkDropListGroup<T> implements OnDestroy {\r\n  /** Drop lists registered inside the group. */\r\n  readonly _items = new Set<T>();\r\n\r\n  /** Whether starting a dragging sequence from inside this group is disabled. */\r\n  @Input('cdkDropListGroupDisabled')\r\n  get disabled(): boolean { return this._disabled; }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n  }\r\n  private _disabled = false;\r\n\r\n  ngOnDestroy() {\r\n    this._items.clear();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceArray, coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n  QueryList,\r\n  Optional,\r\n  Directive,\r\n  ChangeDetectorRef,\r\n  SkipSelf,\r\n  AfterContentInit,\r\n} from '@angular/core';\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {CdkDrag} from './drag';\r\nimport {CdkDragDrop, CdkDragEnter, CdkDragExit, CdkDragSortEvent} from '../drag-events';\r\nimport {CDK_DROP_LIST_CONTAINER, CdkDropListContainer} from '../drop-list-container';\r\nimport {CdkDropListGroup} from './drop-list-group';\r\nimport {DropListRef} from '../drop-list-ref';\r\nimport {DragRef} from '../drag-ref';\r\nimport {DragDrop} from '../drag-drop';\r\nimport {Subject} from 'rxjs';\r\nimport {startWith, takeUntil} from 'rxjs/operators';\r\n\r\n/** Counter used to generate unique ids for drop zones. */\r\nlet _uniqueIdCounter = 0;\r\n\r\n/**\r\n * Internal compile-time-only representation of a `CdkDropList`.\r\n * Used to avoid circular import issues between the `CdkDropList` and the `CdkDrag`.\r\n * @docs-private\r\n */\r\nexport interface CdkDropListInternal extends CdkDropList {}\r\n\r\n// @breaking-change 8.0.0 `CdkDropList` implements `CdkDropListContainer` for backwards\r\n// compatiblity. The implements clause, as well as all the methods that it enforces can\r\n// be removed when `CdkDropListContainer` is deleted.\r\n\r\n/** Container that wraps a set of draggable items. */\r\n@Directive({\r\n  selector: '[cdkDropList], cdk-drop-list',\r\n  exportAs: 'cdkDropList',\r\n  providers: [\r\n    // Prevent child drop lists from picking up the same group as their parent.\r\n    {provide: CdkDropListGroup, useValue: undefined},\r\n    {provide: CDK_DROP_LIST_CONTAINER, useExisting: CdkDropList},\r\n  ],\r\n  host: {\r\n    'class': 'cdk-drop-list',\r\n    '[id]': 'id',\r\n    '[class.cdk-drop-list-disabled]': 'disabled',\r\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\r\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\r\n  }\r\n})\r\nexport class CdkDropList<T = any> implements CdkDropListContainer, AfterContentInit, OnDestroy {\r\n  /** Emits when the list has been destroyed. */\r\n  private _destroyed = new Subject<void>();\r\n\r\n  /** Keeps track of the drop lists that are currently on the page. */\r\n  private static _dropLists: CdkDropList[] = [];\r\n\r\n  /** Reference to the underlying drop list instance. */\r\n  _dropListRef: DropListRef<CdkDropList<T>>;\r\n\r\n  /** Draggable items in the container. */\r\n  @ContentChildren(forwardRef(() => CdkDrag), {\r\n    // Explicitly set to false since some of the logic below makes assumptions about it.\r\n    // The `.withItems` call below should be updated if we ever need to switch this to `true`.\r\n    descendants: false\r\n  }) _draggables: QueryList<CdkDrag>;\r\n\r\n  /**\r\n   * Other draggable containers that this container is connected to and into which the\r\n   * container's items can be transferred. Can either be references to other drop containers,\r\n   * or their unique IDs.\r\n   */\r\n  @Input('cdkDropListConnectedTo')\r\n  connectedTo: (CdkDropList | string)[] | CdkDropList | string = [];\r\n\r\n  /** Arbitrary data to attach to this container. */\r\n  @Input('cdkDropListData') data: T;\r\n\r\n  /** Direction in which the list is oriented. */\r\n  @Input('cdkDropListOrientation') orientation: 'horizontal' | 'vertical' = 'vertical';\r\n\r\n  /**\r\n   * Unique ID for the drop zone. Can be used as a reference\r\n   * in the `connectedTo` of another `CdkDropList`.\r\n   */\r\n  @Input() id: string = `cdk-drop-list-${_uniqueIdCounter++}`;\r\n\r\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\r\n  @Input('cdkDropListLockAxis') lockAxis: 'x' | 'y';\r\n\r\n  /** Whether starting a dragging sequence from this container is disabled. */\r\n  @Input('cdkDropListDisabled')\r\n  get disabled(): boolean {\r\n    return this._disabled || (!!this._group && this._group.disabled);\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n  }\r\n  private _disabled = false;\r\n\r\n  /** Whether sorting within this drop list is disabled. */\r\n  @Input('cdkDropListSortingDisabled')\r\n  get sortingDisabled(): boolean { return this._sortingDisabled; }\r\n  set sortingDisabled(value: boolean) {\r\n    this._sortingDisabled = coerceBooleanProperty(value);\r\n  }\r\n  private _sortingDisabled = false;\r\n\r\n  /**\r\n   * Function that is used to determine whether an item\r\n   * is allowed to be moved into a drop container.\r\n   */\r\n  @Input('cdkDropListEnterPredicate')\r\n  enterPredicate: (drag: CdkDrag, drop: CdkDropList) => boolean = () => true\r\n\r\n  /** Emits when the user drops an item inside the container. */\r\n  @Output('cdkDropListDropped')\r\n  dropped: EventEmitter<CdkDragDrop<T, any>> = new EventEmitter<CdkDragDrop<T, any>>();\r\n\r\n  /**\r\n   * Emits when the user has moved a new drag item into this container.\r\n   */\r\n  @Output('cdkDropListEntered')\r\n  entered: EventEmitter<CdkDragEnter<T>> = new EventEmitter<CdkDragEnter<T>>();\r\n\r\n  /**\r\n   * Emits when the user removes an item from the container\r\n   * by dragging it into another container.\r\n   */\r\n  @Output('cdkDropListExited')\r\n  exited: EventEmitter<CdkDragExit<T>> = new EventEmitter<CdkDragExit<T>>();\r\n\r\n  /** Emits as the user is swapping items while actively dragging. */\r\n  @Output('cdkDropListSorted')\r\n  sorted: EventEmitter<CdkDragSortEvent<T>> = new EventEmitter<CdkDragSortEvent<T>>();\r\n\r\n  constructor(\r\n      /** Element that the drop list is attached to. */\r\n      public element: ElementRef<HTMLElement>, dragDrop: DragDrop,\r\n      private _changeDetectorRef: ChangeDetectorRef, @Optional() private _dir?: Directionality,\r\n      @Optional() @SkipSelf() private _group?: CdkDropListGroup<CdkDropList>) {\r\n    this._dropListRef = dragDrop.createDropList(element);\r\n    this._dropListRef.data = this;\r\n    this._dropListRef.enterPredicate = (drag: DragRef<CdkDrag>, drop: DropListRef<CdkDropList>) => {\r\n      return this.enterPredicate(drag.data, drop.data);\r\n    };\r\n\r\n    this._syncInputs(this._dropListRef);\r\n    this._handleEvents(this._dropListRef);\r\n    CdkDropList._dropLists.push(this);\r\n\r\n    if (_group) {\r\n      _group._items.add(this);\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._draggables.changes\r\n      .pipe(startWith(this._draggables), takeUntil(this._destroyed))\r\n      .subscribe((items: QueryList<CdkDrag>) => {\r\n        this._dropListRef.withItems(items.map(drag => drag._dragRef));\r\n      });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    const index = CdkDropList._dropLists.indexOf(this);\r\n\r\n    if (index > -1) {\r\n      CdkDropList._dropLists.splice(index, 1);\r\n    }\r\n\r\n    if (this._group) {\r\n      this._group._items.delete(this);\r\n    }\r\n\r\n    this._dropListRef.dispose();\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /** Starts dragging an item. */\r\n  start(): void {\r\n    this._dropListRef.start();\r\n  }\r\n\r\n  /**\r\n   * Drops an item into this container.\r\n   * @param item Item being dropped into the container.\r\n   * @param currentIndex Index at which the item should be inserted.\r\n   * @param previousContainer Container from which the item got dragged in.\r\n   * @param isPointerOverContainer Whether the user's pointer was over the\r\n   *    container when the item was dropped.\r\n   */\r\n  drop(item: CdkDrag, currentIndex: number, previousContainer: Partial<CdkDropListContainer>,\r\n    isPointerOverContainer: boolean): void {\r\n    this._dropListRef.drop(item._dragRef, currentIndex,\r\n      (previousContainer as CdkDropList)._dropListRef, isPointerOverContainer);\r\n  }\r\n\r\n  /**\r\n   * Emits an event to indicate that the user moved an item into the container.\r\n   * @param item Item that was moved into the container.\r\n   * @param pointerX Position of the item along the X axis.\r\n   * @param pointerY Position of the item along the Y axis.\r\n   */\r\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void {\r\n    this._dropListRef.enter(item._dragRef, pointerX, pointerY);\r\n  }\r\n\r\n  /**\r\n   * Removes an item from the container after it was dragged into another container by the user.\r\n   * @param item Item that was dragged out.\r\n   */\r\n  exit(item: CdkDrag): void {\r\n    this._dropListRef.exit(item._dragRef);\r\n  }\r\n\r\n  /**\r\n   * Figures out the index of an item in the container.\r\n   * @param item Item whose index should be determined.\r\n   */\r\n  getItemIndex(item: CdkDrag): number {\r\n    return this._dropListRef.getItemIndex(item._dragRef);\r\n  }\r\n\r\n  /**\r\n   * Sorts an item inside the container based on its position.\r\n   * @param item Item to be sorted.\r\n   * @param pointerX Position of the item along the X axis.\r\n   * @param pointerY Position of the item along the Y axis.\r\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\r\n   */\r\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number,\r\n            pointerDelta: {x: number, y: number}): void {\r\n    return this._dropListRef._sortItem(item._dragRef, pointerX, pointerY, pointerDelta);\r\n  }\r\n\r\n  /**\r\n   * Figures out whether an item should be moved into a sibling\r\n   * drop container, based on its current position.\r\n   * @param item Drag item that is being moved.\r\n   * @param x Position of the item along the X axis.\r\n   * @param y Position of the item along the Y axis.\r\n   */\r\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\r\n    CdkDropListContainer | null {\r\n    const result = this._dropListRef._getSiblingContainerFromPosition(item._dragRef, x, y);\r\n    return result ? result.data : null;\r\n  }\r\n\r\n  /**\r\n   * Checks whether the user's pointer is positioned over the container.\r\n   * @param x Pointer position along the X axis.\r\n   * @param y Pointer position along the Y axis.\r\n   */\r\n  _isOverContainer(x: number, y: number): boolean {\r\n    return this._dropListRef._isOverContainer(x, y);\r\n  }\r\n\r\n  /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\r\n  private _syncInputs(ref: DropListRef<CdkDropList>) {\r\n    if (this._dir) {\r\n      this._dir.change\r\n        .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\r\n        .subscribe(value => ref.withDirection(value));\r\n    }\r\n\r\n    ref.beforeStarted.subscribe(() => {\r\n      const siblings = coerceArray(this.connectedTo).map(drop => {\r\n        return typeof drop === 'string' ?\r\n            CdkDropList._dropLists.find(list => list.id === drop)! : drop;\r\n      });\r\n\r\n      if (this._group) {\r\n        this._group._items.forEach(drop => {\r\n          if (siblings.indexOf(drop) === -1) {\r\n            siblings.push(drop);\r\n          }\r\n        });\r\n      }\r\n\r\n      ref.disabled = this.disabled;\r\n      ref.lockAxis = this.lockAxis;\r\n      ref.sortingDisabled = this.sortingDisabled;\r\n      ref\r\n        .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\r\n        .withOrientation(this.orientation);\r\n    });\r\n  }\r\n\r\n  /** Handles events from the underlying DropListRef. */\r\n  private _handleEvents(ref: DropListRef<CdkDropList>) {\r\n    ref.beforeStarted.subscribe(() => {\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    ref.entered.subscribe(event => {\r\n      this.entered.emit({\r\n        container: this,\r\n        item: event.item.data,\r\n        currentIndex: event.currentIndex\r\n      });\r\n    });\r\n\r\n    ref.exited.subscribe(event => {\r\n      this.exited.emit({\r\n        container: this,\r\n        item: event.item.data\r\n      });\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n\r\n    ref.sorted.subscribe(event => {\r\n      this.sorted.emit({\r\n        previousIndex: event.previousIndex,\r\n        currentIndex: event.currentIndex,\r\n        container: this,\r\n        item: event.item.data\r\n      });\r\n    });\r\n\r\n    ref.dropped.subscribe(event => {\r\n      this.dropped.emit({\r\n        previousIndex: event.previousIndex,\r\n        currentIndex: event.currentIndex,\r\n        previousContainer: event.previousContainer.data,\r\n        container: event.container.data,\r\n        item: event.item.data,\r\n        isPointerOverContainer: event.isPointerOverContainer,\r\n        distance: event.distance\r\n      });\r\n\r\n      // Mark for check since all of these events run outside of change\r\n      // detection and we're not guaranteed for something else to have triggered it.\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CdkDropList} from './directives/drop-list';\r\nimport {CdkDropListGroup} from './directives/drop-list-group';\r\nimport {CdkDrag} from './directives/drag';\r\nimport {CdkDragHandle} from './directives/drag-handle';\r\nimport {CdkDragPreview} from './directives/drag-preview';\r\nimport {CdkDragPlaceholder} from './directives/drag-placeholder';\r\nimport {DragDrop} from './drag-drop';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CdkDropList,\r\n    CdkDropListGroup,\r\n    CdkDrag,\r\n    CdkDragHandle,\r\n    CdkDragPreview,\r\n    CdkDragPlaceholder,\r\n  ],\r\n  exports: [\r\n    CdkDropList,\r\n    CdkDropListGroup,\r\n    CdkDrag,\r\n    CdkDragHandle,\r\n    CdkDragPreview,\r\n    CdkDragPlaceholder,\r\n  ],\r\n  providers: [\r\n    DragDrop,\r\n  ]\r\n})\r\nexport class DragDropModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\r\n// Helper type that ignores `readonly` properties. This is used in\r\n// `extendStyles` to ignore the readonly properties on CSSStyleDeclaration\r\n// since we won't be touching those anyway.\r\ntype Writeable<T> = { -readonly [P in keyof T]-?: T[P] };\r\n\r\n/**\r\n * Extended CSSStyleDeclaration that includes a couple of drag-related\r\n * properties that aren't in the built-in TS typings.\r\n */\r\ninterface DragCSSStyleDeclaration extends CSSStyleDeclaration {\r\n  webkitUserDrag: string;\r\n  MozUserSelect: string; // For some reason the Firefox property is in PascalCase.\r\n}\r\n\r\n/**\r\n * Shallow-extends a stylesheet object with another stylesheet object.\r\n * @docs-private\r\n */\r\nexport function extendStyles(\r\n    dest: Writeable<CSSStyleDeclaration>,\r\n    source: Partial<DragCSSStyleDeclaration>) {\r\n  for (let key in source) {\r\n    if (source.hasOwnProperty(key)) {\r\n      dest[key as keyof CSSStyleDeclaration] = source[key as keyof CSSStyleDeclaration];\r\n    }\r\n  }\r\n\r\n  return dest;\r\n}\r\n\r\n\r\n/**\r\n * Toggles whether the native drag interactions should be enabled for an element.\r\n * @param element Element on which to toggle the drag interactions.\r\n * @param enable Whether the drag interactions should be enabled.\r\n * @docs-private\r\n */\r\nexport function toggleNativeDragInteractions(element: HTMLElement, enable: boolean) {\r\n  const userSelect = enable ? '' : 'none';\r\n\r\n  extendStyles(element.style, {\r\n    touchAction: enable ? '' : 'none',\r\n    webkitUserDrag: enable ? '' : 'none',\r\n    webkitTapHighlightColor: enable ? '' : 'transparent',\r\n    userSelect: userSelect,\r\n    msUserSelect: userSelect,\r\n    webkitUserSelect: userSelect,\r\n    MozUserSelect: userSelect\r\n  });\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** Parses a CSS time value to milliseconds. */\r\nfunction parseCssTimeUnitsToMs(value: string): number {\r\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\r\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\r\n  return parseFloat(value) * multiplier;\r\n}\r\n\r\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\r\nexport function getTransformTransitionDurationInMs(element: HTMLElement): number {\r\n  const computedStyle = getComputedStyle(element);\r\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\r\n  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\r\n\r\n  // If there's no transition for `all` or `transform`, we shouldn't do anything.\r\n  if (!property) {\r\n    return 0;\r\n  }\r\n\r\n  // Get the index of the property that we're interested in and match\r\n  // it up to the same index in `transition-delay` and `transition-duration`.\r\n  const propertyIndex = transitionedProperties.indexOf(property);\r\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\r\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\r\n\r\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\r\n         parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\r\n}\r\n\r\n/** Parses out multiple values from a computed style into an array. */\r\nfunction parseCssPropertyValue(computedStyle: CSSStyleDeclaration, name: string): string[] {\r\n  const value = computedStyle.getPropertyValue(name);\r\n  return value.split(',').map(part => part.trim());\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {EmbeddedViewRef, ElementRef, NgZone, ViewContainerRef, TemplateRef} from '@angular/core';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {Direction} from '@angular/cdk/bidi';\r\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\r\nimport {coerceBooleanProperty, coerceElement} from '@angular/cdk/coercion';\r\nimport {Subscription, Subject, Observable} from 'rxjs';\r\nimport {DropListRefInternal as DropListRef} from './drop-list-ref';\r\nimport {DragDropRegistry} from './drag-drop-registry';\r\nimport {extendStyles, toggleNativeDragInteractions} from './drag-styling';\r\nimport {getTransformTransitionDurationInMs} from './transition-duration';\r\n\r\n/** Object that can be used to configure the behavior of DragRef. */\r\nexport interface DragRefConfig {\r\n  /**\r\n   * Minimum amount of pixels that the user should\r\n   * drag, before the CDK initiates a drag sequence.\r\n   */\r\n  dragStartThreshold: number;\r\n\r\n  /**\r\n   * Amount the pixels the user should drag before the CDK\r\n   * considers them to have changed the drag direction.\r\n   */\r\n  pointerDirectionChangeThreshold: number;\r\n}\r\n\r\n/** Options that can be used to bind a passive event listener. */\r\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\r\n\r\n/** Options that can be used to bind an active event listener. */\r\nconst activeEventListenerOptions = normalizePassiveListenerOptions({passive: false});\r\n\r\n/**\r\n * Time in milliseconds for which to ignore mouse events, after\r\n * receiving a touch event. Used to avoid doing double work for\r\n * touch devices where the browser fires fake mouse events, in\r\n * addition to touch events.\r\n */\r\nconst MOUSE_EVENT_IGNORE_TIME = 800;\r\n\r\n// TODO(crisbeto): add auto-scrolling functionality.\r\n// TODO(crisbeto): add an API for moving a draggable up/down the\r\n// list programmatically. Useful for keyboard controls.\r\n\r\n/**\r\n * Internal compile-time-only representation of a `DragRef`.\r\n * Used to avoid circular import issues between the `DragRef` and the `DropListRef`.\r\n * @docs-private\r\n */\r\nexport interface DragRefInternal extends DragRef {}\r\n\r\n/** Template that can be used to create a drag helper element (e.g. a preview or a placeholder). */\r\ninterface DragHelperTemplate<T = any> {\r\n  template: TemplateRef<T> | null;\r\n  viewContainer: ViewContainerRef;\r\n  context: T;\r\n}\r\n\r\n/**\r\n * Reference to a draggable item. Used to manipulate or dispose of the item.\r\n * @docs-private\r\n */\r\nexport class DragRef<T = any> {\r\n  /** Element displayed next to the user's pointer while the element is dragged. */\r\n  private _preview: HTMLElement;\r\n\r\n  /** Reference to the view of the preview element. */\r\n  private _previewRef: EmbeddedViewRef<any> | null;\r\n\r\n  /** Reference to the view of the placeholder element. */\r\n  private _placeholderRef: EmbeddedViewRef<any> | null;\r\n\r\n  /** Element that is rendered instead of the draggable item while it is being sorted. */\r\n  private _placeholder: HTMLElement;\r\n\r\n  /** Coordinates within the element at which the user picked up the element. */\r\n  private _pickupPositionInElement: Point;\r\n\r\n  /** Coordinates on the page at which the user picked up the element. */\r\n  private _pickupPositionOnPage: Point;\r\n\r\n  /**\r\n   * Reference to the element that comes after the draggable in the DOM, at the time\r\n   * it was picked up. Used for restoring its initial position when it's dropped.\r\n   */\r\n  private _nextSibling: Node | null;\r\n\r\n  /**\r\n   * CSS `transform` applied to the element when it isn't being dragged. We need a\r\n   * passive transform in order for the dragged element to retain its new position\r\n   * after the user has stopped dragging and because we need to know the relative\r\n   * position in case they start dragging again. This corresponds to `element.style.transform`.\r\n   */\r\n  private _passiveTransform: Point = {x: 0, y: 0};\r\n\r\n  /** CSS `transform` that is applied to the element while it's being dragged. */\r\n  private _activeTransform: Point = {x: 0, y: 0};\r\n\r\n  /** Inline `transform` value that the element had before the first dragging sequence. */\r\n  private _initialTransform?: string;\r\n\r\n  /**\r\n   * Whether the dragging sequence has been started. Doesn't\r\n   * necessarily mean that the element has been moved.\r\n   */\r\n  private _hasStartedDragging: boolean;\r\n\r\n  /** Whether the element has moved since the user started dragging it. */\r\n  private _hasMoved: boolean;\r\n\r\n  /** Drop container in which the DragRef resided when dragging began. */\r\n  private _initialContainer: DropListRef;\r\n\r\n  /** Cached scroll position on the page when the element was picked up. */\r\n  private _scrollPosition: {top: number, left: number};\r\n\r\n  /** Emits when the item is being moved. */\r\n  private _moveEvents = new Subject<{\r\n    source: DragRef;\r\n    pointerPosition: {x: number, y: number};\r\n    event: MouseEvent | TouchEvent;\r\n    distance: Point;\r\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\r\n  }>();\r\n\r\n  /** Keeps track of the direction in which the user is dragging along each axis. */\r\n  private _pointerDirectionDelta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\r\n\r\n  /** Pointer position at which the last change in the delta occurred. */\r\n  private _pointerPositionAtLastDirectionChange: Point;\r\n\r\n  /**\r\n   * Root DOM node of the drag instance. This is the element that will\r\n   * be moved around as the user is dragging.\r\n   */\r\n  private _rootElement: HTMLElement;\r\n\r\n  /**\r\n   * Inline style value of `-webkit-tap-highlight-color` at the time the\r\n   * dragging was started. Used to restore the value once we're done dragging.\r\n   */\r\n  private _rootElementTapHighlight: string | null;\r\n\r\n  /** Subscription to pointer movement events. */\r\n  private _pointerMoveSubscription = Subscription.EMPTY;\r\n\r\n  /** Subscription to the event that is dispatched when the user lifts their pointer. */\r\n  private _pointerUpSubscription = Subscription.EMPTY;\r\n\r\n  /**\r\n   * Time at which the last touch event occurred. Used to avoid firing the same\r\n   * events multiple times on touch devices where the browser will fire a fake\r\n   * mouse event for each touch event, after a certain time.\r\n   */\r\n  private _lastTouchEventTime: number;\r\n\r\n  /** Time at which the last dragging sequence was started. */\r\n  private _dragStartTime: number;\r\n\r\n  /** Cached reference to the boundary element. */\r\n  private _boundaryElement: HTMLElement | null = null;\r\n\r\n  /** Whether the native dragging interactions have been enabled on the root element. */\r\n  private _nativeInteractionsEnabled = true;\r\n\r\n  /** Cached dimensions of the preview element. */\r\n  private _previewRect?: ClientRect;\r\n\r\n  /** Cached dimensions of the boundary element. */\r\n  private _boundaryRect?: ClientRect;\r\n\r\n  /** Element that will be used as a template to create the draggable item's preview. */\r\n  private _previewTemplate?: DragHelperTemplate | null;\r\n\r\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\r\n  private _placeholderTemplate?: DragHelperTemplate | null;\r\n\r\n  /** Elements that can be used to drag the draggable item. */\r\n  private _handles: HTMLElement[] = [];\r\n\r\n  /** Registered handles that are currently disabled. */\r\n  private _disabledHandles = new Set<HTMLElement>();\r\n\r\n  /** Droppable container that the draggable is a part of. */\r\n  private _dropContainer?: DropListRef;\r\n\r\n  /** Layout direction of the item. */\r\n  private _direction: Direction = 'ltr';\r\n\r\n  /** Axis along which dragging is locked. */\r\n  lockAxis: 'x' | 'y';\r\n\r\n  /**\r\n   * Amount of milliseconds to wait after the user has put their\r\n   * pointer down before starting to drag the element.\r\n   */\r\n  dragStartDelay: number = 0;\r\n\r\n  /** Whether starting to drag this element is disabled. */\r\n  get disabled(): boolean {\r\n    return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\r\n  }\r\n  set disabled(value: boolean) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this._disabled) {\r\n      this._disabled = newValue;\r\n      this._toggleNativeDragInteractions();\r\n    }\r\n  }\r\n  private _disabled = false;\r\n\r\n  /** Emits as the drag sequence is being prepared. */\r\n  beforeStarted = new Subject<void>();\r\n\r\n  /** Emits when the user starts dragging the item. */\r\n  started = new Subject<{source: DragRef}>();\r\n\r\n  /** Emits when the user has released a drag item, before any animations have started. */\r\n  released = new Subject<{source: DragRef}>();\r\n\r\n  /** Emits when the user stops dragging an item in the container. */\r\n  ended = new Subject<{source: DragRef, distance: Point}>();\r\n\r\n  /** Emits when the user has moved the item into a new container. */\r\n  entered = new Subject<{container: DropListRef, item: DragRef, currentIndex: number}>();\r\n\r\n  /** Emits when the user removes the item its container by dragging it into another container. */\r\n  exited = new Subject<{container: DropListRef, item: DragRef}>();\r\n\r\n  /** Emits when the user drops the item inside a container. */\r\n  dropped = new Subject<{\r\n    previousIndex: number;\r\n    currentIndex: number;\r\n    item: DragRef;\r\n    container: DropListRef;\r\n    previousContainer: DropListRef;\r\n    distance: Point;\r\n    isPointerOverContainer: boolean;\r\n  }>();\r\n\r\n  /**\r\n   * Emits as the user is dragging the item. Use with caution,\r\n   * because this event will fire for every pixel that the user has dragged.\r\n   */\r\n  moved: Observable<{\r\n    source: DragRef;\r\n    pointerPosition: {x: number, y: number};\r\n    event: MouseEvent | TouchEvent;\r\n    distance: Point;\r\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\r\n  }> = this._moveEvents.asObservable();\r\n\r\n  /** Arbitrary data that can be attached to the drag item. */\r\n  data: T;\r\n\r\n  /**\r\n   * Function that can be used to customize the logic of how the position of the drag item\r\n   * is limited while it's being dragged. Gets called with a point containing the current position\r\n   * of the user's pointer on the page and should return a point describing where the item should\r\n   * be rendered.\r\n   */\r\n  constrainPosition?: (point: Point) => Point;\r\n\r\n  constructor(\r\n    element: ElementRef<HTMLElement> | HTMLElement,\r\n    private _config: DragRefConfig,\r\n    private _document: Document,\r\n    private _ngZone: NgZone,\r\n    private _viewportRuler: ViewportRuler,\r\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {\r\n\r\n    this.withRootElement(element);\r\n    _dragDropRegistry.registerDragItem(this);\r\n  }\r\n\r\n  /**\r\n   * Returns the element that is being used as a placeholder\r\n   * while the current element is being dragged.\r\n   */\r\n  getPlaceholderElement(): HTMLElement {\r\n    return this._placeholder;\r\n  }\r\n\r\n  /** Returns the root draggable element. */\r\n  getRootElement(): HTMLElement {\r\n    return this._rootElement;\r\n  }\r\n\r\n  /** Registers the handles that can be used to drag the element. */\r\n  withHandles(handles: (HTMLElement | ElementRef<HTMLElement>)[]): this {\r\n    this._handles = handles.map(handle => coerceElement(handle));\r\n    this._handles.forEach(handle => toggleNativeDragInteractions(handle, false));\r\n    this._toggleNativeDragInteractions();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Registers the template that should be used for the drag preview.\r\n   * @param template Template that from which to stamp out the preview.\r\n   */\r\n  withPreviewTemplate(template: DragHelperTemplate | null): this {\r\n    this._previewTemplate = template;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Registers the template that should be used for the drag placeholder.\r\n   * @param template Template that from which to stamp out the placeholder.\r\n   */\r\n  withPlaceholderTemplate(template: DragHelperTemplate | null): this {\r\n    this._placeholderTemplate = template;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets an alternate drag root element. The root element is the element that will be moved as\r\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\r\n   * dragging on an element that you might not have access to.\r\n   */\r\n  withRootElement(rootElement: ElementRef<HTMLElement> | HTMLElement): this {\r\n    const element = coerceElement(rootElement);\r\n\r\n    if (element !== this._rootElement) {\r\n      if (this._rootElement) {\r\n        this._removeRootElementListeners(this._rootElement);\r\n      }\r\n\r\n      element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\r\n      element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\r\n      this._initialTransform = undefined;\r\n      this._rootElement = element;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Element to which the draggable's position will be constrained.\r\n   */\r\n  withBoundaryElement(boundaryElement: ElementRef<HTMLElement> | HTMLElement | null): this {\r\n    this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\r\n    return this;\r\n  }\r\n\r\n  /** Removes the dragging functionality from the DOM element. */\r\n  dispose() {\r\n    this._removeRootElementListeners(this._rootElement);\r\n\r\n    // Do this check before removing from the registry since it'll\r\n    // stop being considered as dragged once it is removed.\r\n    if (this.isDragging()) {\r\n      // Since we move out the element to the end of the body while it's being\r\n      // dragged, we have to make sure that it's removed if it gets destroyed.\r\n      removeElement(this._rootElement);\r\n    }\r\n\r\n    this._destroyPreview();\r\n    this._destroyPlaceholder();\r\n    this._dragDropRegistry.removeDragItem(this);\r\n    this._removeSubscriptions();\r\n    this.beforeStarted.complete();\r\n    this.started.complete();\r\n    this.released.complete();\r\n    this.ended.complete();\r\n    this.entered.complete();\r\n    this.exited.complete();\r\n    this.dropped.complete();\r\n    this._moveEvents.complete();\r\n    this._handles = [];\r\n    this._disabledHandles.clear();\r\n    this._dropContainer = undefined;\r\n    this._boundaryElement = this._rootElement = this._placeholderTemplate =\r\n        this._previewTemplate = this._nextSibling = null!;\r\n  }\r\n\r\n  /** Checks whether the element is currently being dragged. */\r\n  isDragging(): boolean {\r\n    return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\r\n  }\r\n\r\n  /** Resets a standalone drag item to its initial position. */\r\n  reset(): void {\r\n    this._rootElement.style.transform = this._initialTransform || '';\r\n    this._activeTransform = {x: 0, y: 0};\r\n    this._passiveTransform = {x: 0, y: 0};\r\n  }\r\n\r\n  /**\r\n   * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\r\n   * @param handle Handle element that should be disabled.\r\n   */\r\n  disableHandle(handle: HTMLElement) {\r\n    if (this._handles.indexOf(handle) > -1) {\r\n      this._disabledHandles.add(handle);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enables a handle, if it has been disabled.\r\n   * @param handle Handle element to be enabled.\r\n   */\r\n  enableHandle(handle: HTMLElement) {\r\n    this._disabledHandles.delete(handle);\r\n  }\r\n\r\n  /** Sets the layout direction of the draggable item. */\r\n  withDirection(direction: Direction): this {\r\n    this._direction = direction;\r\n    return this;\r\n  }\r\n\r\n  /** Sets the container that the item is part of. */\r\n  _withDropContainer(container: DropListRef) {\r\n    this._dropContainer = container;\r\n  }\r\n\r\n  /**\r\n   * Gets the current position in pixels the draggable outside of a drop container.\r\n   */\r\n  getFreeDragPosition(): Readonly<Point> {\r\n    return {x: this._passiveTransform.x, y: this._passiveTransform.y};\r\n  }\r\n\r\n  /**\r\n   * Sets the current position in pixels the draggable outside of a drop container.\r\n   * @param value New position to be set.\r\n   */\r\n  setFreeDragPosition(value: Point): this {\r\n    this._activeTransform = {x: 0, y: 0};\r\n    this._passiveTransform.x = value.x;\r\n    this._passiveTransform.y = value.y;\r\n\r\n    if (!this._dropContainer) {\r\n      this._applyRootElementTransform(value.x, value.y);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** Unsubscribes from the global subscriptions. */\r\n  private _removeSubscriptions() {\r\n    this._pointerMoveSubscription.unsubscribe();\r\n    this._pointerUpSubscription.unsubscribe();\r\n  }\r\n\r\n  /** Destroys the preview element and its ViewRef. */\r\n  private _destroyPreview() {\r\n    if (this._preview) {\r\n      removeElement(this._preview);\r\n    }\r\n\r\n    if (this._previewRef) {\r\n      this._previewRef.destroy();\r\n    }\r\n\r\n    this._preview = this._previewRef = null!;\r\n  }\r\n\r\n  /** Destroys the placeholder element and its ViewRef. */\r\n  private _destroyPlaceholder() {\r\n    if (this._placeholder) {\r\n      removeElement(this._placeholder);\r\n    }\r\n\r\n    if (this._placeholderRef) {\r\n      this._placeholderRef.destroy();\r\n    }\r\n\r\n    this._placeholder = this._placeholderRef = null!;\r\n  }\r\n\r\n  /** Handler for the `mousedown`/`touchstart` events. */\r\n  private _pointerDown = (event: MouseEvent | TouchEvent) => {\r\n    this.beforeStarted.next();\r\n\r\n    // Delegate the event based on whether it started from a handle or the element itself.\r\n    if (this._handles.length) {\r\n      const targetHandle = this._handles.find(handle => {\r\n        const target = event.target;\r\n        return !!target && (target === handle || handle.contains(target as HTMLElement));\r\n      });\r\n\r\n      if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\r\n        this._initializeDragSequence(targetHandle, event);\r\n      }\r\n    } else if (!this.disabled) {\r\n      this._initializeDragSequence(this._rootElement, event);\r\n    }\r\n  }\r\n\r\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\r\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\r\n    if (!this._hasStartedDragging) {\r\n      const pointerPosition = this._getPointerPositionOnPage(event);\r\n      const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\r\n      const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\r\n      const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\r\n\r\n      // Only start dragging after the user has moved more than the minimum distance in either\r\n      // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\r\n      // in the `pointerMove` subscription, because we're not guaranteed to have one move event\r\n      // per pixel of movement (e.g. if the user moves their pointer quickly).\r\n      if (isOverThreshold) {\r\n        const isDelayElapsed = Date.now() >= this._dragStartTime + (this.dragStartDelay || 0);\r\n        if (!isDelayElapsed) {\r\n          this._endDragSequence(event);\r\n          return;\r\n        }\r\n\r\n        // We need to prevent default here in case the pointer move starts a scroll sequence.\r\n        // If we do not prevent the scroll from starting, then we won't be able to prevent future\r\n        // touchemove events.\r\n        event.preventDefault();\r\n\r\n        // Prevent other drag sequences from starting while something in the container is still\r\n        // being dragged. This can happen while we're waiting for the drop animation to finish\r\n        // and can cause errors, because some elements might still be moving around.\r\n        if (!this._dropContainer || !this._dropContainer.isDragging()) {\r\n          this._hasStartedDragging = true;\r\n          this._ngZone.run(() => this._startDragSequence(event));\r\n        }\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    // We only need the preview dimensions if we have a boundary element.\r\n    if (this._boundaryElement) {\r\n      // Cache the preview element rect if we haven't cached it already or if\r\n      // we cached it too early before the element dimensions were computed.\r\n      if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\r\n        this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\r\n      }\r\n    }\r\n\r\n    const constrainedPointerPosition = this._getConstrainedPointerPosition(event);\r\n    this._hasMoved = true;\r\n    event.preventDefault();\r\n    this._updatePointerDirectionDelta(constrainedPointerPosition);\r\n\r\n    if (this._dropContainer) {\r\n      this._updateActiveDropContainer(constrainedPointerPosition);\r\n    } else {\r\n      const activeTransform = this._activeTransform;\r\n      activeTransform.x =\r\n          constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\r\n      activeTransform.y =\r\n          constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\r\n\r\n      this._applyRootElementTransform(activeTransform.x, activeTransform.y);\r\n\r\n      // Apply transform as attribute if dragging and svg element to work for IE\r\n      if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\r\n        const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\r\n        this._rootElement.setAttribute('transform', appliedTransform);\r\n      }\r\n    }\r\n\r\n    // Since this event gets fired for every pixel while dragging, we only\r\n    // want to fire it if the consumer opted into it. Also we have to\r\n    // re-enter the zone because we run all of the events on the outside.\r\n    if (this._moveEvents.observers.length) {\r\n      this._ngZone.run(() => {\r\n        this._moveEvents.next({\r\n          source: this,\r\n          pointerPosition: constrainedPointerPosition,\r\n          event,\r\n          distance: this._getDragDistance(constrainedPointerPosition),\r\n          delta: this._pointerDirectionDelta\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\r\n  private _pointerUp = (event: MouseEvent | TouchEvent) => {\r\n    this._endDragSequence(event);\r\n  }\r\n\r\n  /**\r\n   * Clears subscriptions and stops the dragging sequence.\r\n   * @param event Browser event object that ended the sequence.\r\n   */\r\n  private _endDragSequence(event: MouseEvent | TouchEvent) {\r\n    toggleNativeDragInteractions(this._rootElement, true);\r\n\r\n    // Note that here we use `isDragging` from the service, rather than from `this`.\r\n    // The difference is that the one from the service reflects whether a dragging sequence\r\n    // has been initiated, whereas the one on `this` includes whether the user has passed\r\n    // the minimum dragging threshold.\r\n    if (!this._dragDropRegistry.isDragging(this)) {\r\n      return;\r\n    }\r\n\r\n    this._removeSubscriptions();\r\n    this._dragDropRegistry.stopDragging(this);\r\n\r\n    if (this._handles) {\r\n      this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\r\n    }\r\n\r\n    if (!this._hasStartedDragging) {\r\n      return;\r\n    }\r\n\r\n    this.released.next({source: this});\r\n\r\n    if (!this._dropContainer) {\r\n      // Convert the active transform into a passive one. This means that next time\r\n      // the user starts dragging the item, its position will be calculated relatively\r\n      // to the new passive transform.\r\n      this._passiveTransform.x = this._activeTransform.x;\r\n      this._passiveTransform.y = this._activeTransform.y;\r\n      this._ngZone.run(() => {\r\n        this.ended.next({\r\n          source: this,\r\n          distance: this._getDragDistance(this._getPointerPositionOnPage(event))\r\n        });\r\n      });\r\n      this._dragDropRegistry.stopDragging(this);\r\n      return;\r\n    }\r\n\r\n    this._animatePreviewToPlaceholder().then(() => {\r\n      this._cleanupDragArtifacts(event);\r\n      this._dragDropRegistry.stopDragging(this);\r\n    });\r\n  }\r\n\r\n  /** Starts the dragging sequence. */\r\n  private _startDragSequence(event: MouseEvent | TouchEvent) {\r\n    this._dragDropRegistry.startDragging(this);\r\n\r\n    // Emit the event on the item before the one on the container.\r\n    this.started.next({source: this});\r\n\r\n    if (isTouchEvent(event)) {\r\n      this._lastTouchEventTime = Date.now();\r\n    }\r\n\r\n    this._toggleNativeDragInteractions();\r\n\r\n    if (this._dropContainer) {\r\n      const element = this._rootElement;\r\n\r\n      // Grab the `nextSibling` before the preview and placeholder\r\n      // have been created so we don't get the preview by accident.\r\n      this._nextSibling = element.nextSibling;\r\n\r\n      const preview = this._preview = this._createPreviewElement();\r\n      const placeholder = this._placeholder = this._createPlaceholderElement();\r\n\r\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\r\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\r\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\r\n      element.style.display = 'none';\r\n      this._document.body.appendChild(element.parentNode!.replaceChild(placeholder, element));\r\n      getPreviewInsertionPoint(this._document).appendChild(preview);\r\n      this._dropContainer.start();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets up the different variables and subscriptions\r\n   * that will be necessary for the dragging sequence.\r\n   * @param referenceElement Element that started the drag sequence.\r\n   * @param event Browser event object that started the sequence.\r\n   */\r\n  private _initializeDragSequence(referenceElement: HTMLElement, event: MouseEvent | TouchEvent) {\r\n    // Always stop propagation for the event that initializes\r\n    // the dragging sequence, in order to prevent it from potentially\r\n    // starting another sequence for a draggable parent somewhere up the DOM tree.\r\n    event.stopPropagation();\r\n\r\n    const isDragging = this.isDragging();\r\n    const isTouchSequence = isTouchEvent(event);\r\n    const isAuxiliaryMouseButton = !isTouchSequence && (event as MouseEvent).button !== 0;\r\n    const rootElement = this._rootElement;\r\n    const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\r\n      this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\r\n\r\n    // If the event started from an element with the native HTML drag&drop, it'll interfere\r\n    // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\r\n    // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\r\n    // it's flaky and it fails if the user drags it away quickly. Also note that we only want\r\n    // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\r\n    // events from firing on touch devices.\r\n    if (event.target && (event.target as HTMLElement).draggable && event.type === 'mousedown') {\r\n      event.preventDefault();\r\n    }\r\n\r\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\r\n    if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\r\n      return;\r\n    }\r\n\r\n    // If we've got handles, we need to disable the tap highlight on the entire root element,\r\n    // otherwise iOS will still add it, even though all the drag interactions on the handle\r\n    // are disabled.\r\n    if (this._handles.length) {\r\n      this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\r\n      rootElement.style.webkitTapHighlightColor = 'transparent';\r\n    }\r\n\r\n    this._hasStartedDragging = this._hasMoved = false;\r\n    this._initialContainer = this._dropContainer!;\r\n\r\n    // Avoid multiple subscriptions and memory leaks when multi touch\r\n    // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\r\n    this._removeSubscriptions();\r\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\r\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\r\n\r\n    this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\r\n\r\n    if (this._boundaryElement) {\r\n      this._boundaryRect = this._boundaryElement.getBoundingClientRect();\r\n    }\r\n\r\n    // If we have a custom preview template, the element won't be visible anyway so we avoid the\r\n    // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\r\n    this._pickupPositionInElement = this._previewTemplate && this._previewTemplate.template ?\r\n      {x: 0, y: 0} :\r\n      this._getPointerPositionInElement(referenceElement, event);\r\n    const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\r\n    this._pointerDirectionDelta = {x: 0, y: 0};\r\n    this._pointerPositionAtLastDirectionChange = {x: pointerPosition.x, y: pointerPosition.y};\r\n    this._dragStartTime = Date.now();\r\n    this._dragDropRegistry.initializeDragging(this, event);\r\n  }\r\n\r\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\r\n  private _cleanupDragArtifacts(event: MouseEvent | TouchEvent) {\r\n    // Restore the element's visibility and insert it at its old position in the DOM.\r\n    // It's important that we maintain the position, because moving the element around in the DOM\r\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\r\n    // while moving the existing elements in all other cases.\r\n    this._rootElement.style.display = '';\r\n\r\n    if (this._nextSibling) {\r\n      this._nextSibling.parentNode!.insertBefore(this._rootElement, this._nextSibling);\r\n    } else {\r\n      coerceElement(this._initialContainer.element).appendChild(this._rootElement);\r\n    }\r\n\r\n    this._destroyPreview();\r\n    this._destroyPlaceholder();\r\n    this._boundaryRect = this._previewRect = undefined;\r\n\r\n    // Re-enter the NgZone since we bound `document` events on the outside.\r\n    this._ngZone.run(() => {\r\n      const container = this._dropContainer!;\r\n      const currentIndex = container.getItemIndex(this);\r\n      const pointerPosition = this._getPointerPositionOnPage(event);\r\n      const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\r\n      const isPointerOverContainer = container._isOverContainer(\r\n        pointerPosition.x, pointerPosition.y);\r\n\r\n      this.ended.next({source: this, distance});\r\n      this.dropped.next({\r\n        item: this,\r\n        currentIndex,\r\n        previousIndex: this._initialContainer.getItemIndex(this),\r\n        container: container,\r\n        previousContainer: this._initialContainer,\r\n        isPointerOverContainer,\r\n        distance\r\n      });\r\n      container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer, distance);\r\n      this._dropContainer = this._initialContainer;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates the item's position in its drop container, or moves it\r\n   * into a new one, depending on its current drag position.\r\n   */\r\n  private _updateActiveDropContainer({x, y}: Point) {\r\n    // Drop container that draggable has been moved into.\r\n    let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\r\n\r\n    // If we couldn't find a new container to move the item into, and the item has left it's\r\n    // initial container, check whether the it's over the initial container. This handles the\r\n    // case where two containers are connected one way and the user tries to undo dragging an\r\n    // item into a new container.\r\n    if (!newContainer && this._dropContainer !== this._initialContainer &&\r\n        this._initialContainer._isOverContainer(x, y)) {\r\n      newContainer = this._initialContainer;\r\n    }\r\n\r\n    if (newContainer && newContainer !== this._dropContainer) {\r\n      this._ngZone.run(() => {\r\n        // Notify the old container that the item has left.\r\n        this.exited.next({item: this, container: this._dropContainer!});\r\n        this._dropContainer!.exit(this);\r\n        // Notify the new container that the item has entered.\r\n        this._dropContainer = newContainer!;\r\n        this._dropContainer.enter(this, x, y);\r\n        this.entered.next({\r\n          item: this,\r\n          container: newContainer!,\r\n          currentIndex: newContainer!.getItemIndex(this)\r\n        });\r\n      });\r\n    }\r\n\r\n    this._dropContainer!._sortItem(this, x, y, this._pointerDirectionDelta);\r\n    this._preview.style.transform =\r\n        getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\r\n  }\r\n\r\n  /**\r\n   * Creates the element that will be rendered next to the user's pointer\r\n   * and will be used as a preview of the element that is being dragged.\r\n   */\r\n  private _createPreviewElement(): HTMLElement {\r\n    const previewConfig = this._previewTemplate;\r\n    const previewTemplate = previewConfig ? previewConfig.template : null;\r\n    let preview: HTMLElement;\r\n\r\n    if (previewTemplate) {\r\n      const viewRef = previewConfig!.viewContainer.createEmbeddedView(previewTemplate,\r\n                                                                      previewConfig!.context);\r\n      preview = viewRef.rootNodes[0];\r\n      this._previewRef = viewRef;\r\n      preview.style.transform =\r\n          getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\r\n    } else {\r\n      const element = this._rootElement;\r\n      const elementRect = element.getBoundingClientRect();\r\n\r\n      preview = deepCloneNode(element);\r\n      preview.style.width = `${elementRect.width}px`;\r\n      preview.style.height = `${elementRect.height}px`;\r\n      preview.style.transform = getTransform(elementRect.left, elementRect.top);\r\n    }\r\n\r\n    extendStyles(preview.style, {\r\n      // It's important that we disable the pointer events on the preview, because\r\n      // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\r\n      pointerEvents: 'none',\r\n      position: 'fixed',\r\n      top: '0',\r\n      left: '0',\r\n      zIndex: '1000'\r\n    });\r\n\r\n    toggleNativeDragInteractions(preview, false);\r\n\r\n    preview.classList.add('cdk-drag-preview');\r\n    preview.setAttribute('dir', this._direction);\r\n\r\n    return preview;\r\n  }\r\n\r\n  /**\r\n   * Animates the preview element from its current position to the location of the drop placeholder.\r\n   * @returns Promise that resolves when the animation completes.\r\n   */\r\n  private _animatePreviewToPlaceholder(): Promise<void> {\r\n    // If the user hasn't moved yet, the transitionend event won't fire.\r\n    if (!this._hasMoved) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    const placeholderRect = this._placeholder.getBoundingClientRect();\r\n\r\n    // Apply the class that adds a transition to the preview.\r\n    this._preview.classList.add('cdk-drag-animating');\r\n\r\n    // Move the preview to the placeholder position.\r\n    this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\r\n\r\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\r\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\r\n    // apply its style, we take advantage of the available info to figure out whether we need to\r\n    // bind the event in the first place.\r\n    const duration = getTransformTransitionDurationInMs(this._preview);\r\n\r\n    if (duration === 0) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    return this._ngZone.runOutsideAngular(() => {\r\n      return new Promise(resolve => {\r\n        const handler = ((event: TransitionEvent) => {\r\n          if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\r\n            this._preview.removeEventListener('transitionend', handler);\r\n            resolve();\r\n            clearTimeout(timeout);\r\n          }\r\n        }) as EventListenerOrEventListenerObject;\r\n\r\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\r\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\r\n        // fire if the transition hasn't completed when it was supposed to.\r\n        const timeout = setTimeout(handler as Function, duration * 1.5);\r\n        this._preview.addEventListener('transitionend', handler);\r\n      });\r\n    });\r\n  }\r\n\r\n  /** Creates an element that will be shown instead of the current element while dragging. */\r\n  private _createPlaceholderElement(): HTMLElement {\r\n    const placeholderConfig = this._placeholderTemplate;\r\n    const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\r\n    let placeholder: HTMLElement;\r\n\r\n    if (placeholderTemplate) {\r\n      this._placeholderRef = placeholderConfig!.viewContainer.createEmbeddedView(\r\n        placeholderTemplate,\r\n        placeholderConfig!.context\r\n      );\r\n      placeholder = this._placeholderRef.rootNodes[0];\r\n    } else {\r\n      placeholder = deepCloneNode(this._rootElement);\r\n    }\r\n\r\n    placeholder.classList.add('cdk-drag-placeholder');\r\n    return placeholder;\r\n  }\r\n\r\n  /**\r\n   * Figures out the coordinates at which an element was picked up.\r\n   * @param referenceElement Element that initiated the dragging.\r\n   * @param event Event that initiated the dragging.\r\n   */\r\n  private _getPointerPositionInElement(referenceElement: HTMLElement,\r\n                                       event: MouseEvent | TouchEvent): Point {\r\n    const elementRect = this._rootElement.getBoundingClientRect();\r\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\r\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\r\n    const point = isTouchEvent(event) ? event.targetTouches[0] : event;\r\n    const x = point.pageX - referenceRect.left - this._scrollPosition.left;\r\n    const y = point.pageY - referenceRect.top - this._scrollPosition.top;\r\n\r\n    return {\r\n      x: referenceRect.left - elementRect.left + x,\r\n      y: referenceRect.top - elementRect.top + y\r\n    };\r\n  }\r\n\r\n  /** Determines the point of the page that was touched by the user. */\r\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\r\n    // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\r\n    const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\r\n\r\n    return {\r\n      x: point.pageX - this._scrollPosition.left,\r\n      y: point.pageY - this._scrollPosition.top\r\n    };\r\n  }\r\n\r\n\r\n  /** Gets the pointer position on the page, accounting for any position constraints. */\r\n  private _getConstrainedPointerPosition(event: MouseEvent | TouchEvent): Point {\r\n    const point = this._getPointerPositionOnPage(event);\r\n    const constrainedPoint = this.constrainPosition ? this.constrainPosition(point) : point;\r\n    const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\r\n\r\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\r\n      constrainedPoint.y = this._pickupPositionOnPage.y;\r\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\r\n      constrainedPoint.x = this._pickupPositionOnPage.x;\r\n    }\r\n\r\n    if (this._boundaryRect) {\r\n      const {x: pickupX, y: pickupY} = this._pickupPositionInElement;\r\n      const boundaryRect = this._boundaryRect;\r\n      const previewRect = this._previewRect!;\r\n      const minY = boundaryRect.top + pickupY;\r\n      const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\r\n      const minX = boundaryRect.left + pickupX;\r\n      const maxX = boundaryRect.right - (previewRect.width - pickupX);\r\n\r\n      constrainedPoint.x = clamp(constrainedPoint.x, minX, maxX);\r\n      constrainedPoint.y = clamp(constrainedPoint.y, minY, maxY);\r\n    }\r\n\r\n    return constrainedPoint;\r\n  }\r\n\r\n\r\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\r\n  private _updatePointerDirectionDelta(pointerPositionOnPage: Point) {\r\n    const {x, y} = pointerPositionOnPage;\r\n    const delta = this._pointerDirectionDelta;\r\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\r\n\r\n    // Amount of pixels the user has dragged since the last time the direction changed.\r\n    const changeX = Math.abs(x - positionSinceLastChange.x);\r\n    const changeY = Math.abs(y - positionSinceLastChange.y);\r\n\r\n    // Because we handle pointer events on a per-pixel basis, we don't want the delta\r\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\r\n    // To make the delta more consistent, we track how much the user has moved since the last\r\n    // delta change and we only update it after it has reached a certain threshold.\r\n    if (changeX > this._config.pointerDirectionChangeThreshold) {\r\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\r\n      positionSinceLastChange.x = x;\r\n    }\r\n\r\n    if (changeY > this._config.pointerDirectionChangeThreshold) {\r\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\r\n      positionSinceLastChange.y = y;\r\n    }\r\n\r\n    return delta;\r\n  }\r\n\r\n  /** Toggles the native drag interactions, based on how many handles are registered. */\r\n  private _toggleNativeDragInteractions() {\r\n    if (!this._rootElement || !this._handles) {\r\n      return;\r\n    }\r\n\r\n    const shouldEnable = this._handles.length > 0 || !this.isDragging();\r\n\r\n    if (shouldEnable !== this._nativeInteractionsEnabled) {\r\n      this._nativeInteractionsEnabled = shouldEnable;\r\n      toggleNativeDragInteractions(this._rootElement, shouldEnable);\r\n    }\r\n  }\r\n\r\n  /** Removes the manually-added event listeners from the root element. */\r\n  private _removeRootElementListeners(element: HTMLElement) {\r\n    element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\r\n    element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\r\n  }\r\n\r\n  /**\r\n   * Applies a `transform` to the root element, taking into account any existing transforms on it.\r\n   * @param x New transform value along the X axis.\r\n   * @param y New transform value along the Y axis.\r\n   */\r\n  private _applyRootElementTransform(x: number, y: number) {\r\n    const transform = getTransform(x, y);\r\n\r\n    // Cache the previous transform amount only after the first drag sequence, because\r\n    // we don't want our own transforms to stack on top of each other.\r\n    if (this._initialTransform == null) {\r\n      this._initialTransform = this._rootElement.style.transform || '';\r\n    }\r\n\r\n    // Preserve the previous `transform` value, if there was one. Note that we apply our own\r\n    // transform before the user's, because things like rotation can affect which direction\r\n    // the element will be translated towards.\r\n    this._rootElement.style.transform = this._initialTransform ?\r\n      transform + ' ' + this._initialTransform  : transform;\r\n  }\r\n\r\n  /**\r\n   * Gets the distance that the user has dragged during the current drag sequence.\r\n   * @param currentPosition Current position of the user's pointer.\r\n   */\r\n  private _getDragDistance(currentPosition: Point): Point {\r\n    const pickupPosition = this._pickupPositionOnPage;\r\n\r\n    if (pickupPosition) {\r\n      return {x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y};\r\n    }\r\n\r\n    return {x: 0, y: 0};\r\n  }\r\n}\r\n\r\n/** Point on the page or within an element. */\r\nexport interface Point {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\n/**\r\n * Gets a 3d `transform` that can be applied to an element.\r\n * @param x Desired position of the element along the X axis.\r\n * @param y Desired position of the element along the Y axis.\r\n */\r\nfunction getTransform(x: number, y: number): string {\r\n  // Round the transforms since some browsers will\r\n  // blur the elements for sub-pixel transforms.\r\n  return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\r\n}\r\n\r\n/** Creates a deep clone of an element. */\r\nfunction deepCloneNode(node: HTMLElement): HTMLElement {\r\n  const clone = node.cloneNode(true) as HTMLElement;\r\n  const descendantsWithId = clone.querySelectorAll('[id]');\r\n  const descendantCanvases = node.querySelectorAll('canvas');\r\n\r\n  // Remove the `id` to avoid having multiple elements with the same id on the page.\r\n  clone.removeAttribute('id');\r\n\r\n  for (let i = 0; i < descendantsWithId.length; i++) {\r\n    descendantsWithId[i].removeAttribute('id');\r\n  }\r\n\r\n  // `cloneNode` won't transfer the content of `canvas` elements so we have to do it ourselves.\r\n  // We match up the cloned canvas to their sources using their index in the DOM.\r\n  if (descendantCanvases.length) {\r\n    const cloneCanvases = clone.querySelectorAll('canvas');\r\n\r\n    for (let i = 0; i < descendantCanvases.length; i++) {\r\n      const correspondingCloneContext = cloneCanvases[i].getContext('2d');\r\n\r\n      if (correspondingCloneContext) {\r\n        correspondingCloneContext.drawImage(descendantCanvases[i], 0, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  return clone;\r\n}\r\n\r\n/** Clamps a value between a minimum and a maximum. */\r\nfunction clamp(value: number, min: number, max: number) {\r\n  return Math.max(min, Math.min(max, value));\r\n}\r\n\r\n/**\r\n * Helper to remove an element from the DOM and to do all the necessary null checks.\r\n * @param element Element to be removed.\r\n */\r\nfunction removeElement(element: HTMLElement | null) {\r\n  if (element && element.parentNode) {\r\n    element.parentNode.removeChild(element);\r\n  }\r\n}\r\n\r\n/** Determines whether an event is a touch event. */\r\nfunction isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\r\n  // This function is called for every pixel that the user has dragged so we need it to be\r\n  // as fast as possible. Since we only bind mouse events and touch events, we can assume\r\n  // that if the event's name starts with `t`, it's a touch event.\r\n  return event.type[0] === 't';\r\n}\r\n\r\n/** Gets the element into which the drag preview should be inserted. */\r\nfunction getPreviewInsertionPoint(documentRef: any): HTMLElement {\r\n  // We can't use the body if the user is in fullscreen mode,\r\n  // because the preview will render under the fullscreen element.\r\n  // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\r\n  return documentRef.fullscreenElement ||\r\n         documentRef.webkitFullscreenElement ||\r\n         documentRef.mozFullScreenElement ||\r\n         documentRef.msFullscreenElement ||\r\n         documentRef.body;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Moves an item one index in an array to another.\r\n * @param array Array in which to move the item.\r\n * @param fromIndex Starting index of the item.\r\n * @param toIndex Index to which the item should be moved.\r\n */\r\nexport function moveItemInArray<T = any>(array: T[], fromIndex: number, toIndex: number): void {\r\n  const from = clamp(fromIndex, array.length - 1);\r\n  const to = clamp(toIndex, array.length - 1);\r\n\r\n  if (from === to) {\r\n    return;\r\n  }\r\n\r\n  const target = array[from];\r\n  const delta = to < from ? -1 : 1;\r\n\r\n  for (let i = from; i !== to; i += delta) {\r\n    array[i] = array[i + delta];\r\n  }\r\n\r\n  array[to] = target;\r\n}\r\n\r\n\r\n/**\r\n * Moves an item from one array to another.\r\n * @param currentArray Array from which to transfer the item.\r\n * @param targetArray Array into which to put the item.\r\n * @param currentIndex Index of the item in its current array.\r\n * @param targetIndex Index at which to insert the item.\r\n */\r\nexport function transferArrayItem<T = any>(currentArray: T[],\r\n                                           targetArray: T[],\r\n                                           currentIndex: number,\r\n                                           targetIndex: number): void {\r\n  const from = clamp(currentIndex, currentArray.length - 1);\r\n  const to = clamp(targetIndex, targetArray.length);\r\n\r\n  if (currentArray.length) {\r\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\r\n  }\r\n}\r\n\r\n/**\r\n * Copies an item from one array to another, leaving it in its\r\n * original position in current array.\r\n * @param currentArray Array from which to copy the item.\r\n * @param targetArray Array into which is copy the item.\r\n * @param currentIndex Index of the item in its current array.\r\n * @param targetIndex Index at which to insert the item.\r\n *\r\n */\r\nexport function copyArrayItem<T = any>(currentArray: T[],\r\n                                       targetArray: T[],\r\n                                       currentIndex: number,\r\n                                       targetIndex: number): void {\r\n  const to = clamp(targetIndex, targetArray.length);\r\n\r\n  if (currentArray.length) {\r\n    targetArray.splice(to, 0, currentArray[currentIndex]);\r\n  }\r\n}\r\n\r\n/** Clamps a number between zero and a maximum. */\r\nfunction clamp(value: number, max: number): number {\r\n  return Math.max(0, Math.min(max, value));\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ElementRef} from '@angular/core';\r\nimport {DragDropRegistry} from './drag-drop-registry';\r\nimport {Direction} from '@angular/cdk/bidi';\r\nimport {coerceElement} from '@angular/cdk/coercion';\r\nimport {Subject} from 'rxjs';\r\nimport {moveItemInArray} from './drag-utils';\r\nimport {DragRefInternal as DragRef, Point} from './drag-ref';\r\n\r\n\r\n/** Counter used to generate unique ids for drop refs. */\r\nlet _uniqueIdCounter = 0;\r\n\r\n/**\r\n * Proximity, as a ratio to width/height, at which a\r\n * dragged item will affect the drop container.\r\n */\r\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\r\n\r\n/**\r\n * Entry in the position cache for draggable items.\r\n * @docs-private\r\n */\r\ninterface CachedItemPosition {\r\n  /** Instance of the drag item. */\r\n  drag: DragRef;\r\n  /** Dimensions of the item. */\r\n  clientRect: ClientRect;\r\n  /** Amount by which the item has been moved since dragging started. */\r\n  offset: number;\r\n}\r\n\r\n/**\r\n * Internal compile-time-only representation of a `DropListRef`.\r\n * Used to avoid circular import issues between the `DropListRef` and the `DragRef`.\r\n * @docs-private\r\n */\r\nexport interface DropListRefInternal extends DropListRef {}\r\n\r\n/**\r\n * Reference to a drop list. Used to manipulate or dispose of the container.\r\n * @docs-private\r\n */\r\nexport class DropListRef<T = any> {\r\n  private _document: Document;\r\n\r\n  /** Element that the drop list is attached to. */\r\n  element: HTMLElement | ElementRef<HTMLElement>;\r\n\r\n  /**\r\n   * Unique ID for the drop list.\r\n   * @deprecated No longer being used. To be removed.\r\n   * @breaking-change 8.0.0\r\n   */\r\n  id = `cdk-drop-list-ref-${_uniqueIdCounter++}`;\r\n\r\n  /** Whether starting a dragging sequence from this container is disabled. */\r\n  disabled: boolean = false;\r\n\r\n  /** Whether sorting items within the list is disabled. */\r\n  sortingDisabled: boolean = true;\r\n\r\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\r\n  lockAxis: 'x' | 'y';\r\n\r\n  /**\r\n   * Function that is used to determine whether an item\r\n   * is allowed to be moved into a drop container.\r\n   */\r\n  enterPredicate: (drag: DragRef, drop: DropListRef) => boolean = () => true;\r\n\r\n  /** Emits right before dragging has started. */\r\n  beforeStarted = new Subject<void>();\r\n\r\n  /**\r\n   * Emits when the user has moved a new drag item into this container.\r\n   */\r\n  entered = new Subject<{item: DragRef, container: DropListRef, currentIndex: number}>();\r\n\r\n  /**\r\n   * Emits when the user removes an item from the container\r\n   * by dragging it into another container.\r\n   */\r\n  exited = new Subject<{item: DragRef, container: DropListRef}>();\r\n\r\n  /** Emits when the user drops an item inside the container. */\r\n  dropped = new Subject<{\r\n    item: DragRef,\r\n    currentIndex: number,\r\n    previousIndex: number,\r\n    container: DropListRef,\r\n    previousContainer: DropListRef,\r\n    isPointerOverContainer: boolean,\r\n    distance: Point;\r\n  }>();\r\n\r\n  /** Emits as the user is swapping items while actively dragging. */\r\n  sorted = new Subject<{\r\n    previousIndex: number,\r\n    currentIndex: number,\r\n    container: DropListRef,\r\n    item: DragRef\r\n  }>();\r\n\r\n  /** Arbitrary data that can be attached to the drop list. */\r\n  data: T;\r\n\r\n  /** Whether an item in the list is being dragged. */\r\n  private _isDragging = false;\r\n\r\n  /** Cache of the dimensions of all the items inside the container. */\r\n  private _itemPositions: CachedItemPosition[] = [];\r\n\r\n  /** Cached `ClientRect` of the drop list. */\r\n  private _clientRect: ClientRect;\r\n\r\n  /**\r\n   * Draggable items that are currently active inside the container. Includes the items\r\n   * from `_draggables`, as well as any items that have been dragged in, but haven't\r\n   * been dropped yet.\r\n   */\r\n  private _activeDraggables: DragRef[];\r\n\r\n  /**\r\n   * Keeps track of the item that was last swapped with the dragged item, as\r\n   * well as what direction the pointer was moving in when the swap occured.\r\n   */\r\n  private _previousSwap = {drag: null as DragRef | null, delta: 0};\r\n\r\n  /** Draggable items in the container. */\r\n  private _draggables: ReadonlyArray<DragRef>;\r\n\r\n  /** Drop lists that are connected to the current one. */\r\n  private _siblings: ReadonlyArray<DropListRef> = [];\r\n\r\n  /** Direction in which the list is oriented. */\r\n  private _orientation: 'horizontal' | 'vertical' = 'vertical';\r\n\r\n  /** Connected siblings that currently have a dragged item. */\r\n  private _activeSiblings = new Set<DropListRef>();\r\n\r\n  /** Layout direction of the drop list. */\r\n  private _direction: Direction = 'ltr';\r\n\r\n  constructor(\r\n    element: ElementRef<HTMLElement> | HTMLElement,\r\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\r\n    _document: any) {\r\n    _dragDropRegistry.registerDropContainer(this);\r\n    this._document = _document;\r\n    this.element = element instanceof ElementRef ? element.nativeElement : element;\r\n  }\r\n\r\n  /** Removes the drop list functionality from the DOM element. */\r\n  dispose() {\r\n    this.beforeStarted.complete();\r\n    this.entered.complete();\r\n    this.exited.complete();\r\n    this.dropped.complete();\r\n    this.sorted.complete();\r\n    this._activeSiblings.clear();\r\n    this._dragDropRegistry.removeDropContainer(this);\r\n  }\r\n\r\n  /** Whether an item from this list is currently being dragged. */\r\n  isDragging() {\r\n    return this._isDragging;\r\n  }\r\n\r\n  /** Starts dragging an item. */\r\n  start(): void {\r\n    this.beforeStarted.next();\r\n    this._isDragging = true;\r\n    this._cacheItems();\r\n    this._siblings.forEach(sibling => sibling._startReceiving(this));\r\n  }\r\n\r\n  /**\r\n   * Emits an event to indicate that the user moved an item into the container.\r\n   * @param item Item that was moved into the container.\r\n   * @param pointerX Position of the item along the X axis.\r\n   * @param pointerY Position of the item along the Y axis.\r\n   */\r\n  enter(item: DragRef, pointerX: number, pointerY: number): void {\r\n    this.start();\r\n\r\n    // If sorting is disabled, we want the item to return to its starting\r\n    // position if the user is returning it to its initial container.\r\n    let newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\r\n\r\n    if (newIndex === -1) {\r\n      // We use the coordinates of where the item entered the drop\r\n      // zone to figure out at which index it should be inserted.\r\n      newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\r\n    }\r\n\r\n    const activeDraggables = this._activeDraggables;\r\n    const currentIndex = activeDraggables.indexOf(item);\r\n    const placeholder = item.getPlaceholderElement();\r\n    let newPositionReference: DragRef | undefined = activeDraggables[newIndex];\r\n\r\n    // If the item at the new position is the same as the item that is being dragged,\r\n    // it means that we're trying to restore the item to its initial position. In this\r\n    // case we should use the next item from the list as the reference.\r\n    if (newPositionReference === item) {\r\n      newPositionReference = activeDraggables[newIndex + 1];\r\n    }\r\n\r\n    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\r\n    // into another container and back again), we have to ensure that it isn't duplicated.\r\n    if (currentIndex > -1) {\r\n      activeDraggables.splice(currentIndex, 1);\r\n    }\r\n\r\n    // Don't use items that are being dragged as a reference, because\r\n    // their element has been moved down to the bottom of the body.\r\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\r\n      const element = newPositionReference.getRootElement();\r\n      element.parentElement!.insertBefore(placeholder, element);\r\n      activeDraggables.splice(newIndex, 0, item);\r\n    } else {\r\n      coerceElement(this.element).appendChild(placeholder);\r\n      activeDraggables.push(item);\r\n    }\r\n\r\n    // The transform needs to be cleared so it doesn't throw off the measurements.\r\n    placeholder.style.transform = '';\r\n\r\n    // Note that the positions were already cached when we called `start` above,\r\n    // but we need to refresh them since the amount of items has changed.\r\n    this._cacheItemPositions();\r\n    this.entered.next({item, container: this, currentIndex: this.getItemIndex(item)});\r\n  }\r\n\r\n  /**\r\n   * Removes an item from the container after it was dragged into another container by the user.\r\n   * @param item Item that was dragged out.\r\n   */\r\n  exit(item: DragRef): void {\r\n    this._reset();\r\n    this.exited.next({item, container: this});\r\n  }\r\n\r\n  /**\r\n   * Drops an item into this container.\r\n   * @param item Item being dropped into the container.\r\n   * @param currentIndex Index at which the item should be inserted.\r\n   * @param previousContainer Container from which the item got dragged in.\r\n   * @param isPointerOverContainer Whether the user's pointer was over the\r\n   *    container when the item was dropped.\r\n   * @param distance Distance the user has dragged since the start of the dragging sequence.\r\n   * @breaking-change 9.0.0 `distance` parameter to become required.\r\n   */\r\n  drop(item: DragRef, currentIndex: number, previousContainer: DropListRef,\r\n    isPointerOverContainer: boolean, distance: Point = {x: 0, y: 0}): void {\r\n    this._reset();\r\n    this.dropped.next({\r\n      item,\r\n      currentIndex,\r\n      previousIndex: previousContainer.getItemIndex(item),\r\n      container: this,\r\n      previousContainer,\r\n      isPointerOverContainer,\r\n      distance\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets the draggable items that are a part of this list.\r\n   * @param items Items that are a part of this list.\r\n   */\r\n  withItems(items: DragRef[]): this {\r\n    this._draggables = items;\r\n    items.forEach(item => item._withDropContainer(this));\r\n\r\n    if (this.isDragging()) {\r\n      this._cacheItems();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** Sets the layout direction of the drop list. */\r\n  withDirection(direction: Direction): this {\r\n    this._direction = direction;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the containers that are connected to this one. When two or more containers are\r\n   * connected, the user will be allowed to transfer items between them.\r\n   * @param connectedTo Other containers that the current containers should be connected to.\r\n   */\r\n  connectedTo(connectedTo: DropListRef[]): this {\r\n    this._siblings = connectedTo.slice();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the orientation of the container.\r\n   * @param orientation New orientation for the container.\r\n   */\r\n  withOrientation(orientation: 'vertical' | 'horizontal'): this {\r\n    this._orientation = orientation;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Figures out the index of an item in the container.\r\n   * @param item Item whose index should be determined.\r\n   */\r\n  getItemIndex(item: DragRef): number {\r\n    if (!this._isDragging) {\r\n      return this._draggables.indexOf(item);\r\n    }\r\n\r\n    // Items are sorted always by top/left in the cache, however they flow differently in RTL.\r\n    // The rest of the logic still stands no matter what orientation we're in, however\r\n    // we need to invert the array when determining the index.\r\n    const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\r\n        this._itemPositions.slice().reverse() : this._itemPositions;\r\n\r\n    return findIndex(items, currentItem => currentItem.drag === item);\r\n  }\r\n\r\n  /**\r\n   * Whether the list is able to receive the item that\r\n   * is currently being dragged inside a connected drop list.\r\n   */\r\n  isReceiving(): boolean {\r\n    return this._activeSiblings.size > 0;\r\n  }\r\n\r\n  /**\r\n   * Sorts an item inside the container based on its position.\r\n   * @param item Item to be sorted.\r\n   * @param pointerX Position of the item along the X axis.\r\n   * @param pointerY Position of the item along the Y axis.\r\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\r\n   */\r\n  _sortItem(item: DragRef, pointerX: number, pointerY: number,\r\n            pointerDelta: {x: number, y: number}): void {\r\n    // Don't sort the item if sorting is disabled or it's out of range.\r\n    if (this.sortingDisabled || !this._isPointerNearDropContainer(pointerX, pointerY)) {\r\n      return;\r\n    }\r\n\r\n    const siblings = this._itemPositions;\r\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\r\n\r\n    if (newIndex === -1 && siblings.length > 0) {\r\n      return;\r\n    }\r\n\r\n    const isHorizontal = this._orientation === 'horizontal';\r\n    const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\r\n    const siblingAtNewPosition = siblings[newIndex];\r\n    const currentPosition = siblings[currentIndex].clientRect;\r\n    const newPosition = siblingAtNewPosition.clientRect;\r\n    const delta = currentIndex > newIndex ? 1 : -1;\r\n\r\n    this._previousSwap.drag = siblingAtNewPosition.drag;\r\n    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\r\n\r\n    // How many pixels the item's placeholder should be offset.\r\n    const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\r\n\r\n    // How many pixels all the other items should be offset.\r\n    const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\r\n\r\n    // Save the previous order of the items before moving the item to its new index.\r\n    // We use this to check whether an item has been moved as a result of the sorting.\r\n    const oldOrder = siblings.slice();\r\n\r\n    // Shuffle the array in place.\r\n    moveItemInArray(siblings, currentIndex, newIndex);\r\n\r\n    this.sorted.next({\r\n      previousIndex: currentIndex,\r\n      currentIndex: newIndex,\r\n      container: this,\r\n      item\r\n    });\r\n\r\n    siblings.forEach((sibling, index) => {\r\n      // Don't do anything if the position hasn't changed.\r\n      if (oldOrder[index] === sibling) {\r\n        return;\r\n      }\r\n\r\n      const isDraggedItem = sibling.drag === item;\r\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\r\n      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\r\n                                              sibling.drag.getRootElement();\r\n\r\n      // Update the offset to reflect the new position.\r\n      sibling.offset += offset;\r\n\r\n      // Since we're moving the items with a `transform`, we need to adjust their cached\r\n      // client rects to reflect their new position, as well as swap their positions in the cache.\r\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\r\n      // elements may be mid-animation which will give us a wrong result.\r\n      if (isHorizontal) {\r\n        // Round the transforms since some browsers will\r\n        // blur the elements, for sub-pixel transforms.\r\n        elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\r\n        adjustClientRect(sibling.clientRect, 0, offset);\r\n      } else {\r\n        elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\r\n        adjustClientRect(sibling.clientRect, offset, 0);\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Caches the position of the drop list. */\r\n  private _cacheOwnPosition() {\r\n    this._clientRect = coerceElement(this.element).getBoundingClientRect();\r\n  }\r\n\r\n  /** Refreshes the position cache of the items and sibling containers. */\r\n  private _cacheItemPositions() {\r\n    const isHorizontal = this._orientation === 'horizontal';\r\n\r\n    this._itemPositions = this._activeDraggables.map(drag => {\r\n      const elementToMeasure = this._dragDropRegistry.isDragging(drag) ?\r\n          // If the element is being dragged, we have to measure the\r\n          // placeholder, because the element is hidden.\r\n          drag.getPlaceholderElement() :\r\n          drag.getRootElement();\r\n      const clientRect = elementToMeasure.getBoundingClientRect();\r\n\r\n      return {\r\n        drag,\r\n        offset: 0,\r\n        // We need to clone the `clientRect` here, because all the values on it are readonly\r\n        // and we need to be able to update them. Also we can't use a spread here, because\r\n        // the values on a `ClientRect` aren't own properties. See:\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\r\n        clientRect: {\r\n          top: clientRect.top,\r\n          right: clientRect.right,\r\n          bottom: clientRect.bottom,\r\n          left: clientRect.left,\r\n          width: clientRect.width,\r\n          height: clientRect.height\r\n        }\r\n      };\r\n    }).sort((a, b) => {\r\n      return isHorizontal ? a.clientRect.left - b.clientRect.left :\r\n                            a.clientRect.top - b.clientRect.top;\r\n    });\r\n  }\r\n\r\n  /** Resets the container to its initial state. */\r\n  private _reset() {\r\n    this._isDragging = false;\r\n\r\n    // TODO(crisbeto): may have to wait for the animations to finish.\r\n    this._activeDraggables.forEach(item => item.getRootElement().style.transform = '');\r\n    this._siblings.forEach(sibling => sibling._stopReceiving(this));\r\n    this._activeDraggables = [];\r\n    this._itemPositions = [];\r\n    this._previousSwap.drag = null;\r\n    this._previousSwap.delta = 0;\r\n  }\r\n\r\n  /**\r\n   * Gets the offset in pixels by which the items that aren't being dragged should be moved.\r\n   * @param currentIndex Index of the item currently being dragged.\r\n   * @param siblings All of the items in the list.\r\n   * @param delta Direction in which the user is moving.\r\n   */\r\n  private _getSiblingOffsetPx(currentIndex: number,\r\n                              siblings: CachedItemPosition[],\r\n                              delta: 1 | -1) {\r\n\r\n    const isHorizontal = this._orientation === 'horizontal';\r\n    const currentPosition = siblings[currentIndex].clientRect;\r\n    const immediateSibling = siblings[currentIndex + delta * -1];\r\n    let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\r\n\r\n    if (immediateSibling) {\r\n      const start = isHorizontal ? 'left' : 'top';\r\n      const end = isHorizontal ? 'right' : 'bottom';\r\n\r\n      // Get the spacing between the start of the current item and the end of the one immediately\r\n      // after it in the direction in which the user is dragging, or vice versa. We add it to the\r\n      // offset in order to push the element to where it will be when it's inline and is influenced\r\n      // by the `margin` of its siblings.\r\n      if (delta === -1) {\r\n        siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\r\n      } else {\r\n        siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\r\n      }\r\n    }\r\n\r\n    return siblingOffset;\r\n  }\r\n\r\n  /**\r\n   * Checks whether the pointer coordinates are close to the drop container.\r\n   * @param pointerX Coordinates along the X axis.\r\n   * @param pointerY Coordinates along the Y axis.\r\n   */\r\n  private _isPointerNearDropContainer(pointerX: number, pointerY: number): boolean {\r\n    const {top, right, bottom, left, width, height} = this._clientRect;\r\n    const xThreshold = width * DROP_PROXIMITY_THRESHOLD;\r\n    const yThreshold = height * DROP_PROXIMITY_THRESHOLD;\r\n\r\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\r\n           pointerX > left - xThreshold && pointerX < right + xThreshold;\r\n  }\r\n\r\n  /**\r\n   * Gets the offset in pixels by which the item that is being dragged should be moved.\r\n   * @param currentPosition Current position of the item.\r\n   * @param newPosition Position of the item where the current item should be moved.\r\n   * @param delta Direction in which the user is moving.\r\n   */\r\n  private _getItemOffsetPx(currentPosition: ClientRect, newPosition: ClientRect, delta: 1 | -1) {\r\n    const isHorizontal = this._orientation === 'horizontal';\r\n    let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\r\n                                    newPosition.top - currentPosition.top;\r\n\r\n    // Account for differences in the item width/height.\r\n    if (delta === -1) {\r\n      itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\r\n                                   newPosition.height - currentPosition.height;\r\n    }\r\n\r\n    return itemOffset;\r\n  }\r\n\r\n  /**\r\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\r\n   * @param item Item that is being sorted.\r\n   * @param pointerX Position of the user's pointer along the X axis.\r\n   * @param pointerY Position of the user's pointer along the Y axis.\r\n   * @param delta Direction in which the user is moving their pointer.\r\n   */\r\n  private _getItemIndexFromPointerPosition(item: DragRef, pointerX: number, pointerY: number,\r\n                                           delta?: {x: number, y: number}) {\r\n    const isHorizontal = this._orientation === 'horizontal';\r\n\r\n    return findIndex(this._itemPositions, ({drag, clientRect}, _, array) => {\r\n      if (drag === item) {\r\n        // If there's only one item left in the container, it must be\r\n        // the dragged item itself so we use it as a reference.\r\n        return array.length < 2;\r\n      }\r\n\r\n      if (delta) {\r\n        const direction = isHorizontal ? delta.x : delta.y;\r\n\r\n        // If the user is still hovering over the same item as last time, and they didn't change\r\n        // the direction in which they're dragging, we don't consider it a direction swap.\r\n        if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return isHorizontal ?\r\n          // Round these down since most browsers report client rects with\r\n          // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\r\n          pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\r\n          pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\r\n    });\r\n  }\r\n\r\n  /** Caches the current items in the list and their positions. */\r\n  private _cacheItems(): void {\r\n    this._activeDraggables = this._draggables.slice();\r\n    this._cacheItemPositions();\r\n    this._cacheOwnPosition();\r\n  }\r\n\r\n  /**\r\n   * Checks whether the user's pointer is positioned over the container.\r\n   * @param x Pointer position along the X axis.\r\n   * @param y Pointer position along the Y axis.\r\n   */\r\n  _isOverContainer(x: number, y: number): boolean {\r\n    return isInsideClientRect(this._clientRect, x, y);\r\n  }\r\n\r\n  /**\r\n   * Figures out whether an item should be moved into a sibling\r\n   * drop container, based on its current position.\r\n   * @param item Drag item that is being moved.\r\n   * @param x Position of the item along the X axis.\r\n   * @param y Position of the item along the Y axis.\r\n   */\r\n  _getSiblingContainerFromPosition(item: DragRef, x: number, y: number): DropListRef | undefined {\r\n    return this._siblings.find(sibling => sibling._canReceive(item, x, y));\r\n  }\r\n\r\n  /**\r\n   * Checks whether the drop list can receive the passed-in item.\r\n   * @param item Item that is being dragged into the list.\r\n   * @param x Position of the item along the X axis.\r\n   * @param y Position of the item along the Y axis.\r\n   */\r\n  _canReceive(item: DragRef, x: number, y: number): boolean {\r\n    if (!this.enterPredicate(item, this) || !isInsideClientRect(this._clientRect, x, y)) {\r\n      return false;\r\n    }\r\n\r\n    const elementFromPoint = this._document.elementFromPoint(x, y) as HTMLElement | null;\r\n\r\n    // If there's no element at the pointer position, then\r\n    // the client rect is probably scrolled out of the view.\r\n    if (!elementFromPoint) {\r\n      return false;\r\n    }\r\n\r\n    const nativeElement = coerceElement(this.element);\r\n\r\n    // The `ClientRect`, that we're using to find the container over which the user is\r\n    // hovering, doesn't give us any information on whether the element has been scrolled\r\n    // out of the view or whether it's overlapping with other containers. This means that\r\n    // we could end up transferring the item into a container that's invisible or is positioned\r\n    // below another one. We use the result from `elementFromPoint` to get the top-most element\r\n    // at the pointer position and to find whether it's one of the intersecting drop containers.\r\n    return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\r\n  }\r\n\r\n  /**\r\n   * Called by one of the connected drop lists when a dragging sequence has started.\r\n   * @param sibling Sibling in which dragging has started.\r\n   */\r\n  _startReceiving(sibling: DropListRef) {\r\n    const activeSiblings = this._activeSiblings;\r\n\r\n    if (!activeSiblings.has(sibling)) {\r\n      activeSiblings.add(sibling);\r\n      this._cacheOwnPosition();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called by a connected drop list when dragging has stopped.\r\n   * @param sibling Sibling whose dragging has stopped.\r\n   */\r\n  _stopReceiving(sibling: DropListRef) {\r\n    this._activeSiblings.delete(sibling);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\r\n * @param clientRect `ClientRect` that should be updated.\r\n * @param top Amount to add to the `top` position.\r\n * @param left Amount to add to the `left` position.\r\n */\r\nfunction adjustClientRect(clientRect: ClientRect, top: number, left: number) {\r\n  clientRect.top += top;\r\n  clientRect.bottom = clientRect.top + clientRect.height;\r\n\r\n  clientRect.left += left;\r\n  clientRect.right = clientRect.left + clientRect.width;\r\n}\r\n\r\n\r\n/**\r\n * Finds the index of an item that matches a predicate function. Used as an equivalent\r\n * of `Array.prototype.find` which isn't part of the standard Google typings.\r\n * @param array Array in which to look for matches.\r\n * @param predicate Function used to determine whether an item is a match.\r\n */\r\nfunction findIndex<T>(array: T[],\r\n                      predicate: (value: T, index: number, obj: T[]) => boolean): number {\r\n\r\n  for (let i = 0; i < array.length; i++) {\r\n    if (predicate(array[i], i, array)) {\r\n      return i;\r\n    }\r\n  }\r\n\r\n  return -1;\r\n}\r\n\r\n\r\n/**\r\n * Checks whether some coordinates are within a `ClientRect`.\r\n * @param clientRect ClientRect that is being checked.\r\n * @param x Coordinates along the X axis.\r\n * @param y Coordinates along the Y axis.\r\n */\r\nfunction isInsideClientRect(clientRect: ClientRect, x: number, y: number) {\r\n  const {top, bottom, left, right} = clientRect;\r\n  return y >= top && y <= bottom && x >= left && x <= right;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, NgZone, OnDestroy, Inject} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\r\nimport {Subject} from 'rxjs';\r\n\r\n/** Event options that can be used to bind an active, capturing event. */\r\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\r\n  passive: false,\r\n  capture: true\r\n});\r\n\r\n/**\r\n * Service that keeps track of all the drag item and drop container\r\n * instances, and manages global event listeners on the `document`.\r\n * @docs-private\r\n */\r\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\r\n// to avoid circular imports. If we were to reference them here, importing the registry into the\r\n// classes that are registering themselves will introduce a circular import.\r\n@Injectable({providedIn: 'root'})\r\nexport class DragDropRegistry<I, C extends {id: string}> implements OnDestroy {\r\n  private _document: Document;\r\n\r\n  /** Registered drop container instances. */\r\n  private _dropInstances = new Set<C>();\r\n\r\n  /** Registered drag item instances. */\r\n  private _dragInstances = new Set<I>();\r\n\r\n  /** Drag item instances for which a drag sequence has been initialized. */\r\n  private _initializedDragSequences = new Set<I>();\r\n\r\n  /** Drag item instances that are currently being dragged. */\r\n  private _startedDragSequences = new Set<I>();\r\n\r\n  /** Keeps track of the event listeners that we've bound to the `document`. */\r\n  private _globalListeners = new Map<string, {\r\n    handler: (event: Event) => void,\r\n    options?: AddEventListenerOptions | boolean\r\n  }>();\r\n\r\n  /**\r\n   * Emits the `touchmove` or `mousemove` events that are dispatched\r\n   * while the user is dragging a drag item instance.\r\n   */\r\n  readonly pointerMove: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\r\n\r\n  /**\r\n   * Emits the `touchend` or `mouseup` events that are dispatched\r\n   * while the user is dragging a drag item instance.\r\n   */\r\n  readonly pointerUp: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\r\n\r\n  constructor(\r\n    private _ngZone: NgZone,\r\n    @Inject(DOCUMENT) _document: any) {\r\n    this._document = _document;\r\n  }\r\n\r\n  /** Adds a drop container to the registry. */\r\n  registerDropContainer(drop: C) {\r\n    if (!this._dropInstances.has(drop)) {\r\n      if (this.getDropContainer(drop.id)) {\r\n        throw Error(`Drop instance with id \"${drop.id}\" has already been registered.`);\r\n      }\r\n\r\n      this._dropInstances.add(drop);\r\n    }\r\n  }\r\n\r\n  /** Adds a drag item instance to the registry. */\r\n  registerDragItem(drag: I) {\r\n    this._dragInstances.add(drag);\r\n\r\n    // The `touchmove` event gets bound once, ahead of time, because WebKit\r\n    // won't preventDefault on a dynamically-added `touchmove` listener.\r\n    // See https://bugs.webkit.org/show_bug.cgi?id=184250.\r\n    if (this._dragInstances.size === 1) {\r\n      this._ngZone.runOutsideAngular(() => {\r\n        // The event handler has to be explicitly active,\r\n        // because newer browsers make it passive by default.\r\n        this._document.addEventListener('touchmove', this._preventDefaultWhileDragging,\r\n            activeCapturingEventOptions);\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Removes a drop container from the registry. */\r\n  removeDropContainer(drop: C) {\r\n    this._dropInstances.delete(drop);\r\n  }\r\n\r\n  /** Removes a drag item instance from the registry. */\r\n  removeDragItem(drag: I) {\r\n    this._dragInstances.delete(drag);\r\n    this.stopDragging(drag);\r\n\r\n    if (this._dragInstances.size === 0) {\r\n      this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging,\r\n          activeCapturingEventOptions);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts the dragging sequence for a drag instance.\r\n   * @param drag Drag instance which is being dragged.\r\n   * @param event Event that initiated the dragging.\r\n   */\r\n  initializeDragging(drag: I, event: TouchEvent | MouseEvent) {\r\n    // Do not process the same drag twice to avoid memory leaks and redundant listeners\r\n    if (this._initializedDragSequences.has(drag)) {\r\n      return;\r\n    }\r\n\r\n    this._initializedDragSequences.add(drag);\r\n\r\n    if (this._initializedDragSequences.size === 1) {\r\n      const isTouchEvent = event.type.startsWith('touch');\r\n      const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\r\n      const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\r\n\r\n      // We explicitly bind __active__ listeners here, because newer browsers will default to\r\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\r\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\r\n      this._globalListeners\r\n        .set(moveEvent, {\r\n          handler: (e: Event) => this.pointerMove.next(e as TouchEvent | MouseEvent),\r\n          options: activeCapturingEventOptions\r\n        })\r\n        .set(upEvent, {\r\n          handler: (e: Event) => this.pointerUp.next(e as TouchEvent | MouseEvent),\r\n          options: true\r\n        })\r\n        // Preventing the default action on `mousemove` isn't enough to disable text selection\r\n        // on Safari so we need to prevent the selection event as well. Alternatively this can\r\n        // be done by setting `user-select: none` on the `body`, however it has causes a style\r\n        // recalculation which can be expensive on pages with a lot of elements.\r\n        .set('selectstart', {\r\n          handler: this._preventDefaultWhileDragging,\r\n          options: activeCapturingEventOptions\r\n        });\r\n\r\n      // TODO(crisbeto): prevent mouse wheel scrolling while\r\n      // dragging until we've set up proper scroll handling.\r\n      if (!isTouchEvent) {\r\n        this._globalListeners.set('wheel', {\r\n          handler: this._preventDefaultWhileDragging,\r\n          options: activeCapturingEventOptions\r\n        });\r\n      }\r\n\r\n      this._ngZone.runOutsideAngular(() => {\r\n        this._globalListeners.forEach((config, name) => {\r\n          this._document.addEventListener(name, config.handler, config.options);\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  startDragging(drag: I) {\r\n    if (this._startedDragSequences.has(drag)) {\r\n      return;\r\n    }\r\n\r\n    this._startedDragSequences.add(drag);\r\n  }\r\n\r\n  /** Stops dragging a drag item instance. */\r\n  stopDragging(drag: I) {\r\n\r\n    this._startedDragSequences.delete(drag);\r\n    this._initializedDragSequences.delete(drag);\r\n\r\n    if (this._initializedDragSequences.size === 0) {\r\n      this._clearGlobalListeners();\r\n    }\r\n  }\r\n\r\n  /** Gets whether a drag item instance is currently being dragged. */\r\n  isDragging(drag: I) {\r\n    return this._initializedDragSequences.has(drag);\r\n  }\r\n\r\n  /**\r\n   * Gets a drop container by its id.\r\n   * @deprecated No longer being used. To be removed.\r\n   * @breaking-change 8.0.0\r\n   */\r\n  getDropContainer(id: string): C | undefined {\r\n    return Array.from(this._dropInstances).find(instance => instance.id === id);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\r\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\r\n    this._clearGlobalListeners();\r\n    this.pointerMove.complete();\r\n    this.pointerUp.complete();\r\n  }\r\n\r\n  /**\r\n   * Event listener that will prevent the default browser action while the user is dragging.\r\n   * @param event Event whose default action should be prevented.\r\n   */\r\n  private _preventDefaultWhileDragging = (event: Event) => {\r\n    if (this._startedDragSequences.size) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  /** Clears out the global event listeners from the `document`. */\r\n  private _clearGlobalListeners() {\r\n    this._globalListeners.forEach((config, name) => {\r\n      this._document.removeEventListener(name, config.handler, config.options);\r\n    });\r\n\r\n    this._globalListeners.clear();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, Inject, NgZone, ElementRef} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {ViewportRuler} from '@angular/cdk/scrolling';\r\nimport {DragRef, DragRefConfig} from './drag-ref';\r\nimport {DropListRef} from './drop-list-ref';\r\nimport {DragDropRegistry} from './drag-drop-registry';\r\n\r\n/** Default configuration to be used when creating a `DragRef`. */\r\nconst DEFAULT_CONFIG = {\r\n  dragStartThreshold: 5,\r\n  pointerDirectionChangeThreshold: 5\r\n};\r\n\r\n/**\r\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class DragDrop {\r\n  constructor(\r\n    @Inject(DOCUMENT) private _document: any,\r\n    private _ngZone: NgZone,\r\n    private _viewportRuler: ViewportRuler,\r\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {}\r\n\r\n  /**\r\n   * Turns an element into a draggable item.\r\n   * @param element Element to which to attach the dragging functionality.\r\n   * @param config Object used to configure the dragging behavior.\r\n   */\r\n  createDrag<T = any>(element: ElementRef<HTMLElement> | HTMLElement,\r\n                config: DragRefConfig = DEFAULT_CONFIG): DragRef<T> {\r\n\r\n    return new DragRef<T>(element, config, this._document, this._ngZone, this._viewportRuler,\r\n        this._dragDropRegistry);\r\n  }\r\n\r\n  /**\r\n   * Turns an element into a drop list.\r\n   * @param element Element to which to attach the drop list functionality.\r\n   */\r\n  createDropList<T = any>(element: ElementRef<HTMLElement> | HTMLElement): DropListRef<T> {\r\n    return new DropListRef<T>(element, this._dragDropRegistry, this._document);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken, QueryList, ElementRef} from '@angular/core';\r\nimport {CdkDrag} from './directives/drag';\r\n\r\n\r\n/**\r\n * @deprecated To be removed. No longer being used. Previously the interface was used to avoid\r\n * circular imports between `CdkDrag` and `CdkDropList`, however now we're using the\r\n * `CdkDropListInternal` interface to achieve the same result, without having to maintain\r\n * this large of an interface.\r\n * @breaking-change 8.0.0\r\n */\r\nexport interface CdkDropListContainer<T = any> {\r\n  /** DOM node that corresponds to the drop container. */\r\n  element: ElementRef<HTMLElement>;\r\n\r\n  /** Arbitrary data to attach to all events emitted by this container. */\r\n  data: T;\r\n\r\n  /** Unique ID for the drop zone. */\r\n  id: string;\r\n\r\n  /** Direction in which the list is oriented. */\r\n  orientation: 'horizontal' | 'vertical';\r\n\r\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\r\n  lockAxis: 'x' | 'y';\r\n\r\n  /** Whether starting a dragging sequence from this container is disabled. */\r\n  disabled: boolean;\r\n\r\n  /** Starts dragging an item. */\r\n  start(): void;\r\n\r\n  /**\r\n   * Drops an item into this container.\r\n   * @param item Item being dropped into the container.\r\n   * @param currentIndex Index at which the item should be inserted.\r\n   * @param previousContainer Container from which the item got dragged in.\r\n   * @param isPointerOverContainer Whether the user's pointer was over the\r\n   *    container when the item was dropped.\r\n   */\r\n  drop(item: CdkDrag, currentIndex: number, previousContainer: Partial<CdkDropListContainer>,\r\n        isPointerOverContainer: boolean): void;\r\n\r\n  /**\r\n   * Emits an event to indicate that the user moved an item into the container.\r\n   * @param item Item that was moved into the container.\r\n   * @param pointerX Position of the item along the X axis.\r\n   * @param pointerY Position of the item along the Y axis.\r\n   */\r\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void;\r\n\r\n  /**\r\n   * Removes an item from the container after it was dragged into another container by the user.\r\n   * @param item Item that was dragged out.\r\n   */\r\n  exit(item: CdkDrag): void;\r\n\r\n  /**\r\n   * Figures out the index of an item in the container.\r\n   * @param item Item whose index should be determined.\r\n   */\r\n  getItemIndex(item: CdkDrag): number;\r\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number, delta: {x: number, y: number}): void;\r\n  _draggables: QueryList<CdkDrag>;\r\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\r\n      CdkDropListContainer | null;\r\n  _isOverContainer(x: number, y: number): boolean;\r\n}\r\n\r\n/**\r\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\r\n * Used for avoiding circular imports.\r\n */\r\nexport const CDK_DROP_LIST = new InjectionToken<CdkDropListContainer>('CDK_DROP_LIST');\r\n\r\n/**\r\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\r\n * Used for avoiding circular imports.\r\n * @deprecated Use `CDK_DROP_LIST` instead.\r\n * @breaking-change 8.0.0\r\n */\r\nexport const CDK_DROP_LIST_CONTAINER = CDK_DROP_LIST;\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken} from '@angular/core';\r\n\r\n/**\r\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\r\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\r\n * to avoid circular imports.\r\n * @docs-private\r\n */\r\nexport const CDK_DRAG_PARENT = new InjectionToken<{}>('CDK_DRAG_PARENT');\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, ElementRef, Inject, Optional, Input, OnDestroy} from '@angular/core';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {Subject} from 'rxjs';\r\nimport {CDK_DRAG_PARENT} from '../drag-parent';\r\nimport {toggleNativeDragInteractions} from '../drag-styling';\r\n\r\n/** Handle that can be used to drag and CdkDrag instance. */\r\n@Directive({\r\n  selector: '[cdkDragHandle]',\r\n  host: {\r\n    'class': 'cdk-drag-handle'\r\n  }\r\n})\r\nexport class CdkDragHandle implements OnDestroy {\r\n  /** Closest parent draggable instance. */\r\n  _parentDrag: {} | undefined;\r\n\r\n  /** Emits when the state of the handle has changed. */\r\n  _stateChanges = new Subject<CdkDragHandle>();\r\n\r\n  /** Whether starting to drag through this handle is disabled. */\r\n  @Input('cdkDragHandleDisabled')\r\n  get disabled(): boolean { return this._disabled; }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n    this._stateChanges.next(this);\r\n  }\r\n  private _disabled = false;\r\n\r\n  constructor(\r\n    public element: ElementRef<HTMLElement>,\r\n    @Inject(CDK_DRAG_PARENT) @Optional() parentDrag?: any) {\r\n\r\n    this._parentDrag = parentDrag;\r\n    toggleNativeDragInteractions(element.nativeElement, false);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._stateChanges.complete();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, TemplateRef, Input} from '@angular/core';\r\n\r\n/**\r\n * Element that will be used as a template for the placeholder of a CdkDrag when\r\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\r\n */\r\n@Directive({\r\n  selector: 'ng-template[cdkDragPlaceholder]'\r\n})\r\nexport class CdkDragPlaceholder<T = any> {\r\n  /** Context data to be added to the placeholder template instance. */\r\n  @Input() data: T;\r\n  constructor(public templateRef: TemplateRef<T>) {}\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, TemplateRef, Input} from '@angular/core';\r\n\r\n/**\r\n * Element that will be used as a template for the preview\r\n * of a CdkDrag when it is being dragged.\r\n */\r\n@Directive({\r\n  selector: 'ng-template[cdkDragPreview]'\r\n})\r\nexport class CdkDragPreview<T = any> {\r\n  /** Context data to be added to the preview template instance. */\r\n  @Input() data: T;\r\n  constructor(public templateRef: TemplateRef<T>) {}\r\n}\r\n"],"names":["_this","_changeDetectorRef","markForCheck","ref","released","subscribe","emit","source","ended","event","distance","entered","container","data","item","currentIndex","exited","dropped","previousIndex","previousContainer","isPointerOverContainer","type","Directive","args","selector","exportAs","host","class","[class.cdk-drag-disabled]","[class.cdk-drag-dragging]","providers","provide","CDK_DRAG_PARENT","useExisting","CdkDrag","ElementRef","undefined","decorators","Inject","CDK_DROP_LIST","Optional","SkipSelf","DOCUMENT","NgZone","ViewContainerRef","CDK_DRAG_CONFIG","Directionality","DragDrop","ChangeDetectorRef","_handles","ContentChildren","CdkDragHandle","descendants","_previewTemplate","ContentChild","CdkDragPreview","static","_placeholderTemplate","CdkDragPlaceholder","Input","lockAxis","rootElementSelector","boundaryElement","dragStartDelay","freeDragPosition","disabled","constrainPosition","started","Output","moved","CdkDropListGroup","this","_items","Set","_disabled","Object","defineProperty","prototype","value","coerceBooleanProperty","ngOnDestroy","clear","_uniqueIdCounter","CdkDropList","element","dragDrop","_dir","_group","_destroyed","Subject","connectedTo","orientation","id","_sortingDisabled","enterPredicate","EventEmitter","sorted","_dropListRef","createDropList","drag","drop","_syncInputs","_handleEvents","_dropLists","push","add","ngAfterContentInit","_draggables","changes","pipe","startWith","takeUntil","items","withItems","map","_dragRef","index","indexOf","splice","delete","dispose","next","complete","start","enter","pointerX","pointerY","exit","getItemIndex","_sortItem","pointerDelta","_getSiblingContainerFromPosition","x","y","result","_isOverContainer","change","withDirection","beforeStarted","siblings","coerceArray","find","list","forEach","sortingDisabled","filter","withOrientation","useValue","CDK_DROP_LIST_CONTAINER","[id]","[class.cdk-drop-list-disabled]","[class.cdk-drop-list-dragging]","[class.cdk-drop-list-receiving]","forwardRef","DragDropModule","NgModule","declarations","exports","extendStyles","dest","key","hasOwnProperty","toggleNativeDragInteractions","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","multiplier","toLowerCase","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","prop","propertyIndex","rawDurations","rawDelays","name","getPropertyValue","split","part","trim","getTransform","Math","round","deepCloneNode","node","clone","cloneNode","descendantsWithId","querySelectorAll","descendantCanvases","removeAttribute","i","length","cloneCanvases","correspondingCloneContext","getContext","drawImage","clamp","min","max","removeElement","parentNode","removeChild","isTouchEvent","getPreviewInsertionPoint","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","body","moveItemInArray","array","fromIndex","toIndex","from","to","target","delta","transferArrayItem","currentArray","targetArray","targetIndex","copyArrayItem","adjustClientRect","clientRect","top","left","bottom","height","right","width","findIndex","predicate","isInsideClientRect","CDK_DRAG_CONFIG_FACTORY","dragStartThreshold","pointerDirectionChangeThreshold","getClosestMatchingAncestor","currentElement","matches","msMatchesSelector","parentElement","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","DragRef","_config","_document","_ngZone","_viewportRuler","_dragDropRegistry","_passiveTransform","_activeTransform","_moveEvents","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_boundaryElement","_nativeInteractionsEnabled","_disabledHandles","_direction","asObservable","_pointerDown","targetHandle","handle","contains","has","_initializeDragSequence","_rootElement","_pointerMove","_hasStartedDragging","_previewRect","_preview","getBoundingClientRect","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","preventDefault","_updatePointerDirectionDelta","_dropContainer","_updateActiveDropContainer","activeTransform","_pickupPositionOnPage","_applyRootElementTransform","SVGElement","appliedTransform","setAttribute","observers","run","pointerPosition","_getDragDistance","_pointerDirectionDelta","_getPointerPositionOnPage","abs","Date","now","_dragStartTime","_endDragSequence","isDragging","_startDragSequence","_pointerUp","withRootElement","registerDragItem","newValue","_toggleNativeDragInteractions","getPlaceholderElement","_placeholder","getRootElement","withHandles","handles","coerceElement","withPreviewTemplate","template","withPlaceholderTemplate","rootElement","_removeRootElementListeners","addEventListener","_initialTransform","withBoundaryElement","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","_nextSibling","reset","transform","disableHandle","enableHandle","direction","_withDropContainer","getFreeDragPosition","setFreeDragPosition","unsubscribe","_previewRef","destroy","_placeholderRef","stopDragging","_rootElementTapHighlight","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","startDragging","_lastTouchEventTime","nextSibling","preview","_createPreviewElement","placeholder","_createPlaceholderElement","display","appendChild","replaceChild","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","_initialContainer","pointerMove","pointerUp","_scrollPosition","getViewportScrollPosition","_boundaryRect","_pickupPositionInElement","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","initializeDragging","insertBefore","_a","newContainer","previewConfig","previewTemplate","viewRef","viewContainer","createEmbeddedView","context","rootNodes","elementRect","pointerEvents","position","zIndex","classList","Promise","resolve","placeholderRect","duration","runOutsideAngular","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","handleElement","referenceRect","point","targetTouches","pageX","pageY","touches","changedTouches","constrainedPoint","dropContainerLock","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","minX","maxX","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","shouldEnable","currentPosition","pickupPosition","DropListRef","_isDragging","_itemPositions","_previousSwap","_siblings","_orientation","_activeSiblings","registerDropContainer","nativeElement","removeDropContainer","_cacheItems","sibling","_startReceiving","newIndex","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","_cacheItemPositions","_reset","slice","reverse","currentItem","isReceiving","size","_isPointerNearDropContainer","isHorizontal","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","isDraggedItem","offset","elementToOffset","_cacheOwnPosition","_clientRect","elementToMeasure","sort","a","b","_stopReceiving","immediateSibling","end","xThreshold","yThreshold","_","floor","_canReceive","elementFromPoint","activeSiblings","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_initializedDragSequences","_startedDragSequences","_globalListeners","Map","_preventDefaultWhileDragging","getDropContainer","Error","startsWith","moveEvent","upEvent","set","e","options","config","_clearGlobalListeners","Array","instance","Injectable","providedIn","DEFAULT_CONFIG","createDrag","ViewportRuler","InjectionToken","parentDrag","_stateChanges","_parentDrag","templateRef","TemplateRef","factory","dropContainer","_viewContainerRef","Observable","observer","subscription","movedEvent","ngAfterViewInit","onStable","take","_updateRootElement","tap","childHandleElements","switchMap","merge","apply","handleInstance","dragRef","ngOnChanges","rootSelectorChange","positionChange","firstChange","nodeType","ELEMENT_NODE","nodeName","_getBoundaryElement","boundary","isDevMode","dir","coerceNumberProperty"],"mappings":"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"}