{"version":3,"file":"cdk-bidi.umd.min.js","sources":["../../src/cdk/bidi/dir-document-token.ts","../../src/cdk/bidi/directionality.ts","../../src/cdk/bidi/dir.ts","../../src/cdk/bidi/bidi-module.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {inject, InjectionToken} from '@angular/core';\r\n\r\n\r\n/**\r\n * Injection token used to inject the document into Directionality.\r\n * This is used so that the value can be faked in tests.\r\n *\r\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\r\n * tests in Safari to fail.\r\n *\r\n * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests\r\n * themselves use things like `querySelector` in test code.\r\n *\r\n * This token is defined in a separate file from Directionality as a workaround for\r\n * https://github.com/angular/angular/issues/22559\r\n *\r\n * @docs-private\r\n */\r\nexport const DIR_DOCUMENT = new InjectionToken<Document>('cdk-dir-doc', {\r\n  providedIn: 'root',\r\n  factory: DIR_DOCUMENT_FACTORY,\r\n});\r\n\r\n/** @docs-private */\r\nexport function DIR_DOCUMENT_FACTORY(): Document {\r\n  return inject(DOCUMENT);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {EventEmitter, Inject, Injectable, Optional, OnDestroy} from '@angular/core';\r\nimport {DIR_DOCUMENT} from './dir-document-token';\r\n\r\n\r\nexport type Direction = 'ltr' | 'rtl';\r\n\r\n\r\n/**\r\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\r\n * Exposes the current direction and a stream of direction changes.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class Directionality implements OnDestroy {\r\n  /** The current 'ltr' or 'rtl' value. */\r\n  readonly value: Direction = 'ltr';\r\n\r\n  /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\r\n  readonly change = new EventEmitter<Direction>();\r\n\r\n  constructor(@Optional() @Inject(DIR_DOCUMENT) _document?: any) {\r\n    if (_document) {\r\n      // TODO: handle 'auto' value -\r\n      // We still need to account for dir=\"auto\".\r\n      // It looks like HTMLElemenet.dir is also \"auto\" when that's set to the attribute,\r\n      // but getComputedStyle return either \"ltr\" or \"rtl\". avoiding getComputedStyle for now\r\n      const bodyDir = _document.body ? _document.body.dir : null;\r\n      const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\r\n      const value = bodyDir || htmlDir;\r\n      this.value = (value === 'ltr' || value === 'rtl') ? value : 'ltr';\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.change.complete();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  Directive,\r\n  Output,\r\n  Input,\r\n  EventEmitter,\r\n  AfterContentInit,\r\n  OnDestroy,\r\n} from '@angular/core';\r\n\r\nimport {Direction, Directionality} from './directionality';\r\n\r\n/**\r\n * Directive to listen for changes of direction of part of the DOM.\r\n *\r\n * Provides itself as Directionality such that descendant directives only need to ever inject\r\n * Directionality to get the closest direction.\r\n */\r\n@Directive({\r\n  selector: '[dir]',\r\n  providers: [{provide: Directionality, useExisting: Dir}],\r\n  host: {'[attr.dir]': '_rawDir'},\r\n  exportAs: 'dir',\r\n})\r\nexport class Dir implements Directionality, AfterContentInit, OnDestroy {\r\n  /** Normalized direction that accounts for invalid/unsupported values. */\r\n  private _dir: Direction = 'ltr';\r\n\r\n  /** Whether the `value` has been set to its initial value. */\r\n  private _isInitialized: boolean = false;\r\n\r\n  /** Direction as passed in by the consumer. */\r\n  _rawDir: string;\r\n\r\n  /** Event emitted when the direction changes. */\r\n  @Output('dirChange') change = new EventEmitter<Direction>();\r\n\r\n  /** @docs-private */\r\n  @Input()\r\n  get dir(): Direction { return this._dir; }\r\n  set dir(value: Direction) {\r\n    const old = this._dir;\r\n    const normalizedValue = value ? value.toLowerCase() : value;\r\n\r\n    this._rawDir = value;\r\n    this._dir = (normalizedValue === 'ltr' || normalizedValue === 'rtl') ? normalizedValue : 'ltr';\r\n\r\n    if (old !== this._dir && this._isInitialized) {\r\n      this.change.emit(this._dir);\r\n    }\r\n  }\r\n\r\n  /** Current layout direction of the element. */\r\n  get value(): Direction { return this.dir; }\r\n\r\n  /** Initialize once default value has been set. */\r\n  ngAfterContentInit() {\r\n    this._isInitialized = true;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.change.complete();\r\n  }\r\n}\r\n\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {Dir} from './dir';\r\n\r\n\r\n@NgModule({\r\n  exports: [Dir],\r\n  declarations: [Dir],\r\n})\r\nexport class BidiModule { }\r\n"],"names":["DIR_DOCUMENT_FACTORY","inject","DOCUMENT","DIR_DOCUMENT","InjectionToken","providedIn","factory","Directionality","_document","this","value","change","EventEmitter","bodyDir","body","dir","htmlDir","documentElement","prototype","ngOnDestroy","complete","type","Injectable","args","undefined","decorators","Optional","Inject","Dir","_dir","_isInitialized","Object","defineProperty","old","normalizedValue","toLowerCase","_rawDir","emit","ngAfterContentInit","Directive","selector","providers","provide","useExisting","host","[attr.dir]","exportAs","Output","Input","BidiModule","NgModule","exports","declarations"],"mappings":";;;;;;;uWAiCA,SAAgBA,KACd,MAAOC,GAAAA,OAAOC,EAAAA,UAPhB,GAAaC,GAAe,GAAIC,GAAAA,eAAyB,eACvDC,WAAY,OACZC,QAASN,ICVXO,EAAA,WAQE,QAAFA,GAAgDC,GAC5C,GANOC,KAAXC,MAA8B,MAGnBD,KAAXE,OAAoB,GAAIC,GAAAA,aAGhBJ,EAAW,CAKnB,GAAYK,GAAUL,EAAUM,KAAON,EAAUM,KAAKC,IAAM,KAChDC,EAAUR,EAAUS,gBAAkBT,EAAUS,gBAAgBF,IAAM,KACtEL,EAAQG,GAAWG,CACzBP,MAAKC,MAAmB,QAAVA,GAA6B,QAAVA,EAAmBA,EAAQ,OApClE,MAwCEH,GAAFW,UAAAC,YAAE,WACEV,KAAKE,OAAOS,2BAtBhBC,KAACC,EAAAA,WAADC,OAAalB,WAAY,+CAQzBgB,SAAAG,GAAAC,aAAAJ,KAAeK,EAAAA,WAAfL,KAA2BM,EAAAA,OAA3BJ,MAAkCpB,8HA3BlCI,KCyBAqB,EAAA,WAAA,QAAAA,KAQUnB,KAAVoB,KAA4B,MAGlBpB,KAAVqB,gBAAoC,EAMbrB,KAAvBE,OAAgC,GAAIC,GAAAA,aA4BpC,MAzBEmB,QAAFC,eACMJ,EADNV,UAAA,WAAE,WACuB,MAAOT,MAAKoB,UACnC,SAAQnB,GACV,GAAUuB,GAAMxB,KAAKoB,KACXK,EAAkBxB,EAAQA,EAAMyB,cAAgBzB,CAEtDD,MAAK2B,QAAU1B,EACfD,KAAKoB,KAA4B,QAApBK,GAAiD,QAApBA,EAA6BA,EAAkB,MAErFD,IAAQxB,KAAKoB,MAAQpB,KAAKqB,gBAC5BrB,KAAKE,OAAO0B,KAAK5B,KAAKoB,uCAK1BE,OAAFC,eAAMJ,EAANV,UAAA,aAAE,WAAyB,MAAOT,MAAKM,qCAGrCa,EAAFV,UAAAoB,mBAAE,WACE7B,KAAKqB,gBAAiB,GAGxBF,EAAFV,UAAAC,YAAE,WACEV,KAAKE,OAAOS,2BA3ChBC,KAACkB,EAAAA,UAADhB,OACEiB,SAAU,QACVC,YAAaC,QAASnC,EAAgBoC,YAAaf,IACnDgB,MAAOC,aAAc,WACrBC,SAAU,4BAaZnC,SAAAU,KAAG0B,EAAAA,OAAHxB,MAAU,eAGVR,MAAAM,KAAG2B,EAAAA,SAyBHpB,KC1DAqB,EAAA,WAAA,QAAAA,MAI0B,sBAJ1B5B,KAAC6B,EAAAA,SAAD3B,OACE4B,SAAUvB,GACVwB,cAAexB,OAEjBqB"}