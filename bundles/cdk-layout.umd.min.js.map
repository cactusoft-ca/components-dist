{"version":3,"file":"cdk-layout.umd.min.js","sources":["../../src/cdk/layout/media-matcher.ts","../../src/cdk/layout/breakpoints-observer.ts","../../src/cdk/layout/layout-module.ts","../../src/cdk/layout/breakpoints.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {Injectable} from '@angular/core';\r\nimport {Platform} from '@angular/cdk/platform';\r\n\r\n/** Global registry for all dynamically-created, injected media queries. */\r\nconst mediaQueriesForWebkitCompatibility: Set<string> = new Set<string>();\r\n\r\n/** Style tag that holds all of the dynamically-created media queries. */\r\nlet mediaQueryStyleNode: HTMLStyleElement | undefined;\r\n\r\n/** A utility for calling matchMedia queries. */\r\n@Injectable({providedIn: 'root'})\r\nexport class MediaMatcher {\r\n  /** The internal matchMedia method to return back a MediaQueryList like object. */\r\n  private _matchMedia: (query: string) => MediaQueryList;\r\n\r\n  constructor(private _platform: Platform) {\r\n    this._matchMedia = this._platform.isBrowser && window.matchMedia ?\r\n      // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\r\n      // call it from a different scope.\r\n      window.matchMedia.bind(window) :\r\n      noopMatchMedia;\r\n  }\r\n\r\n  /**\r\n   * Evaluates the given media query and returns the native MediaQueryList from which results\r\n   * can be retrieved.\r\n   * Confirms the layout engine will trigger for the selector query provided and returns the\r\n   * MediaQueryList for the query provided.\r\n   */\r\n  matchMedia(query: string): MediaQueryList {\r\n    if (this._platform.WEBKIT) {\r\n      createEmptyStyleRule(query);\r\n    }\r\n    return this._matchMedia(query);\r\n  }\r\n}\r\n\r\n/**\r\n * For Webkit engines that only trigger the MediaQueryListListener when\r\n * there is at least one CSS selector for the respective media query.\r\n */\r\nfunction createEmptyStyleRule(query: string) {\r\n  if (mediaQueriesForWebkitCompatibility.has(query)) {\r\n    return;\r\n  }\r\n\r\n  try {\r\n    if (!mediaQueryStyleNode) {\r\n      mediaQueryStyleNode = document.createElement('style');\r\n      mediaQueryStyleNode.setAttribute('type', 'text/css');\r\n      document.head!.appendChild(mediaQueryStyleNode);\r\n    }\r\n\r\n    if (mediaQueryStyleNode.sheet) {\r\n      (mediaQueryStyleNode.sheet as CSSStyleSheet)\r\n          .insertRule(`@media ${query} {.fx-query-test{ }}`, 0);\r\n      mediaQueriesForWebkitCompatibility.add(query);\r\n    }\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n}\r\n\r\n/** No-op matchMedia replacement for non-browser platforms. */\r\nfunction noopMatchMedia(query: string): MediaQueryList {\r\n  // Use `as any` here to avoid adding additional necessary properties for\r\n  // the noop matcher.\r\n  return {\r\n    matches: query === 'all' || query === '',\r\n    media: query,\r\n    addListener: () => {},\r\n    removeListener: () => {}\r\n  } as any;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, NgZone, OnDestroy} from '@angular/core';\r\nimport {MediaMatcher} from './media-matcher';\r\nimport {asapScheduler, combineLatest, Observable, Subject, Observer} from 'rxjs';\r\nimport {debounceTime, map, startWith, takeUntil} from 'rxjs/operators';\r\nimport {coerceArray} from '@angular/cdk/coercion';\r\n\r\n\r\n/** The current state of a layout breakpoint. */\r\nexport interface BreakpointState {\r\n  /** Whether the breakpoint is currently matching. */\r\n  matches: boolean;\r\n  /**\r\n   * A key boolean pair for each query provided to the observe method,\r\n   * with its current matched state.\r\n   */\r\n  breakpoints: {\r\n    [key: string]: boolean;\r\n  };\r\n}\r\n\r\n/** The current state of a layout breakpoint. */\r\ninterface InternalBreakpointState {\r\n  /** Whether the breakpoint is currently matching. */\r\n  matches: boolean;\r\n  /** The media query being to be matched */\r\n  query: string;\r\n}\r\n\r\ninterface Query {\r\n  observable: Observable<InternalBreakpointState>;\r\n  mql: MediaQueryList;\r\n}\r\n\r\n/** Utility for checking the matching state of @media queries. */\r\n@Injectable({providedIn: 'root'})\r\nexport class BreakpointObserver implements OnDestroy {\r\n  /**  A map of all media queries currently being listened for. */\r\n  private _queries = new Map<string, Query>();\r\n  /** A subject for all other observables to takeUntil based on. */\r\n  private _destroySubject = new Subject<void>();\r\n\r\n  constructor(private _mediaMatcher: MediaMatcher, private _zone: NgZone) {}\r\n\r\n  /** Completes the active subject, signalling to all other observables to complete. */\r\n  ngOnDestroy() {\r\n    this._destroySubject.next();\r\n    this._destroySubject.complete();\r\n  }\r\n\r\n  /**\r\n   * Whether one or more media queries match the current viewport size.\r\n   * @param value One or more media queries to check.\r\n   * @returns Whether any of the media queries match.\r\n   */\r\n  isMatched(value: string | string[]): boolean {\r\n    const queries = splitQueries(coerceArray(value));\r\n    return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\r\n  }\r\n\r\n  /**\r\n   * Gets an observable of results for the given queries that will emit new results for any changes\r\n   * in matching of the given queries.\r\n   * @param value One or more media queries to check.\r\n   * @returns A stream of matches for the given queries.\r\n   */\r\n  observe(value: string | string[]): Observable<BreakpointState> {\r\n    const queries = splitQueries(coerceArray(value));\r\n    const observables = queries.map(query => this._registerQuery(query).observable);\r\n\r\n    return combineLatest(observables).pipe(\r\n      debounceTime(0, asapScheduler),\r\n      map((breakpointStates: InternalBreakpointState[]) => {\r\n        const response: BreakpointState = {\r\n          matches: false,\r\n          breakpoints: {},\r\n        };\r\n        breakpointStates.forEach((state: InternalBreakpointState) => {\r\n          response.matches = response.matches || state.matches;\r\n          response.breakpoints[state.query] = state.matches;\r\n        });\r\n        return response;\r\n      }));\r\n  }\r\n\r\n  /** Registers a specific query to be listened for. */\r\n  private _registerQuery(query: string): Query {\r\n    // Only set up a new MediaQueryList if it is not already being listened for.\r\n    if (this._queries.has(query)) {\r\n      return this._queries.get(query)!;\r\n    }\r\n\r\n    const mql: MediaQueryList = this._mediaMatcher.matchMedia(query);\r\n\r\n    // Create callback for match changes and add it is as a listener.\r\n    const queryObservable = new Observable<MediaQueryList>((observer: Observer<MediaQueryList>) => {\r\n      // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\r\n      // back into the zone because matchMedia is only included in Zone.js by loading the\r\n      // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\r\n      // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\r\n      // patches it.\r\n      const handler = (e: any) => this._zone.run(() => observer.next(e));\r\n      mql.addListener(handler);\r\n\r\n      return () => {\r\n        mql.removeListener(handler);\r\n      };\r\n    }).pipe(\r\n      startWith(mql),\r\n      map((nextMql: MediaQueryList) => ({query, matches: nextMql.matches})),\r\n      takeUntil(this._destroySubject)\r\n    );\r\n\r\n    // Add the MediaQueryList to the set of queries.\r\n    const output = {observable: queryObservable, mql};\r\n    this._queries.set(query, output);\r\n    return output;\r\n  }\r\n}\r\n\r\n/**\r\n * Split each query string into separate query strings if two queries are provided as comma\r\n * separated.\r\n */\r\nfunction splitQueries(queries: string[]): string[] {\r\n  return queries.map((query: string) => query.split(','))\r\n                .reduce((a1: string[], a2: string[]) => a1.concat(a2))\r\n                .map(query => query.trim());\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {NgModule} from '@angular/core';\r\n\r\n\r\n@NgModule({})\r\nexport class LayoutModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// PascalCase is being used as Breakpoints is used like an enum.\r\n// tslint:disable-next-line:variable-name\r\nexport const Breakpoints = {\r\n  XSmall: '(max-width: 599.99px)',\r\n  Small: '(min-width: 600px) and (max-width: 959.99px)',\r\n  Medium: '(min-width: 960px) and (max-width: 1279.99px)',\r\n  Large: '(min-width: 1280px) and (max-width: 1919.99px)',\r\n  XLarge: '(min-width: 1920px)',\r\n\r\n  Handset: '(max-width: 599.99px) and (orientation: portrait), ' +\r\n           '(max-width: 959.99px) and (orientation: landscape)',\r\n  Tablet: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait), ' +\r\n          '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\r\n  Web: '(min-width: 840px) and (orientation: portrait), ' +\r\n       '(min-width: 1280px) and (orientation: landscape)',\r\n\r\n  HandsetPortrait: '(max-width: 599.99px) and (orientation: portrait)',\r\n  TabletPortrait: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait)',\r\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\r\n\r\n  HandsetLandscape: '(max-width: 959.99px) and (orientation: landscape)',\r\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\r\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\r\n};\r\n"],"names":["createEmptyStyleRule","query","mediaQueriesForWebkitCompatibility","has","mediaQueryStyleNode","document","createElement","setAttribute","appendChild","sheet","insertRule","add","e","console","error","noopMatchMedia","matches","media","addListener","removeListener","splitQueries","queries","map","split","reduce","a1","a2","concat","trim","LayoutModule","type","NgModule","args","Set","MediaMatcher","_platform","this","_matchMedia","isBrowser","window","matchMedia","bind","prototype","WEBKIT","Injectable","providedIn","Platform","BreakpointObserver","_mediaMatcher","_zone","_queries","Map","_destroySubject","Subject","ngOnDestroy","next","complete","isMatched","value","_this","coerceArray","some","mediaQuery","_registerQuery","mql","observe","observables","observable","combineLatest","pipe","debounceTime","asapScheduler","breakpointStates","response","breakpoints","forEach","state","get","queryObservable","Observable","observer","handler","run","startWith","nextMql","takeUntil","output","set","NgZone","Breakpoints","XSmall","Small","Medium","Large","XLarge","Handset","Tablet","Web","HandsetPortrait","TabletPortrait","WebPortrait","HandsetLandscape","TabletLandscape","WebLandscape"],"mappings":"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"}