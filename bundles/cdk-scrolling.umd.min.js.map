{"version":3,"file":"cdk-scrolling.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/cdk/scrolling/fixed-size-virtual-scroll.ts","../../src/cdk/scrolling/scroll-dispatcher.ts","../../src/cdk/scrolling/virtual-scroll-viewport.ts","../../src/cdk/scrolling/virtual-for-of.ts","../../src/cdk/scrolling/viewport-ruler.ts","../../src/cdk/scrolling/virtual-scroll-strategy.ts","../../src/cdk/scrolling/scrollable.ts","../../src/cdk/scrolling/scrolling-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\r\nimport {Directive, forwardRef, Input, OnChanges} from '@angular/core';\r\nimport {Observable, Subject} from 'rxjs';\r\nimport {distinctUntilChanged} from 'rxjs/operators';\r\nimport {VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy} from './virtual-scroll-strategy';\r\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\r\n\r\n\r\n/** Virtual scrolling strategy for lists with items of known fixed size. */\r\nexport class FixedSizeVirtualScrollStrategy implements VirtualScrollStrategy {\r\n  private _scrolledIndexChange = new Subject<number>();\r\n\r\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\r\n  scrolledIndexChange: Observable<number> = this._scrolledIndexChange.pipe(distinctUntilChanged());\r\n\r\n  /** The attached viewport. */\r\n  private _viewport: CdkVirtualScrollViewport | null = null;\r\n\r\n  /** The size of the items in the virtually scrolling list. */\r\n  private _itemSize: number;\r\n\r\n  /** The minimum amount of buffer rendered beyond the viewport (in pixels). */\r\n  private _minBufferPx: number;\r\n\r\n  /** The number of buffer items to render beyond the edge of the viewport (in pixels). */\r\n  private _maxBufferPx: number;\r\n\r\n  /**\r\n   * @param itemSize The size of the items in the virtually scrolling list.\r\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\r\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\r\n   */\r\n  constructor(itemSize: number, minBufferPx: number, maxBufferPx: number) {\r\n    this._itemSize = itemSize;\r\n    this._minBufferPx = minBufferPx;\r\n    this._maxBufferPx = maxBufferPx;\r\n  }\r\n\r\n  /**\r\n   * Attaches this scroll strategy to a viewport.\r\n   * @param viewport The viewport to attach this strategy to.\r\n   */\r\n  attach(viewport: CdkVirtualScrollViewport) {\r\n    this._viewport = viewport;\r\n    this._updateTotalContentSize();\r\n    this._updateRenderedRange();\r\n  }\r\n\r\n  /** Detaches this scroll strategy from the currently attached viewport. */\r\n  detach() {\r\n    this._scrolledIndexChange.complete();\r\n    this._viewport = null;\r\n  }\r\n\r\n  /**\r\n   * Update the item size and buffer size.\r\n   * @param itemSize The size of the items in the virtually scrolling list.\r\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\r\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\r\n   */\r\n  updateItemAndBufferSize(itemSize: number, minBufferPx: number, maxBufferPx: number) {\r\n    if (maxBufferPx < minBufferPx) {\r\n      throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\r\n    }\r\n    this._itemSize = itemSize;\r\n    this._minBufferPx = minBufferPx;\r\n    this._maxBufferPx = maxBufferPx;\r\n    this._updateTotalContentSize();\r\n    this._updateRenderedRange();\r\n  }\r\n\r\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\r\n  onContentScrolled() {\r\n    this._updateRenderedRange();\r\n  }\r\n\r\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\r\n  onDataLengthChanged() {\r\n    this._updateTotalContentSize();\r\n    this._updateRenderedRange();\r\n  }\r\n\r\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\r\n  onContentRendered() { /* no-op */ }\r\n\r\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\r\n  onRenderedOffsetChanged() { /* no-op */ }\r\n\r\n  /**\r\n   * Scroll to the offset for the given index.\r\n   * @param index The index of the element to scroll to.\r\n   * @param behavior The ScrollBehavior to use when scrolling.\r\n   */\r\n  scrollToIndex(index: number, behavior: ScrollBehavior): void {\r\n    if (this._viewport) {\r\n      this._viewport.scrollToOffset(index * this._itemSize, behavior);\r\n    }\r\n  }\r\n\r\n  /** Update the viewport's total content size. */\r\n  private _updateTotalContentSize() {\r\n    if (!this._viewport) {\r\n      return;\r\n    }\r\n\r\n    this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\r\n  }\r\n\r\n  /** Update the viewport's rendered range. */\r\n  private _updateRenderedRange() {\r\n    if (!this._viewport) {\r\n      return;\r\n    }\r\n\r\n    const scrollOffset = this._viewport.measureScrollOffset();\r\n    const firstVisibleIndex = scrollOffset / this._itemSize;\r\n    const renderedRange = this._viewport.getRenderedRange();\r\n    const newRange = {start: renderedRange.start, end: renderedRange.end};\r\n    const viewportSize = this._viewport.getViewportSize();\r\n    const dataLength = this._viewport.getDataLength();\r\n\r\n    const startBuffer = scrollOffset - newRange.start * this._itemSize;\r\n    if (startBuffer < this._minBufferPx && newRange.start != 0) {\r\n      const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\r\n      newRange.start = Math.max(0, newRange.start - expandStart);\r\n      newRange.end = Math.min(dataLength,\r\n          Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\r\n    } else {\r\n      const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\r\n      if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\r\n        const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\r\n        if (expandEnd > 0) {\r\n          newRange.end = Math.min(dataLength, newRange.end + expandEnd);\r\n          newRange.start = Math.max(0,\r\n              Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\r\n        }\r\n      }\r\n    }\r\n\r\n    this._viewport.setRenderedRange(newRange);\r\n    this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\r\n    this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\r\n * `FixedSizeVirtualScrollStrategy` from the given directive.\r\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\r\n *     `FixedSizeVirtualScrollStrategy` from.\r\n */\r\nexport function _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir: CdkFixedSizeVirtualScroll) {\r\n  return fixedSizeDir._scrollStrategy;\r\n}\r\n\r\n\r\n/** A virtual scroll strategy that supports fixed-size items. */\r\n@Directive({\r\n  selector: 'cdk-virtual-scroll-viewport[itemSize]',\r\n  providers: [{\r\n    provide: VIRTUAL_SCROLL_STRATEGY,\r\n    useFactory: _fixedSizeVirtualScrollStrategyFactory,\r\n    deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\r\n  }],\r\n})\r\nexport class CdkFixedSizeVirtualScroll implements OnChanges {\r\n  /** The size of the items in the list (in pixels). */\r\n  @Input()\r\n  get itemSize(): number { return this._itemSize; }\r\n  set itemSize(value: number) { this._itemSize = coerceNumberProperty(value); }\r\n  _itemSize = 20;\r\n\r\n  /**\r\n   * The minimum amount of buffer rendered beyond the viewport (in pixels).\r\n   * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\r\n   */\r\n  @Input()\r\n  get minBufferPx(): number { return this._minBufferPx; }\r\n  set minBufferPx(value: number) { this._minBufferPx = coerceNumberProperty(value); }\r\n  _minBufferPx = 100;\r\n\r\n  /**\r\n   * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\r\n   */\r\n  @Input()\r\n  get maxBufferPx(): number { return this._maxBufferPx; }\r\n  set maxBufferPx(value: number) { this._maxBufferPx = coerceNumberProperty(value); }\r\n  _maxBufferPx = 200;\r\n\r\n  /** The scroll strategy used by this directive. */\r\n  _scrollStrategy =\r\n      new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\r\n\r\n  ngOnChanges() {\r\n    this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {\r\n  ElementRef,\r\n  Injectable,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  SkipSelf,\r\n} from '@angular/core';\r\nimport {fromEvent, of as observableOf, Subject, Subscription, Observable, Observer} from 'rxjs';\r\nimport {auditTime, filter} from 'rxjs/operators';\r\nimport {CdkScrollable} from './scrollable';\r\n\r\n\r\n/** Time in ms to throttle the scrolling events by default. */\r\nexport const DEFAULT_SCROLL_TIME = 20;\r\n\r\n/**\r\n * Service contained all registered Scrollable references and emits an event when any one of the\r\n * Scrollable references emit a scrolled event.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class ScrollDispatcher implements OnDestroy {\r\n  constructor(private _ngZone: NgZone, private _platform: Platform) { }\r\n\r\n  /** Subject for notifying that a registered scrollable reference element has been scrolled. */\r\n  private _scrolled = new Subject<CdkScrollable|void>();\r\n\r\n  /** Keeps track of the global `scroll` and `resize` subscriptions. */\r\n  _globalSubscription: Subscription | null = null;\r\n\r\n  /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\r\n  private _scrolledCount = 0;\r\n\r\n  /**\r\n   * Map of all the scrollable references that are registered with the service and their\r\n   * scroll event subscriptions.\r\n   */\r\n  scrollContainers: Map<CdkScrollable, Subscription> = new Map();\r\n\r\n  /**\r\n   * Registers a scrollable instance with the service and listens for its scrolled events. When the\r\n   * scrollable is scrolled, the service emits the event to its scrolled observable.\r\n   * @param scrollable Scrollable instance to be registered.\r\n   */\r\n  register(scrollable: CdkScrollable): void {\r\n    if (!this.scrollContainers.has(scrollable)) {\r\n      this.scrollContainers.set(scrollable, scrollable.elementScrolled()\r\n          .subscribe(() => this._scrolled.next(scrollable)));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\r\n   * @param scrollable Scrollable instance to be deregistered.\r\n   */\r\n  deregister(scrollable: CdkScrollable): void {\r\n    const scrollableReference = this.scrollContainers.get(scrollable);\r\n\r\n    if (scrollableReference) {\r\n      scrollableReference.unsubscribe();\r\n      this.scrollContainers.delete(scrollable);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns an observable that emits an event whenever any of the registered Scrollable\r\n   * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\r\n   * to override the default \"throttle\" time.\r\n   *\r\n   * **Note:** in order to avoid hitting change detection for every scroll event,\r\n   * all of the events emitted from this stream will be run outside the Angular zone.\r\n   * If you need to update any data bindings as a result of a scroll event, you have\r\n   * to run the callback using `NgZone.run`.\r\n   */\r\n  scrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME): Observable<CdkScrollable|void> {\r\n    if (!this._platform.isBrowser) {\r\n      return observableOf<void>();\r\n    }\r\n\r\n    return new Observable((observer: Observer<CdkScrollable|void>) => {\r\n      if (!this._globalSubscription) {\r\n        this._addGlobalListener();\r\n      }\r\n\r\n      // In the case of a 0ms delay, use an observable without auditTime\r\n      // since it does add a perceptible delay in processing overhead.\r\n      const subscription = auditTimeInMs > 0 ?\r\n        this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\r\n        this._scrolled.subscribe(observer);\r\n\r\n      this._scrolledCount++;\r\n\r\n      return () => {\r\n        subscription.unsubscribe();\r\n        this._scrolledCount--;\r\n\r\n        if (!this._scrolledCount) {\r\n          this._removeGlobalListener();\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._removeGlobalListener();\r\n    this.scrollContainers.forEach((_, container) => this.deregister(container));\r\n    this._scrolled.complete();\r\n  }\r\n\r\n  /**\r\n   * Returns an observable that emits whenever any of the\r\n   * scrollable ancestors of an element are scrolled.\r\n   * @param elementRef Element whose ancestors to listen for.\r\n   * @param auditTimeInMs Time to throttle the scroll events.\r\n   */\r\n  ancestorScrolled(elementRef: ElementRef, auditTimeInMs?: number): Observable<CdkScrollable|void> {\r\n    const ancestors = this.getAncestorScrollContainers(elementRef);\r\n\r\n    return this.scrolled(auditTimeInMs).pipe(filter(target => {\r\n      return !target || ancestors.indexOf(target) > -1;\r\n    }));\r\n  }\r\n\r\n  /** Returns all registered Scrollables that contain the provided element. */\r\n  getAncestorScrollContainers(elementRef: ElementRef): CdkScrollable[] {\r\n    const scrollingContainers: CdkScrollable[] = [];\r\n\r\n    this.scrollContainers.forEach((_subscription: Subscription, scrollable: CdkScrollable) => {\r\n      if (this._scrollableContainsElement(scrollable, elementRef)) {\r\n        scrollingContainers.push(scrollable);\r\n      }\r\n    });\r\n\r\n    return scrollingContainers;\r\n  }\r\n\r\n  /** Returns true if the element is contained within the provided Scrollable. */\r\n  private _scrollableContainsElement(scrollable: CdkScrollable, elementRef: ElementRef): boolean {\r\n    let element: HTMLElement | null = elementRef.nativeElement;\r\n    let scrollableElement = scrollable.getElementRef().nativeElement;\r\n\r\n    // Traverse through the element parents until we reach null, checking if any of the elements\r\n    // are the scrollable's element.\r\n    do {\r\n      if (element == scrollableElement) { return true; }\r\n    } while (element = element!.parentElement);\r\n\r\n    return false;\r\n  }\r\n\r\n  /** Sets up the global scroll listeners. */\r\n  private _addGlobalListener() {\r\n    this._globalSubscription = this._ngZone.runOutsideAngular(() => {\r\n      return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\r\n    });\r\n  }\r\n\r\n  /** Cleans up the global scroll listener. */\r\n  private _removeGlobalListener() {\r\n    if (this._globalSubscription) {\r\n      this._globalSubscription.unsubscribe();\r\n      this._globalSubscription = null;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/** @docs-private @deprecated @breaking-change 8.0.0 */\r\nexport function SCROLL_DISPATCHER_PROVIDER_FACTORY(\r\n    parentDispatcher: ScrollDispatcher, ngZone: NgZone, platform: Platform) {\r\n  return parentDispatcher || new ScrollDispatcher(ngZone, platform);\r\n}\r\n\r\n/** @docs-private @deprecated @breaking-change 8.0.0 */\r\nexport const SCROLL_DISPATCHER_PROVIDER = {\r\n  // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\r\n  provide: ScrollDispatcher,\r\n  deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone, Platform],\r\n  useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {ListRange} from '@angular/cdk/collections';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {animationFrameScheduler, asapScheduler, Observable, Subject, Observer} from 'rxjs';\r\nimport {auditTime, startWith, takeUntil} from 'rxjs/operators';\r\nimport {ScrollDispatcher} from './scroll-dispatcher';\r\nimport {CdkScrollable, ExtendedScrollToOptions} from './scrollable';\r\nimport {CdkVirtualForOf} from './virtual-for-of';\r\nimport {VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy} from './virtual-scroll-strategy';\r\n\r\n\r\n/** Checks if the given ranges are equal. */\r\nfunction rangesEqual(r1: ListRange, r2: ListRange): boolean {\r\n  return r1.start == r2.start && r1.end == r2.end;\r\n}\r\n\r\n/**\r\n * Scheduler to be used for scroll events. Needs to fall back to\r\n * something that doesn't rely on requestAnimationFrame on environments\r\n * that don't support it (e.g. server-side rendering).\r\n */\r\nconst SCROLL_SCHEDULER =\r\n    typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\r\n\r\n\r\n/** A viewport that virtualizes it's scrolling with the help of `CdkVirtualForOf`. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'cdk-virtual-scroll-viewport',\r\n  templateUrl: 'virtual-scroll-viewport.html',\r\n  styleUrls: ['virtual-scroll-viewport.css'],\r\n  host: {\r\n    'class': 'cdk-virtual-scroll-viewport',\r\n    '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\r\n    '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [{\r\n    provide: CdkScrollable,\r\n    useExisting: CdkVirtualScrollViewport,\r\n  }]\r\n})\r\nexport class CdkVirtualScrollViewport extends CdkScrollable implements OnInit, OnDestroy {\r\n  /** Emits when the viewport is detached from a CdkVirtualForOf. */\r\n  private _detachedSubject = new Subject<void>();\r\n\r\n  /** Emits when the rendered range changes. */\r\n  private _renderedRangeSubject = new Subject<ListRange>();\r\n\r\n  /** The direction the viewport scrolls. */\r\n  @Input() orientation: 'horizontal' | 'vertical' = 'vertical';\r\n\r\n  // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\r\n  // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\r\n  // depending on how the strategy calculates the scrolled index, it may come at a cost to\r\n  // performance.\r\n  /** Emits when the index of the first element visible in the viewport changes. */\r\n  @Output() scrolledIndexChange: Observable<number> =\r\n      new Observable((observer: Observer<number>) =>\r\n        this._scrollStrategy.scrolledIndexChange.subscribe(index =>\r\n            Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\r\n\r\n  /** The element that wraps the rendered content. */\r\n  @ViewChild('contentWrapper', {static: true}) _contentWrapper: ElementRef<HTMLElement>;\r\n\r\n  /** A stream that emits whenever the rendered range changes. */\r\n  renderedRangeStream: Observable<ListRange> = this._renderedRangeSubject.asObservable();\r\n\r\n  /**\r\n   * The transform used to scale the spacer to the same size as all content, including content that\r\n   * is not currently rendered.\r\n   */\r\n  _totalContentSizeTransform = '';\r\n\r\n  /**\r\n   * The total size of all content (in pixels), including content that is not currently rendered.\r\n   */\r\n  private _totalContentSize = 0;\r\n\r\n  /**\r\n   * The CSS transform applied to the rendered subset of items so that they appear within the bounds\r\n   * of the visible viewport.\r\n   */\r\n  private _renderedContentTransform: string;\r\n\r\n  /** The currently rendered range of indices. */\r\n  private _renderedRange: ListRange = {start: 0, end: 0};\r\n\r\n  /** The length of the data bound to this viewport (in number of items). */\r\n  private _dataLength = 0;\r\n\r\n  /** The size of the viewport (in pixels). */\r\n  private _viewportSize = 0;\r\n\r\n  /** the currently attached CdkVirtualForOf. */\r\n  private _forOf: CdkVirtualForOf<any> | null;\r\n\r\n  /** The last rendered content offset that was set. */\r\n  private _renderedContentOffset = 0;\r\n\r\n  /**\r\n   * Whether the last rendered content offset was to the end of the content (and therefore needs to\r\n   * be rewritten as an offset to the start of the content).\r\n   */\r\n  private _renderedContentOffsetNeedsRewrite = false;\r\n\r\n  /** Whether there is a pending change detection cycle. */\r\n  private _isChangeDetectionPending = false;\r\n\r\n  /** A list of functions to run after the next change detection cycle. */\r\n  private _runAfterChangeDetection: Function[] = [];\r\n\r\n  constructor(public elementRef: ElementRef<HTMLElement>,\r\n              private _changeDetectorRef: ChangeDetectorRef,\r\n              ngZone: NgZone,\r\n              @Optional() @Inject(VIRTUAL_SCROLL_STRATEGY)\r\n                  private _scrollStrategy: VirtualScrollStrategy,\r\n              @Optional() dir: Directionality,\r\n              scrollDispatcher: ScrollDispatcher) {\r\n    super(elementRef, scrollDispatcher, ngZone, dir);\r\n\r\n    if (!_scrollStrategy) {\r\n      throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    super.ngOnInit();\r\n\r\n    // It's still too early to measure the viewport at this point. Deferring with a promise allows\r\n    // the Viewport to be rendered with the correct size before we measure. We run this outside the\r\n    // zone to avoid causing more change detection cycles. We handle the change detection loop\r\n    // ourselves instead.\r\n    this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\r\n      this._measureViewportSize();\r\n      this._scrollStrategy.attach(this);\r\n\r\n      this.elementScrolled()\r\n          .pipe(\r\n              // Start off with a fake scroll event so we properly detect our initial position.\r\n              startWith(null!),\r\n              // Collect multiple events into one until the next animation frame. This way if\r\n              // there are multiple scroll events in the same frame we only need to recheck\r\n              // our layout once.\r\n              auditTime(0, SCROLL_SCHEDULER))\r\n          .subscribe(() => this._scrollStrategy.onContentScrolled());\r\n\r\n      this._markChangeDetectionNeeded();\r\n    }));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.detach();\r\n    this._scrollStrategy.detach();\r\n\r\n    // Complete all subjects\r\n    this._renderedRangeSubject.complete();\r\n    this._detachedSubject.complete();\r\n\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  /** Attaches a `CdkVirtualForOf` to this viewport. */\r\n  attach(forOf: CdkVirtualForOf<any>) {\r\n    if (this._forOf) {\r\n      throw Error('CdkVirtualScrollViewport is already attached.');\r\n    }\r\n\r\n    // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\r\n    // changes. Run outside the zone to avoid triggering change detection, since we're managing the\r\n    // change detection loop ourselves.\r\n    this.ngZone.runOutsideAngular(() => {\r\n      this._forOf = forOf;\r\n      this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\r\n        const newLength = data.length;\r\n        if (newLength !== this._dataLength) {\r\n          this._dataLength = newLength;\r\n          this._scrollStrategy.onDataLengthChanged();\r\n        }\r\n        this._doChangeDetection();\r\n      });\r\n    });\r\n  }\r\n\r\n  /** Detaches the current `CdkVirtualForOf`. */\r\n  detach() {\r\n    this._forOf = null;\r\n    this._detachedSubject.next();\r\n  }\r\n\r\n  /** Gets the length of the data bound to this viewport (in number of items). */\r\n  getDataLength(): number {\r\n    return this._dataLength;\r\n  }\r\n\r\n  /** Gets the size of the viewport (in pixels). */\r\n  getViewportSize(): number {\r\n    return this._viewportSize;\r\n  }\r\n\r\n  // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\r\n  // cycle happens. I'm being careful to only call it after the render cycle is complete and before\r\n  // setting it to something else, but its error prone and should probably be split into\r\n  // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\r\n\r\n  /** Get the current rendered range of items. */\r\n  getRenderedRange(): ListRange {\r\n    return this._renderedRange;\r\n  }\r\n\r\n  /**\r\n   * Sets the total size of all content (in pixels), including content that is not currently\r\n   * rendered.\r\n   */\r\n  setTotalContentSize(size: number) {\r\n    if (this._totalContentSize !== size) {\r\n      this._totalContentSize = size;\r\n      const axis = this.orientation == 'horizontal' ? 'X' : 'Y';\r\n      this._totalContentSizeTransform = `scale${axis}(${this._totalContentSize})`;\r\n      this._markChangeDetectionNeeded();\r\n    }\r\n  }\r\n\r\n  /** Sets the currently rendered range of indices. */\r\n  setRenderedRange(range: ListRange) {\r\n    if (!rangesEqual(this._renderedRange, range)) {\r\n      this._renderedRangeSubject.next(this._renderedRange = range);\r\n      this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\r\n   */\r\n  getOffsetToRenderedContentStart(): number | null {\r\n    return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\r\n  }\r\n\r\n  /**\r\n   * Sets the offset from the start of the viewport to either the start or end of the rendered data\r\n   * (in pixels).\r\n   */\r\n  setRenderedContentOffset(offset: number, to: 'to-start' | 'to-end' = 'to-start') {\r\n    // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\r\n    // in the negative direction.\r\n    const isRtl = this.dir && this.dir.value == 'rtl';\r\n    const isHorizontal = this.orientation == 'horizontal';\r\n    const axis = isHorizontal ? 'X' : 'Y';\r\n    const axisDirection = isHorizontal && isRtl ? -1 : 1;\r\n    let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\r\n    this._renderedContentOffset = offset;\r\n    if (to === 'to-end') {\r\n      transform += ` translate${axis}(-100%)`;\r\n      // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\r\n      // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\r\n      // expand upward).\r\n      this._renderedContentOffsetNeedsRewrite = true;\r\n    }\r\n    if (this._renderedContentTransform != transform) {\r\n      // We know this value is safe because we parse `offset` with `Number()` before passing it\r\n      // into the string.\r\n      this._renderedContentTransform = transform;\r\n      this._markChangeDetectionNeeded(() => {\r\n        if (this._renderedContentOffsetNeedsRewrite) {\r\n          this._renderedContentOffset -= this.measureRenderedContentSize();\r\n          this._renderedContentOffsetNeedsRewrite = false;\r\n          this.setRenderedContentOffset(this._renderedContentOffset);\r\n        } else {\r\n          this._scrollStrategy.onRenderedOffsetChanged();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scrolls to the given offset from the start of the viewport. Please note that this is not always\r\n   * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\r\n   * direction, this would be the equivalent of setting a fictional `scrollRight` property.\r\n   * @param offset The offset to scroll to.\r\n   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\r\n   */\r\n  scrollToOffset(offset: number, behavior: ScrollBehavior = 'auto') {\r\n    const options: ExtendedScrollToOptions = {behavior};\r\n    if (this.orientation === 'horizontal') {\r\n      options.start = offset;\r\n    } else {\r\n      options.top = offset;\r\n    }\r\n    this.scrollTo(options);\r\n  }\r\n\r\n  /**\r\n   * Scrolls to the offset for the given index.\r\n   * @param index The index of the element to scroll to.\r\n   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\r\n   */\r\n  scrollToIndex(index: number,  behavior: ScrollBehavior = 'auto') {\r\n    this._scrollStrategy.scrollToIndex(index, behavior);\r\n  }\r\n\r\n  /**\r\n   * Gets the current scroll offset from the start of the viewport (in pixels).\r\n   * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\r\n   *     in horizontal mode.\r\n   */\r\n  measureScrollOffset(from?: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end'): number {\r\n    return super.measureScrollOffset(\r\n        from ? from : this.orientation === 'horizontal' ? 'start' : 'top');\r\n  }\r\n\r\n  /** Measure the combined size of all of the rendered items. */\r\n  measureRenderedContentSize(): number {\r\n    const contentEl = this._contentWrapper.nativeElement;\r\n    return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\r\n  }\r\n\r\n  /**\r\n   * Measure the total combined size of the given range. Throws if the range includes items that are\r\n   * not rendered.\r\n   */\r\n  measureRangeSize(range: ListRange): number {\r\n    if (!this._forOf) {\r\n      return 0;\r\n    }\r\n    return this._forOf.measureRangeSize(range, this.orientation);\r\n  }\r\n\r\n  /** Update the viewport dimensions and re-render. */\r\n  checkViewportSize() {\r\n    // TODO: Cleanup later when add logic for handling content resize\r\n    this._measureViewportSize();\r\n    this._scrollStrategy.onDataLengthChanged();\r\n  }\r\n\r\n  /** Measure the viewport size. */\r\n  private _measureViewportSize() {\r\n    const viewportEl = this.elementRef.nativeElement;\r\n    this._viewportSize = this.orientation === 'horizontal' ?\r\n        viewportEl.clientWidth : viewportEl.clientHeight;\r\n  }\r\n\r\n  /** Queue up change detection to run. */\r\n  private _markChangeDetectionNeeded(runAfter?: Function) {\r\n    if (runAfter) {\r\n      this._runAfterChangeDetection.push(runAfter);\r\n    }\r\n\r\n    // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\r\n    // properties sequentially we only have to run `_doChangeDetection` once at the end.\r\n    if (!this._isChangeDetectionPending) {\r\n      this._isChangeDetectionPending = true;\r\n      this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\r\n        this._doChangeDetection();\r\n      }));\r\n    }\r\n  }\r\n\r\n  /** Run change detection. */\r\n  private _doChangeDetection() {\r\n    this._isChangeDetectionPending = false;\r\n\r\n    // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\r\n    // from the root, since the repeated items are content projected in. Calling `detectChanges`\r\n    // instead does not properly check the projected content.\r\n    this.ngZone.run(() => this._changeDetectorRef.markForCheck());\r\n    // Apply the content transform. The transform can't be set via an Angular binding because\r\n    // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\r\n    // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\r\n    // the `Number` function first to coerce it to a numeric value.\r\n    this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\r\n\r\n    const runAfterChangeDetection = this._runAfterChangeDetection;\r\n    this._runAfterChangeDetection = [];\r\n    for (const fn of runAfterChangeDetection) {\r\n      fn();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ArrayDataSource,\r\n  CollectionViewer,\r\n  DataSource,\r\n  ListRange,\r\n  isDataSource,\r\n} from '@angular/cdk/collections';\r\nimport {\r\n  Directive,\r\n  DoCheck,\r\n  EmbeddedViewRef,\r\n  Input,\r\n  IterableChangeRecord,\r\n  IterableChanges,\r\n  IterableDiffer,\r\n  IterableDiffers,\r\n  NgIterable,\r\n  NgZone,\r\n  OnDestroy,\r\n  SkipSelf,\r\n  TemplateRef,\r\n  TrackByFunction,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport {Observable, Subject, of as observableOf} from 'rxjs';\r\nimport {pairwise, shareReplay, startWith, switchMap, takeUntil} from 'rxjs/operators';\r\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\r\n\r\n\r\n/** The context for an item rendered by `CdkVirtualForOf` */\r\nexport type CdkVirtualForOfContext<T> = {\r\n  /** The item value. */\r\n  $implicit: T;\r\n  /** The DataSource, Observable, or NgIterable that was passed to *cdkVirtualFor. */\r\n  cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T>;\r\n  /** The index of the item in the DataSource. */\r\n  index: number;\r\n  /** The number of items in the DataSource. */\r\n  count: number;\r\n  /** Whether this is the first item in the DataSource. */\r\n  first: boolean;\r\n  /** Whether this is the last item in the DataSource. */\r\n  last: boolean;\r\n  /** Whether the index is even. */\r\n  even: boolean;\r\n  /** Whether the index is odd. */\r\n  odd: boolean;\r\n};\r\n\r\n\r\n/** Helper to extract size from a DOM Node. */\r\nfunction getSize(orientation: 'horizontal' | 'vertical', node: Node): number {\r\n  const el = node as Element;\r\n  if (!el.getBoundingClientRect) {\r\n    return 0;\r\n  }\r\n  const rect = el.getBoundingClientRect();\r\n  return orientation == 'horizontal' ? rect.width : rect.height;\r\n}\r\n\r\n\r\n/**\r\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\r\n * container.\r\n */\r\n@Directive({\r\n  selector: '[cdkVirtualFor][cdkVirtualForOf]',\r\n})\r\nexport class CdkVirtualForOf<T> implements CollectionViewer, DoCheck, OnDestroy {\r\n  /** Emits when the rendered view of the data changes. */\r\n  viewChange = new Subject<ListRange>();\r\n\r\n  /** Subject that emits when a new DataSource instance is given. */\r\n  private _dataSourceChanges = new Subject<DataSource<T>>();\r\n\r\n  /** The DataSource to display. */\r\n  @Input()\r\n  get cdkVirtualForOf(): DataSource<T> | Observable<T[]> | NgIterable<T> {\r\n    return this._cdkVirtualForOf;\r\n  }\r\n  set cdkVirtualForOf(value: DataSource<T> | Observable<T[]> | NgIterable<T>) {\r\n    this._cdkVirtualForOf = value;\r\n    const ds = isDataSource(value) ? value :\r\n        // Slice the value if its an NgIterable to ensure we're working with an array.\r\n        new ArrayDataSource<T>(\r\n            value instanceof Observable ? value : Array.prototype.slice.call(value || []));\r\n    this._dataSourceChanges.next(ds);\r\n  }\r\n  _cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T>;\r\n\r\n  /**\r\n   * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\r\n   * the item and produces a value to be used as the item's identity when tracking changes.\r\n   */\r\n  @Input()\r\n  get cdkVirtualForTrackBy(): TrackByFunction<T> | undefined {\r\n    return this._cdkVirtualForTrackBy;\r\n  }\r\n  set cdkVirtualForTrackBy(fn: TrackByFunction<T> | undefined) {\r\n    this._needsUpdate = true;\r\n    this._cdkVirtualForTrackBy = fn ?\r\n        (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) :\r\n        undefined;\r\n  }\r\n  private _cdkVirtualForTrackBy: TrackByFunction<T> | undefined;\r\n\r\n  /** The template used to stamp out new elements. */\r\n  @Input()\r\n  set cdkVirtualForTemplate(value: TemplateRef<CdkVirtualForOfContext<T>>) {\r\n    if (value) {\r\n      this._needsUpdate = true;\r\n      this._template = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The size of the cache used to store templates that are not being used for re-use later.\r\n   * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\r\n   */\r\n  @Input() cdkVirtualForTemplateCacheSize: number = 20;\r\n\r\n  /** Emits whenever the data in the current DataSource changes. */\r\n  dataStream: Observable<T[] | ReadonlyArray<T>> = this._dataSourceChanges\r\n      .pipe(\r\n          // Start off with null `DataSource`.\r\n          startWith(null!),\r\n          // Bundle up the previous and current data sources so we can work with both.\r\n          pairwise(),\r\n          // Use `_changeDataSource` to disconnect from the previous data source and connect to the\r\n          // new one, passing back a stream of data changes which we run through `switchMap` to give\r\n          // us a data stream that emits the latest data from whatever the current `DataSource` is.\r\n          switchMap(([prev, cur]) => this._changeDataSource(prev, cur)),\r\n          // Replay the last emitted data when someone subscribes.\r\n          shareReplay(1));\r\n\r\n  /** The differ used to calculate changes to the data. */\r\n  private _differ: IterableDiffer<T> | null = null;\r\n\r\n  /** The most recent data emitted from the DataSource. */\r\n  private _data: T[] | ReadonlyArray<T>;\r\n\r\n  /** The currently rendered items. */\r\n  private _renderedItems: T[];\r\n\r\n  /** The currently rendered range of indices. */\r\n  private _renderedRange: ListRange;\r\n\r\n  /**\r\n   * The template cache used to hold on ot template instancess that have been stamped out, but don't\r\n   * currently need to be rendered. These instances will be reused in the future rather than\r\n   * stamping out brand new ones.\r\n   */\r\n  private _templateCache: EmbeddedViewRef<CdkVirtualForOfContext<T>>[] = [];\r\n\r\n  /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\r\n  private _needsUpdate = false;\r\n\r\n  private _destroyed = new Subject<void>();\r\n\r\n  constructor(\r\n      /** The view container to add items to. */\r\n      private _viewContainerRef: ViewContainerRef,\r\n      /** The template to use when stamping out new items. */\r\n      private _template: TemplateRef<CdkVirtualForOfContext<T>>,\r\n      /** The set of available differs. */\r\n      private _differs: IterableDiffers,\r\n      /** The virtual scrolling viewport that these items are being rendered in. */\r\n      @SkipSelf() private _viewport: CdkVirtualScrollViewport,\r\n      ngZone: NgZone) {\r\n    this.dataStream.subscribe(data => {\r\n      this._data = data;\r\n      this._onRenderedDataChange();\r\n    });\r\n    this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\r\n      this._renderedRange = range;\r\n      ngZone.run(() => this.viewChange.next(this._renderedRange));\r\n      this._onRenderedDataChange();\r\n    });\r\n    this._viewport.attach(this);\r\n  }\r\n\r\n  /**\r\n   * Measures the combined size (width for horizontal orientation, height for vertical) of all items\r\n   * in the specified range. Throws an error if the range includes items that are not currently\r\n   * rendered.\r\n   */\r\n  measureRangeSize(range: ListRange, orientation: 'horizontal' | 'vertical'): number {\r\n    if (range.start >= range.end) {\r\n      return 0;\r\n    }\r\n    if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\r\n      throw Error(`Error: attempted to measure an item that isn't rendered.`);\r\n    }\r\n\r\n    // The index into the list of rendered views for the first item in the range.\r\n    const renderedStartIndex = range.start - this._renderedRange.start;\r\n    // The length of the range we're measuring.\r\n    const rangeLen = range.end - range.start;\r\n\r\n    // Loop over all root nodes for all items in the range and sum up their size.\r\n    let totalSize = 0;\r\n    let i = rangeLen;\r\n    while (i--) {\r\n      const view = this._viewContainerRef.get(i + renderedStartIndex) as\r\n          EmbeddedViewRef<CdkVirtualForOfContext<T>> | null;\r\n      let j = view ? view.rootNodes.length : 0;\r\n      while (j--) {\r\n        totalSize += getSize(orientation, view!.rootNodes[j]);\r\n      }\r\n    }\r\n\r\n    return totalSize;\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this._differ && this._needsUpdate) {\r\n      // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\r\n      // this list being rendered (can use simpler algorithm) vs needs update due to data actually\r\n      // changing (need to do this diff).\r\n      const changes = this._differ.diff(this._renderedItems);\r\n      if (!changes) {\r\n        this._updateContext();\r\n      } else {\r\n        this._applyChanges(changes);\r\n      }\r\n      this._needsUpdate = false;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._viewport.detach();\r\n\r\n    this._dataSourceChanges.next();\r\n    this._dataSourceChanges.complete();\r\n    this.viewChange.complete();\r\n\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n\r\n    for (let view of this._templateCache) {\r\n      view.destroy();\r\n    }\r\n  }\r\n\r\n  /** React to scroll state changes in the viewport. */\r\n  private _onRenderedDataChange() {\r\n    if (!this._renderedRange) {\r\n      return;\r\n    }\r\n    this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\r\n    if (!this._differ) {\r\n      this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\r\n    }\r\n    this._needsUpdate = true;\r\n  }\r\n\r\n  /** Swap out one `DataSource` for another. */\r\n  private _changeDataSource(oldDs: DataSource<T> | null, newDs: DataSource<T> | null):\r\n    Observable<T[] | ReadonlyArray<T>> {\r\n\r\n    if (oldDs) {\r\n      oldDs.disconnect(this);\r\n    }\r\n\r\n    this._needsUpdate = true;\r\n    return newDs ? newDs.connect(this) : observableOf();\r\n  }\r\n\r\n  /** Update the `CdkVirtualForOfContext` for all views. */\r\n  private _updateContext() {\r\n    const count = this._data.length;\r\n    let i = this._viewContainerRef.length;\r\n    while (i--) {\r\n      let view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\r\n      view.context.index = this._renderedRange.start + i;\r\n      view.context.count = count;\r\n      this._updateComputedContextProperties(view.context);\r\n      view.detectChanges();\r\n    }\r\n  }\r\n\r\n  /** Apply changes to the DOM. */\r\n  private _applyChanges(changes: IterableChanges<T>) {\r\n    // Rearrange the views to put them in the right location.\r\n    changes.forEachOperation((record: IterableChangeRecord<T>,\r\n                              adjustedPreviousIndex: number | null,\r\n                              currentIndex: number | null) => {\r\n      if (record.previousIndex == null) {  // Item added.\r\n        const view = this._insertViewForNewItem(currentIndex!);\r\n        view.context.$implicit = record.item;\r\n      } else if (currentIndex == null) {  // Item removed.\r\n        this._cacheView(this._detachView(adjustedPreviousIndex !));\r\n      } else {  // Item moved.\r\n        const view = this._viewContainerRef.get(adjustedPreviousIndex!) as\r\n            EmbeddedViewRef<CdkVirtualForOfContext<T>>;\r\n        this._viewContainerRef.move(view, currentIndex);\r\n        view.context.$implicit = record.item;\r\n      }\r\n    });\r\n\r\n    // Update $implicit for any items that had an identity change.\r\n    changes.forEachIdentityChange((record: IterableChangeRecord<T>) => {\r\n      const view = this._viewContainerRef.get(record.currentIndex!) as\r\n          EmbeddedViewRef<CdkVirtualForOfContext<T>>;\r\n      view.context.$implicit = record.item;\r\n    });\r\n\r\n    // Update the context variables on all items.\r\n    const count = this._data.length;\r\n    let i = this._viewContainerRef.length;\r\n    while (i--) {\r\n      const view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\r\n      view.context.index = this._renderedRange.start + i;\r\n      view.context.count = count;\r\n      this._updateComputedContextProperties(view.context);\r\n    }\r\n  }\r\n\r\n  /** Cache the given detached view. */\r\n  private _cacheView(view: EmbeddedViewRef<CdkVirtualForOfContext<T>>) {\r\n    if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\r\n      this._templateCache.push(view);\r\n    } else {\r\n      const index = this._viewContainerRef.indexOf(view);\r\n\r\n      // It's very unlikely that the index will ever be -1, but just in case,\r\n      // destroy the view on its own, otherwise destroy it through the\r\n      // container to ensure that all the references are removed.\r\n      if (index === -1) {\r\n        view.destroy();\r\n      } else {\r\n        this._viewContainerRef.remove(index);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Inserts a view for a new item, either from the cache or by creating a new one. */\r\n  private _insertViewForNewItem(index: number): EmbeddedViewRef<CdkVirtualForOfContext<T>> {\r\n    return this._insertViewFromCache(index) || this._createEmbeddedViewAt(index);\r\n  }\r\n\r\n  /** Update the computed properties on the `CdkVirtualForOfContext`. */\r\n  private _updateComputedContextProperties(context: CdkVirtualForOfContext<any>) {\r\n    context.first = context.index === 0;\r\n    context.last = context.index === context.count - 1;\r\n    context.even = context.index % 2 === 0;\r\n    context.odd = !context.even;\r\n  }\r\n\r\n  /** Creates a new embedded view and moves it to the given index */\r\n  private _createEmbeddedViewAt(index: number): EmbeddedViewRef<CdkVirtualForOfContext<T>> {\r\n    // Note that it's important that we insert the item directly at the proper index,\r\n    // rather than inserting it and the moving it in place, because if there's a directive\r\n    // on the same node that injects the `ViewContainerRef`, Angular will insert another\r\n    // comment node which can throw off the move when it's being repeated for all items.\r\n    return this._viewContainerRef.createEmbeddedView(this._template, {\r\n      $implicit: null!,\r\n      cdkVirtualForOf: this._cdkVirtualForOf,\r\n      index: -1,\r\n      count: -1,\r\n      first: false,\r\n      last: false,\r\n      odd: false,\r\n      even: false\r\n    }, index);\r\n  }\r\n\r\n  /** Inserts a recycled view from the cache at the given index. */\r\n  private _insertViewFromCache(index: number): EmbeddedViewRef<CdkVirtualForOfContext<T>>|null {\r\n    const cachedView = this._templateCache.pop();\r\n    if (cachedView) {\r\n      this._viewContainerRef.insert(cachedView, index);\r\n    }\r\n    return cachedView || null;\r\n  }\r\n\r\n  /** Detaches the embedded view at the given index. */\r\n  private _detachView(index: number): EmbeddedViewRef<CdkVirtualForOfContext<T>> {\r\n    return this._viewContainerRef.detach(index) as\r\n        EmbeddedViewRef<CdkVirtualForOfContext<T>>;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {Injectable, NgZone, OnDestroy, Optional, SkipSelf} from '@angular/core';\r\nimport {merge, of as observableOf, fromEvent, Observable, Subscription} from 'rxjs';\r\nimport {auditTime} from 'rxjs/operators';\r\n\r\n/** Time in ms to throttle the resize events by default. */\r\nexport const DEFAULT_RESIZE_TIME = 20;\r\n\r\n/** Object that holds the scroll position of the viewport in each direction. */\r\nexport interface ViewportScrollPosition {\r\n  top: number;\r\n  left: number;\r\n}\r\n\r\n/**\r\n * Simple utility for getting the bounds of the browser viewport.\r\n * @docs-private\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class ViewportRuler implements OnDestroy {\r\n  /** Cached viewport dimensions. */\r\n  private _viewportSize: {width: number; height: number};\r\n\r\n  /** Stream of viewport change events. */\r\n  private _change: Observable<Event>;\r\n\r\n  /** Subscription to streams that invalidate the cached viewport dimensions. */\r\n  private _invalidateCache: Subscription;\r\n\r\n  constructor(private _platform: Platform, ngZone: NgZone) {\r\n    ngZone.runOutsideAngular(() => {\r\n      this._change = _platform.isBrowser ?\r\n          merge(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange')) :\r\n          observableOf();\r\n\r\n      // Note that we need to do the subscription inside `runOutsideAngular`\r\n      // since subscribing is what causes the event listener to be added.\r\n      this._invalidateCache = this.change().subscribe(() => this._updateViewportSize());\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._invalidateCache.unsubscribe();\r\n  }\r\n\r\n  /** Returns the viewport's width and height. */\r\n  getViewportSize(): Readonly<{width: number, height: number}> {\r\n    if (!this._viewportSize) {\r\n      this._updateViewportSize();\r\n    }\r\n\r\n    const output = {width: this._viewportSize.width, height: this._viewportSize.height};\r\n\r\n    // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\r\n    if (!this._platform.isBrowser) {\r\n      this._viewportSize = null!;\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /** Gets a ClientRect for the viewport's bounds. */\r\n  getViewportRect(): ClientRect {\r\n    // Use the document element's bounding rect rather than the window scroll properties\r\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\r\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\r\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\r\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\r\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\r\n    // We use the documentElement instead of the body because, by default (without a css reset)\r\n    // browsers typically give the document body an 8px margin, which is not included in\r\n    // getBoundingClientRect().\r\n    const scrollPosition = this.getViewportScrollPosition();\r\n    const {width, height} = this.getViewportSize();\r\n\r\n    return {\r\n      top: scrollPosition.top,\r\n      left: scrollPosition.left,\r\n      bottom: scrollPosition.top + height,\r\n      right: scrollPosition.left + width,\r\n      height,\r\n      width,\r\n    };\r\n  }\r\n\r\n  /** Gets the (top, left) scroll position of the viewport. */\r\n  getViewportScrollPosition(): ViewportScrollPosition {\r\n    // While we can get a reference to the fake document\r\n    // during SSR, it doesn't have getBoundingClientRect.\r\n    if (!this._platform.isBrowser) {\r\n      return {top: 0, left: 0};\r\n    }\r\n\r\n    // The top-left-corner of the viewport is determined by the scroll position of the document\r\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\r\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\r\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\r\n    // `document.documentElement` works consistently, where the `top` and `left` values will\r\n    // equal negative the scroll position.\r\n    const documentElement = document.documentElement!;\r\n    const documentRect = documentElement.getBoundingClientRect();\r\n\r\n    const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\r\n                 documentElement.scrollTop || 0;\r\n\r\n    const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\r\n                  documentElement.scrollLeft || 0;\r\n\r\n    return {top, left};\r\n  }\r\n\r\n  /**\r\n   * Returns a stream that emits whenever the size of the viewport changes.\r\n   * @param throttleTime Time in milliseconds to throttle the stream.\r\n   */\r\n  change(throttleTime: number = DEFAULT_RESIZE_TIME): Observable<Event> {\r\n    return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\r\n  }\r\n\r\n  /** Updates the cached viewport size. */\r\n  private _updateViewportSize() {\r\n    this._viewportSize = this._platform.isBrowser ?\r\n        {width: window.innerWidth, height: window.innerHeight} :\r\n        {width: 0, height: 0};\r\n  }\r\n}\r\n\r\n\r\n/** @docs-private @deprecated @breaking-change 8.0.0 */\r\nexport function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler: ViewportRuler,\r\n                                                platform: Platform,\r\n                                                ngZone: NgZone) {\r\n  return parentRuler || new ViewportRuler(platform, ngZone);\r\n}\r\n\r\n/** @docs-private @deprecated @breaking-change 8.0.0 */\r\nexport const VIEWPORT_RULER_PROVIDER = {\r\n  // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\r\n  provide: ViewportRuler,\r\n  deps: [[new Optional(), new SkipSelf(), ViewportRuler], Platform, NgZone],\r\n  useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\r\n\r\n\r\n/** The injection token used to specify the virtual scrolling strategy. */\r\nexport const VIRTUAL_SCROLL_STRATEGY =\r\n    new InjectionToken<VirtualScrollStrategy>('VIRTUAL_SCROLL_STRATEGY');\r\n\r\n\r\n/** A strategy that dictates which items should be rendered in the viewport. */\r\nexport interface VirtualScrollStrategy {\r\n  /** Emits when the index of the first element visible in the viewport changes. */\r\n  scrolledIndexChange: Observable<number>;\r\n\r\n  /**\r\n   * Attaches this scroll strategy to a viewport.\r\n   * @param viewport The viewport to attach this strategy to.\r\n   */\r\n  attach(viewport: CdkVirtualScrollViewport): void;\r\n\r\n  /** Detaches this scroll strategy from the currently attached viewport. */\r\n  detach(): void;\r\n\r\n  /** Called when the viewport is scrolled (debounced using requestAnimationFrame). */\r\n  onContentScrolled(): void;\r\n\r\n  /** Called when the length of the data changes. */\r\n  onDataLengthChanged(): void;\r\n\r\n  /** Called when the range of items rendered in the DOM has changed. */\r\n  onContentRendered(): void;\r\n\r\n  /** Called when the offset of the rendered items changed. */\r\n  onRenderedOffsetChanged(): void;\r\n\r\n  /**\r\n   * Scroll to the offset for the given index.\r\n   * @param index The index of the element to scroll to.\r\n   * @param behavior The ScrollBehavior to use when scrolling.\r\n   */\r\n  scrollToIndex(index: number, behavior: ScrollBehavior): void;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directionality} from '@angular/cdk/bidi';\r\nimport {\r\n  getRtlScrollAxisType,\r\n  RtlScrollAxisType,\r\n  supportsScrollBehavior\r\n} from '@angular/cdk/platform';\r\nimport {Directive, ElementRef, NgZone, OnDestroy, OnInit, Optional} from '@angular/core';\r\nimport {fromEvent, Observable, Subject, Observer} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\nimport {ScrollDispatcher} from './scroll-dispatcher';\r\n\r\nexport type _Without<T> = {[P in keyof T]?: never};\r\nexport type _XOR<T, U> = (_Without<T> & U) | (_Without<U> & T);\r\nexport type _Top = {top?: number};\r\nexport type _Bottom = {bottom?: number};\r\nexport type _Left = {left?: number};\r\nexport type _Right = {right?: number};\r\nexport type _Start = {start?: number};\r\nexport type _End = {end?: number};\r\nexport type _XAxis = _XOR<_XOR<_Left, _Right>, _XOR<_Start, _End>>;\r\nexport type _YAxis = _XOR<_Top, _Bottom>;\r\n\r\n/**\r\n * An extended version of ScrollToOptions that allows expressing scroll offsets relative to the\r\n * top, bottom, left, right, start, or end of the viewport rather than just the top and left.\r\n * Please note: the top and bottom properties are mutually exclusive, as are the left, right,\r\n * start, and end properties.\r\n */\r\nexport type ExtendedScrollToOptions = _XAxis & _YAxis & ScrollOptions;\r\n\r\n/**\r\n * Sends an event when the directive's element is scrolled. Registers itself with the\r\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\r\n * can be listened to through the service.\r\n */\r\n@Directive({\r\n  selector: '[cdk-scrollable], [cdkScrollable]'\r\n})\r\nexport class CdkScrollable implements OnInit, OnDestroy {\r\n  private _destroyed = new Subject();\r\n\r\n  private _elementScrolled: Observable<Event> = new Observable((observer: Observer<Event>) =>\r\n      this.ngZone.runOutsideAngular(() =>\r\n          fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed))\r\n              .subscribe(observer)));\r\n\r\n  constructor(protected elementRef: ElementRef<HTMLElement>,\r\n              protected scrollDispatcher: ScrollDispatcher,\r\n              protected ngZone: NgZone,\r\n              @Optional() protected dir?: Directionality) {}\r\n\r\n  ngOnInit() {\r\n    this.scrollDispatcher.register(this);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.scrollDispatcher.deregister(this);\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /** Returns observable that emits when a scroll event is fired on the host element. */\r\n  elementScrolled(): Observable<Event> {\r\n    return this._elementScrolled;\r\n  }\r\n\r\n  /** Gets the ElementRef for the viewport. */\r\n  getElementRef(): ElementRef<HTMLElement> {\r\n    return this.elementRef;\r\n  }\r\n\r\n  /**\r\n   * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\r\n   * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\r\n   * left and right always refer to the left and right side of the scrolling container irrespective\r\n   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\r\n   * in an RTL context.\r\n   * @param options specified the offsets to scroll to.\r\n   */\r\n  scrollTo(options: ExtendedScrollToOptions): void {\r\n    const el = this.elementRef.nativeElement;\r\n    const isRtl = this.dir && this.dir.value == 'rtl';\r\n\r\n    // Rewrite start & end offsets as right or left offsets.\r\n    options.left = options.left == null ? (isRtl ? options.end : options.start) : options.left;\r\n    options.right = options.right == null ? (isRtl ? options.start : options.end) : options.right;\r\n\r\n    // Rewrite the bottom offset as a top offset.\r\n    if (options.bottom != null) {\r\n      (options as _Without<_Bottom> & _Top).top =\r\n          el.scrollHeight - el.clientHeight - options.bottom;\r\n    }\r\n\r\n    // Rewrite the right offset as a left offset.\r\n    if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\r\n      if (options.left != null) {\r\n        (options as _Without<_Left> & _Right).right =\r\n            el.scrollWidth - el.clientWidth - options.left;\r\n      }\r\n\r\n      if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\r\n        options.left = options.right;\r\n      } else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\r\n        options.left = options.right ? -options.right : options.right;\r\n      }\r\n    } else {\r\n      if (options.right != null) {\r\n        (options as _Without<_Right> & _Left).left =\r\n            el.scrollWidth - el.clientWidth - options.right;\r\n      }\r\n    }\r\n\r\n    this._applyScrollToOptions(options);\r\n  }\r\n\r\n  private _applyScrollToOptions(options: ScrollToOptions): void {\r\n    const el = this.elementRef.nativeElement;\r\n\r\n    if (supportsScrollBehavior()) {\r\n      el.scrollTo(options);\r\n    } else {\r\n      if (options.top != null) {\r\n        el.scrollTop = options.top;\r\n      }\r\n      if (options.left != null) {\r\n        el.scrollLeft = options.left;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Measures the scroll offset relative to the specified edge of the viewport. This method can be\r\n   * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\r\n   * about what scrollLeft means in RTL. The values returned by this method are normalized such that\r\n   * left and right always refer to the left and right side of the scrolling container irrespective\r\n   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\r\n   * in an RTL context.\r\n   * @param from The edge to measure from.\r\n   */\r\n  measureScrollOffset(from: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end'): number {\r\n    const LEFT = 'left';\r\n    const RIGHT = 'right';\r\n    const el = this.elementRef.nativeElement;\r\n    if (from == 'top') {\r\n      return el.scrollTop;\r\n    }\r\n    if (from == 'bottom') {\r\n      return el.scrollHeight - el.clientHeight - el.scrollTop;\r\n    }\r\n\r\n    // Rewrite start & end as left or right offsets.\r\n    const isRtl = this.dir && this.dir.value == 'rtl';\r\n    if (from == 'start') {\r\n      from = isRtl ? RIGHT : LEFT;\r\n    } else if (from == 'end') {\r\n      from = isRtl ? LEFT : RIGHT;\r\n    }\r\n\r\n    if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\r\n      // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\r\n      // 0 when scrolled all the way right.\r\n      if (from == LEFT) {\r\n        return el.scrollWidth - el.clientWidth - el.scrollLeft;\r\n      } else {\r\n        return el.scrollLeft;\r\n      }\r\n    } else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\r\n      // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\r\n      // 0 when scrolled all the way right.\r\n      if (from == LEFT) {\r\n        return el.scrollLeft + el.scrollWidth - el.clientWidth;\r\n      } else {\r\n        return -el.scrollLeft;\r\n      }\r\n    } else {\r\n      // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\r\n      // (scrollWidth - clientWidth) when scrolled all the way right.\r\n      if (from == LEFT) {\r\n        return el.scrollLeft;\r\n      } else {\r\n        return el.scrollWidth - el.clientWidth - el.scrollLeft;\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {BidiModule} from '@angular/cdk/bidi';\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {NgModule} from '@angular/core';\r\nimport {CdkFixedSizeVirtualScroll} from './fixed-size-virtual-scroll';\r\nimport {CdkScrollable} from './scrollable';\r\nimport {CdkVirtualForOf} from './virtual-for-of';\r\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\r\n\r\n@NgModule({\r\n  imports: [BidiModule, PlatformModule],\r\n  exports: [\r\n    BidiModule,\r\n    CdkFixedSizeVirtualScroll,\r\n    CdkScrollable,\r\n    CdkVirtualForOf,\r\n    CdkVirtualScrollViewport,\r\n  ],\r\n  declarations: [\r\n    CdkFixedSizeVirtualScroll,\r\n    CdkScrollable,\r\n    CdkVirtualForOf,\r\n    CdkVirtualScrollViewport,\r\n  ],\r\n})\r\nexport class ScrollingModule {}\r\n\r\n/**\r\n * @deprecated ScrollDispatchModule has been renamed to ScrollingModule.\r\n * @breaking-change 8.0.0 delete this alias\r\n */\r\n@NgModule({\r\n  imports: [ScrollingModule],\r\n  exports: [ScrollingModule],\r\n})\r\nexport class ScrollDispatchModule {}\r\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","_scrollStrategy","SCROLL_DISPATCHER_PROVIDER_FACTORY","parentDispatcher","ngZone","platform","ScrollDispatcher","rangesEqual","r1","r2","start","end","getSize","orientation","node","el","getBoundingClientRect","rect","width","height","VIEWPORT_RULER_PROVIDER_FACTORY","parentRuler","ViewportRuler","setPrototypeOf","__proto__","Array","p","hasOwnProperty","VIRTUAL_SCROLL_STRATEGY","InjectionToken","FixedSizeVirtualScrollStrategy","itemSize","minBufferPx","maxBufferPx","_scrolledIndexChange","Subject","scrolledIndexChange","pipe","distinctUntilChanged","_viewport","_itemSize","_minBufferPx","_maxBufferPx","attach","viewport","_updateTotalContentSize","_updateRenderedRange","detach","complete","updateItemAndBufferSize","Error","onContentScrolled","onDataLengthChanged","onContentRendered","onRenderedOffsetChanged","scrollToIndex","index","behavior","scrollToOffset","setTotalContentSize","getDataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","renderedRange","getRenderedRange","newRange","viewportSize","getViewportSize","dataLength","startBuffer","expandStart","Math","ceil","max","min","endBuffer","expandEnd","floor","setRenderedRange","setRenderedContentOffset","next","CdkFixedSizeVirtualScroll","defineProperty","value","coerceNumberProperty","ngOnChanges","type","Directive","args","selector","providers","provide","useFactory","deps","forwardRef","Input","_ngZone","_platform","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","Map","register","scrollable","_this","has","set","elementScrolled","subscribe","deregister","scrollableReference","get","unsubscribe","delete","scrolled","auditTimeInMs","isBrowser","Observable","observer","_addGlobalListener","subscription","auditTime","_removeGlobalListener","observableOf","ngOnDestroy","forEach","_","container","ancestorScrolled","elementRef","ancestors","getAncestorScrollContainers","filter","target","indexOf","scrollingContainers","_subscription","_scrollableContainsElement","push","element","nativeElement","scrollableElement","getElementRef","parentElement","runOutsideAngular","fromEvent","window","document","Injectable","providedIn","NgZone","Platform","SCROLL_DISPATCHER_PROVIDER","Optional","SkipSelf","CdkScrollable","scrollDispatcher","dir","_destroyed","_elementScrolled","takeUntil","ngOnInit","scrollTo","options","isRtl","left","right","bottom","top","scrollHeight","clientHeight","getRtlScrollAxisType","RtlScrollAxisType","NORMAL","scrollWidth","clientWidth","INVERTED","NEGATED","_applyScrollToOptions","supportsScrollBehavior","scrollTop","scrollLeft","from","ElementRef","Directionality","decorators","SCROLL_SCHEDULER","requestAnimationFrame","animationFrameScheduler","asapScheduler","CdkVirtualScrollViewport","_super","_changeDetectorRef","call","_detachedSubject","_renderedRangeSubject","Promise","resolve","then","run","renderedRangeStream","asObservable","_totalContentSizeTransform","_totalContentSize","_renderedRange","_dataLength","_viewportSize","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_isChangeDetectionPending","_runAfterChangeDetection","tslib_1.__extends","_measureViewportSize","startWith","_markChangeDetectionNeeded","forOf","_forOf","dataStream","data","newLength","length","_doChangeDetection","size","axis","range","getOffsetToRenderedContentStart","offset","to","isHorizontal","axisDirection","transform","Number","_renderedContentTransform","measureRenderedContentSize","contentEl","_contentWrapper","offsetWidth","offsetHeight","measureRangeSize","checkViewportSize","viewportEl","runAfter","markForCheck","style","runAfterChangeDetection","_i","runAfterChangeDetection_1","fn","Component","template","styles","host","class","[class.cdk-virtual-scroll-orientation-horizontal]","[class.cdk-virtual-scroll-orientation-vertical]","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","useExisting","undefined","Inject","propDecorators","ViewChild","static","CdkVirtualForOf","_viewContainerRef","_template","_differs","viewChange","_dataSourceChanges","cdkVirtualForTemplateCacheSize","pairwise","switchMap","_a","prev","cur","_changeDataSource","shareReplay","_differ","_templateCache","_needsUpdate","_data","_onRenderedDataChange","_cdkVirtualForOf","ds","isDataSource","ArrayDataSource","slice","_cdkVirtualForTrackBy","item","renderedStartIndex","rangeLen","totalSize","i","view","j","rootNodes","ngDoCheck","changes","diff","_renderedItems","_applyChanges","_updateContext","destroy","find","cdkVirtualForTrackBy","oldDs","newDs","disconnect","connect","count","context","_updateComputedContextProperties","detectChanges","forEachOperation","record","adjustedPreviousIndex","currentIndex","previousIndex","_insertViewForNewItem","$implicit","_cacheView","_detachView","move","forEachIdentityChange","remove","_insertViewFromCache","_createEmbeddedViewAt","first","last","even","odd","createEmbeddedView","cdkVirtualForOf","cachedView","pop","insert","ViewContainerRef","TemplateRef","IterableDiffers","cdkVirtualForTemplate","ScrollingModule","NgModule","imports","BidiModule","PlatformModule","exports","declarations","ScrollDispatchModule","_change","merge","_invalidateCache","change","_updateViewportSize","output","getViewportRect","scrollPosition","getViewportScrollPosition","documentElement","documentRect","body","scrollY","scrollX","throttleTime","innerWidth","innerHeight","VIEWPORT_RULER_PROVIDER"],"mappings":"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"}