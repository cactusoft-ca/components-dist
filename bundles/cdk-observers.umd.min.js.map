{"version":3,"file":"cdk-observers.umd.min.js","sources":["../../src/cdk/observers/observe-content.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty, coerceNumberProperty, coerceElement} from '@angular/cdk/coercion';\r\nimport {\r\n  AfterContentInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Injectable,\r\n  Input,\r\n  NgModule,\r\n  NgZone,\r\n  OnDestroy,\r\n  Output,\r\n} from '@angular/core';\r\nimport {Observable, Subject, Subscription, Observer} from 'rxjs';\r\nimport {debounceTime} from 'rxjs/operators';\r\n\r\n/**\r\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\r\n * @docs-private\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class MutationObserverFactory {\r\n  create(callback: MutationCallback): MutationObserver | null {\r\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\r\n  }\r\n}\r\n\r\n\r\n/** An injectable service that allows watching elements for changes to their content. */\r\n@Injectable({providedIn: 'root'})\r\nexport class ContentObserver implements OnDestroy {\r\n  /** Keeps track of the existing MutationObservers so they can be reused. */\r\n  private _observedElements = new Map<Element, {\r\n    observer: MutationObserver | null,\r\n    stream: Subject<MutationRecord[]>,\r\n    count: number\r\n  }>();\r\n\r\n  constructor(private _mutationObserverFactory: MutationObserverFactory) {}\r\n\r\n  ngOnDestroy() {\r\n    this._observedElements.forEach((_, element) => this._cleanupObserver(element));\r\n  }\r\n\r\n  /**\r\n   * Observe content changes on an element.\r\n   * @param element The element to observe for content changes.\r\n   */\r\n  observe(element: Element): Observable<MutationRecord[]>;\r\n\r\n  /**\r\n   * Observe content changes on an element.\r\n   * @param element The element to observe for content changes.\r\n   */\r\n  observe(element: ElementRef<Element>): Observable<MutationRecord[]>;\r\n\r\n  observe(elementOrRef: Element | ElementRef<Element>): Observable<MutationRecord[]> {\r\n    const element = coerceElement(elementOrRef);\r\n\r\n    return new Observable((observer: Observer<MutationRecord[]>) => {\r\n      const stream = this._observeElement(element);\r\n      const subscription = stream.subscribe(observer);\r\n\r\n      return () => {\r\n        subscription.unsubscribe();\r\n        this._unobserveElement(element);\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Observes the given element by using the existing MutationObserver if available, or creating a\r\n   * new one if not.\r\n   */\r\n  private _observeElement(element: Element): Subject<MutationRecord[]> {\r\n    if (!this._observedElements.has(element)) {\r\n      const stream = new Subject<MutationRecord[]>();\r\n      const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\r\n      if (observer) {\r\n        observer.observe(element, {\r\n          characterData: true,\r\n          childList: true,\r\n          subtree: true\r\n        });\r\n      }\r\n      this._observedElements.set(element, {observer, stream, count: 1});\r\n    } else {\r\n      this._observedElements.get(element)!.count++;\r\n    }\r\n    return this._observedElements.get(element)!.stream;\r\n  }\r\n\r\n  /**\r\n   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\r\n   * observing this element.\r\n   */\r\n  private _unobserveElement(element: Element) {\r\n    if (this._observedElements.has(element)) {\r\n      this._observedElements.get(element)!.count--;\r\n      if (!this._observedElements.get(element)!.count) {\r\n        this._cleanupObserver(element);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Clean up the underlying MutationObserver for the specified element. */\r\n  private _cleanupObserver(element: Element) {\r\n    if (this._observedElements.has(element)) {\r\n      const {observer, stream} = this._observedElements.get(element)!;\r\n      if (observer) {\r\n        observer.disconnect();\r\n      }\r\n      stream.complete();\r\n      this._observedElements.delete(element);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Directive that triggers a callback whenever the content of\r\n * its associated element has changed.\r\n */\r\n@Directive({\r\n  selector: '[cdkObserveContent]',\r\n  exportAs: 'cdkObserveContent',\r\n})\r\nexport class CdkObserveContent implements AfterContentInit, OnDestroy {\r\n  /** Event emitted for each change in the element's content. */\r\n  @Output('cdkObserveContent') event = new EventEmitter<MutationRecord[]>();\r\n\r\n  /**\r\n   * Whether observing content is disabled. This option can be used\r\n   * to disconnect the underlying MutationObserver until it is needed.\r\n   */\r\n  @Input('cdkObserveContentDisabled')\r\n  get disabled() { return this._disabled; }\r\n  set disabled(value: any) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n    this._disabled ? this._unsubscribe() : this._subscribe();\r\n  }\r\n  private _disabled = false;\r\n\r\n  /** Debounce interval for emitting the changes. */\r\n  @Input()\r\n  get debounce(): number { return this._debounce; }\r\n  set debounce(value: number) {\r\n    this._debounce = coerceNumberProperty(value);\r\n    this._subscribe();\r\n  }\r\n  private _debounce: number;\r\n\r\n  private _currentSubscription: Subscription | null = null;\r\n\r\n  constructor(private _contentObserver: ContentObserver,\r\n              private _elementRef: ElementRef<HTMLElement>,\r\n              private _ngZone: NgZone) {}\r\n\r\n  ngAfterContentInit() {\r\n    if (!this._currentSubscription && !this.disabled) {\r\n      this._subscribe();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._unsubscribe();\r\n  }\r\n\r\n  private _subscribe() {\r\n    this._unsubscribe();\r\n    const stream = this._contentObserver.observe(this._elementRef);\r\n\r\n    // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\r\n    // Consider brining it back inside the zone next time we're making breaking changes.\r\n    // Bringing it back inside can cause things like infinite change detection loops and changed\r\n    // after checked errors if people's code isn't handling it properly.\r\n    this._ngZone.runOutsideAngular(() => {\r\n      this._currentSubscription =\r\n          (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\r\n    });\r\n  }\r\n\r\n  private _unsubscribe() {\r\n    if (this._currentSubscription) {\r\n      this._currentSubscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n\r\n\r\n@NgModule({\r\n  exports: [CdkObserveContent],\r\n  declarations: [CdkObserveContent],\r\n  providers: [MutationObserverFactory]\r\n})\r\nexport class ObserversModule {}\r\n"],"names":["MutationObserverFactory","prototype","create","callback","MutationObserver","type","Injectable","args","providedIn","ContentObserver","_mutationObserverFactory","this","_observedElements","Map","ngOnDestroy","_this","forEach","_","element","_cleanupObserver","observe","elementOrRef","coerceElement","Observable","observer","stream","_observeElement","subscription","subscribe","unsubscribe","_unobserveElement","has","get","count","stream_1","Subject","mutations","next","characterData","childList","subtree","set","_a","disconnect","complete","delete","CdkObserveContent","_contentObserver","_elementRef","_ngZone","event","EventEmitter","_disabled","_currentSubscription","Object","defineProperty","value","coerceBooleanProperty","_unsubscribe","_subscribe","_debounce","coerceNumberProperty","ngAfterContentInit","disabled","runOutsideAngular","debounce","pipe","debounceTime","Directive","selector","exportAs","ElementRef","NgZone","Output","Input","ObserversModule","NgModule","exports","declarations","providers"],"mappings":"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"}