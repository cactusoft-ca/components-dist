{"version":3,"file":"cdk-table.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/cdk/table/can-stick.ts","../../src/cdk/table/table-errors.ts","../../src/cdk/table/cell.ts","../../src/cdk/table/row.ts","../../src/cdk/table/sticky-styler.ts","../../src/cdk/table/table.ts","../../src/cdk/table/text-column.ts","../../src/cdk/table/table-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\n\r\n/** @docs-private */\r\nexport type Constructor<T> = new(...args: any[]) => T;\r\n\r\n/**\r\n * Interface for a mixin to provide a directive with a function that checks if the sticky input has\r\n * been changed since the last time the function was called. Essentially adds a dirty-check to the\r\n * sticky value.\r\n * @docs-private\r\n */\r\nexport interface CanStick {\r\n  /** Whether sticky positioning should be applied. */\r\n  sticky: boolean;\r\n\r\n  /** Whether the sticky input has changed since it was last checked. */\r\n  _hasStickyChanged: boolean;\r\n\r\n  /** Whether the sticky value has changed since this was last called. */\r\n  hasStickyChanged(): boolean;\r\n\r\n  /** Resets the dirty check for cases where the sticky state has been used without checking. */\r\n  resetStickyChanged(): void;\r\n}\r\n\r\n/** @docs-private */\r\nexport type CanStickCtor = Constructor<CanStick>;\r\n\r\n/**\r\n * Mixin to provide a directive with a function that checks if the sticky input has been\r\n * changed since the last time the function was called. Essentially adds a dirty-check to the\r\n * sticky value.\r\n * @docs-private\r\n */\r\nexport function mixinHasStickyInput<T extends Constructor<{}>>(base: T): CanStickCtor & T {\r\n  return class extends base {\r\n    /** Whether sticky positioning should be applied. */\r\n    get sticky(): boolean { return this._sticky; }\r\n    set sticky(v: boolean) {\r\n      const prevValue = this._sticky;\r\n      this._sticky = coerceBooleanProperty(v);\r\n      this._hasStickyChanged = prevValue !== this._sticky;\r\n    }\r\n    _sticky: boolean = false;\r\n\r\n    /** Whether the sticky input has changed since it was last checked. */\r\n    _hasStickyChanged: boolean = false;\r\n\r\n    /** Whether the sticky value has changed since this was last called. */\r\n    hasStickyChanged(): boolean {\r\n      const hasStickyChanged = this._hasStickyChanged;\r\n      this._hasStickyChanged = false;\r\n      return hasStickyChanged;\r\n    }\r\n\r\n    /** Resets the dirty check for cases where the sticky state has been used without checking. */\r\n    resetStickyChanged() {\r\n      this._hasStickyChanged = false;\r\n    }\r\n\r\n    constructor(...args: any[]) { super(...args); }\r\n  };\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Returns an error to be thrown when attempting to find an unexisting column.\r\n * @param id Id whose lookup failed.\r\n * @docs-private\r\n */\r\nexport function getTableUnknownColumnError(id: string) {\r\n  return Error(`Could not find column with id \"${id}\".`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when two column definitions have the same name.\r\n * @docs-private\r\n */\r\nexport function getTableDuplicateColumnNameError(name: string) {\r\n  return Error(`Duplicate column definition name provided: \"${name}\".`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\r\n * @docs-private\r\n */\r\nexport function getTableMultipleDefaultRowDefsError() {\r\n  return Error(`There can only be one default row without a when predicate function.`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\r\n * @docs-private\r\n */\r\nexport function getTableMissingMatchingRowDefError(data: any) {\r\n  return Error(`Could not find a matching row definition for the` +\r\n      `provided row data: ${JSON.stringify(data)}`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when there is no row definitions present in the content.\r\n * @docs-private\r\n */\r\nexport function getTableMissingRowDefsError() {\r\n  return Error('Missing definitions for header, footer, and row; ' +\r\n      'cannot determine which columns should be rendered.');\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when the data source does not match the compatible types.\r\n * @docs-private\r\n */\r\nexport function getTableUnknownDataSourceError() {\r\n  return Error(`Provided data source did not match an array, Observable, or DataSource`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\r\n * @docs-private\r\n */\r\nexport function getTableTextColumnMissingParentTableError() {\r\n  return Error(`Text column could not find a parent table for registration.`);\r\n}\r\n\r\n/**\r\n * Returns an error to be thrown when a table text column doesn't have a name.\r\n * @docs-private\r\n */\r\nexport function getTableTextColumnMissingNameError() {\r\n  return Error(`Table text column must have a name.`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {ContentChild, Directive, ElementRef, Input, TemplateRef} from '@angular/core';\r\nimport {CanStick, CanStickCtor, mixinHasStickyInput} from './can-stick';\r\n\r\n\r\n/** Base interface for a cell definition. Captures a column's cell template definition. */\r\nexport interface CellDef {\r\n  template: TemplateRef<any>;\r\n}\r\n\r\n/**\r\n * Cell definition for a CDK table.\r\n * Captures the template of a column's data row cell as well as cell-specific properties.\r\n */\r\n@Directive({selector: '[cdkCellDef]'})\r\nexport class CdkCellDef implements CellDef {\r\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {}\r\n}\r\n\r\n/**\r\n * Header cell definition for a CDK table.\r\n * Captures the template of a column's header cell and as well as cell-specific properties.\r\n */\r\n@Directive({selector: '[cdkHeaderCellDef]'})\r\nexport class CdkHeaderCellDef implements CellDef {\r\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {}\r\n}\r\n\r\n/**\r\n * Footer cell definition for a CDK table.\r\n * Captures the template of a column's footer cell and as well as cell-specific properties.\r\n */\r\n@Directive({selector: '[cdkFooterCellDef]'})\r\nexport class CdkFooterCellDef implements CellDef {\r\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {}\r\n}\r\n\r\n// Boilerplate for applying mixins to CdkColumnDef.\r\n/** @docs-private */\r\nclass CdkColumnDefBase {}\r\nconst _CdkColumnDefBase: CanStickCtor&typeof CdkColumnDefBase =\r\n    mixinHasStickyInput(CdkColumnDefBase);\r\n\r\n/**\r\n * Column definition for the CDK table.\r\n * Defines a set of cells available for a table column.\r\n */\r\n@Directive({\r\n  selector: '[cdkColumnDef]',\r\n  inputs: ['sticky'],\r\n  providers: [{provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef}],\r\n})\r\nexport class CdkColumnDef extends _CdkColumnDefBase implements CanStick {\r\n  /** Unique name for this column. */\r\n  @Input('cdkColumnDef')\r\n  get name(): string {\r\n    return this._name;\r\n  }\r\n  set name(name: string) {\r\n    // If the directive is set without a name (updated programatically), then this setter will\r\n    // trigger with an empty string and should not overwrite the programatically set value.\r\n    if (!name) {\r\n      return;\r\n    }\r\n\r\n    this._name = name;\r\n    this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\r\n  }\r\n  _name: string;\r\n\r\n  /**\r\n   * Whether this column should be sticky positioned on the end of the row. Should make sure\r\n   * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\r\n   * has been changed.\r\n   */\r\n  @Input('stickyEnd')\r\n  get stickyEnd(): boolean {\r\n    return this._stickyEnd;\r\n  }\r\n  set stickyEnd(v: boolean) {\r\n    const prevValue = this._stickyEnd;\r\n    this._stickyEnd = coerceBooleanProperty(v);\r\n    this._hasStickyChanged = prevValue !== this._stickyEnd;\r\n  }\r\n  _stickyEnd: boolean = false;\r\n\r\n  /** @docs-private */\r\n  @ContentChild(CdkCellDef, {static: false}) cell: CdkCellDef;\r\n\r\n  /** @docs-private */\r\n  @ContentChild(CdkHeaderCellDef, {static: false}) headerCell: CdkHeaderCellDef;\r\n\r\n  /** @docs-private */\r\n  @ContentChild(CdkFooterCellDef, {static: false}) footerCell: CdkFooterCellDef;\r\n\r\n  /**\r\n   * Transformed version of the column name that can be used as part of a CSS classname. Excludes\r\n   * all non-alphanumeric characters and the special characters '-' and '_'. Any characters that\r\n   * do not match are replaced by the '-' character.\r\n   */\r\n  cssClassFriendlyName: string;\r\n}\r\n\r\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\r\nexport class BaseCdkCell {\r\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\r\n    const columnClassName = `cdk-column-${columnDef.cssClassFriendlyName}`;\r\n    elementRef.nativeElement.classList.add(columnClassName);\r\n  }\r\n}\r\n\r\n/** Header cell template container that adds the right classes and role. */\r\n@Directive({\r\n  selector: 'cdk-header-cell, th[cdk-header-cell]',\r\n  host: {\r\n    'class': 'cdk-header-cell',\r\n    'role': 'columnheader',\r\n  },\r\n})\r\nexport class CdkHeaderCell extends BaseCdkCell {\r\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\r\n    super(columnDef, elementRef);\r\n  }\r\n}\r\n\r\n/** Footer cell template container that adds the right classes and role. */\r\n@Directive({\r\n  selector: 'cdk-footer-cell, td[cdk-footer-cell]',\r\n  host: {\r\n    'class': 'cdk-footer-cell',\r\n    'role': 'gridcell',\r\n  },\r\n})\r\nexport class CdkFooterCell extends BaseCdkCell {\r\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\r\n    super(columnDef, elementRef);\r\n  }\r\n}\r\n\r\n/** Cell template container that adds the right classes and role. */\r\n@Directive({\r\n  selector: 'cdk-cell, td[cdk-cell]',\r\n  host: {\r\n    'class': 'cdk-cell',\r\n    'role': 'gridcell',\r\n  },\r\n})\r\nexport class CdkCell extends BaseCdkCell {\r\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\r\n    super(columnDef, elementRef);\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Directive,\r\n  IterableChanges,\r\n  IterableDiffer,\r\n  IterableDiffers,\r\n  OnChanges,\r\n  OnDestroy,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  ViewContainerRef,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {CanStick, CanStickCtor, mixinHasStickyInput} from './can-stick';\r\nimport {CdkCellDef, CdkColumnDef} from './cell';\r\n\r\n/**\r\n * The row template that can be used by the mat-table. Should not be used outside of the\r\n * material library.\r\n */\r\nexport const CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\r\n\r\n/**\r\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\r\n * for changes and notifying the table.\r\n */\r\nexport abstract class BaseRowDef implements OnChanges {\r\n  /** The columns to be displayed on this row. */\r\n  columns: Iterable<string>;\r\n\r\n  /** Differ used to check if any changes were made to the columns. */\r\n  protected _columnsDiffer: IterableDiffer<any>;\r\n\r\n  constructor(\r\n      /** @docs-private */ public template: TemplateRef<any>, protected _differs: IterableDiffers) {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    // Create a new columns differ if one does not yet exist. Initialize it based on initial value\r\n    // of the columns property or an empty array if none is provided.\r\n    if (!this._columnsDiffer) {\r\n      const columns = (changes['columns'] && changes['columns'].currentValue) || [];\r\n      this._columnsDiffer = this._differs.find(columns).create();\r\n      this._columnsDiffer.diff(columns);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the difference between the current columns and the columns from the last diff, or null\r\n   * if there is no difference.\r\n   */\r\n  getColumnsDiff(): IterableChanges<any>|null {\r\n    return this._columnsDiffer.diff(this.columns);\r\n  }\r\n\r\n  /** Gets this row def's relevant cell template from the provided column def. */\r\n  extractCellTemplate(column: CdkColumnDef): TemplateRef<any> {\r\n    if (this instanceof CdkHeaderRowDef) {\r\n      return column.headerCell.template;\r\n    }\r\n    if (this instanceof CdkFooterRowDef) {\r\n      return column.footerCell.template;\r\n    } else {\r\n      return column.cell.template;\r\n    }\r\n  }\r\n}\r\n\r\n// Boilerplate for applying mixins to CdkHeaderRowDef.\r\n/** @docs-private */\r\nclass CdkHeaderRowDefBase extends BaseRowDef {}\r\nconst _CdkHeaderRowDefBase: CanStickCtor&typeof CdkHeaderRowDefBase =\r\n    mixinHasStickyInput(CdkHeaderRowDefBase);\r\n\r\n/**\r\n * Header row definition for the CDK table.\r\n * Captures the header row's template and other header properties such as the columns to display.\r\n */\r\n@Directive({\r\n  selector: '[cdkHeaderRowDef]',\r\n  inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky'],\r\n})\r\nexport class CdkHeaderRowDef extends _CdkHeaderRowDefBase implements CanStick, OnChanges {\r\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\r\n    super(template, _differs);\r\n  }\r\n\r\n  // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\r\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    super.ngOnChanges(changes);\r\n  }\r\n}\r\n\r\n// Boilerplate for applying mixins to CdkFooterRowDef.\r\n/** @docs-private */\r\nclass CdkFooterRowDefBase extends BaseRowDef {}\r\nconst _CdkFooterRowDefBase: CanStickCtor&typeof CdkFooterRowDefBase =\r\n    mixinHasStickyInput(CdkFooterRowDefBase);\r\n\r\n/**\r\n * Footer row definition for the CDK table.\r\n * Captures the footer row's template and other footer properties such as the columns to display.\r\n */\r\n@Directive({\r\n  selector: '[cdkFooterRowDef]',\r\n  inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky'],\r\n})\r\nexport class CdkFooterRowDef extends _CdkFooterRowDefBase implements CanStick, OnChanges {\r\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\r\n    super(template, _differs);\r\n  }\r\n\r\n  // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\r\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    super.ngOnChanges(changes);\r\n  }\r\n}\r\n\r\n/**\r\n * Data row definition for the CDK table.\r\n * Captures the header row's template and other row properties such as the columns to display and\r\n * a when predicate that describes when this row should be used.\r\n */\r\n@Directive({\r\n  selector: '[cdkRowDef]',\r\n  inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],\r\n})\r\nexport class CdkRowDef<T> extends BaseRowDef {\r\n  /**\r\n   * Function that should return true if this row template should be used for the provided index\r\n   * and row data. If left undefined, this row will be considered the default row template to use\r\n   * when no other when functions return true for the data.\r\n   * For every row, there must be at least one when function that passes or an undefined to default.\r\n   */\r\n  when: (index: number, rowData: T) => boolean;\r\n\r\n  // TODO(andrewseguin): Add an input for providing a switch function to determine\r\n  //   if this template should be used.\r\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\r\n    super(template, _differs);\r\n  }\r\n}\r\n\r\n/** Context provided to the row cells when `multiTemplateDataRows` is false */\r\nexport interface CdkCellOutletRowContext<T> {\r\n  /** Data for the row that this cell is located within. */\r\n  $implicit?: T;\r\n\r\n  /** Index of the data object in the provided data array. */\r\n  index?: number;\r\n\r\n  /** Length of the number of total rows. */\r\n  count?: number;\r\n\r\n  /** True if this cell is contained in the first row. */\r\n  first?: boolean;\r\n\r\n  /** True if this cell is contained in the last row. */\r\n  last?: boolean;\r\n\r\n  /** True if this cell is contained in a row with an even-numbered index. */\r\n  even?: boolean;\r\n\r\n  /** True if this cell is contained in a row with an odd-numbered index. */\r\n  odd?: boolean;\r\n}\r\n\r\n/**\r\n * Context provided to the row cells when `multiTemplateDataRows` is true. This context is the same\r\n * as CdkCellOutletRowContext except that the single `index` value is replaced by `dataIndex` and\r\n * `renderIndex`.\r\n */\r\nexport interface CdkCellOutletMultiRowContext<T> {\r\n  /** Data for the row that this cell is located within. */\r\n  $implicit?: T;\r\n\r\n  /** Index of the data object in the provided data array. */\r\n  dataIndex?: number;\r\n\r\n  /** Index location of the rendered row that this cell is located within. */\r\n  renderIndex?: number;\r\n\r\n  /** Length of the number of total rows. */\r\n  count?: number;\r\n\r\n  /** True if this cell is contained in the first row. */\r\n  first?: boolean;\r\n\r\n  /** True if this cell is contained in the last row. */\r\n  last?: boolean;\r\n\r\n  /** True if this cell is contained in a row with an even-numbered index. */\r\n  even?: boolean;\r\n\r\n  /** True if this cell is contained in a row with an odd-numbered index. */\r\n  odd?: boolean;\r\n}\r\n\r\n/**\r\n * Outlet for rendering cells inside of a row or header row.\r\n * @docs-private\r\n */\r\n@Directive({selector: '[cdkCellOutlet]'})\r\nexport class CdkCellOutlet implements OnDestroy {\r\n  /** The ordered list of cells to render within this outlet's view container */\r\n  cells: CdkCellDef[];\r\n\r\n  /** The data context to be provided to each cell */\r\n  context: any;\r\n\r\n  /**\r\n   * Static property containing the latest constructed instance of this class.\r\n   * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\r\n   * createEmbeddedView. After one of these components are created, this property will provide\r\n   * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\r\n   * construct the cells with the provided context.\r\n   */\r\n  static mostRecentCellOutlet: CdkCellOutlet|null = null;\r\n\r\n  constructor(public _viewContainer: ViewContainerRef) {\r\n    CdkCellOutlet.mostRecentCellOutlet = this;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // If this was the last outlet being rendered in the view, remove the reference\r\n    // from the static property after it has been destroyed to avoid leaking memory.\r\n    if (CdkCellOutlet.mostRecentCellOutlet === this) {\r\n      CdkCellOutlet.mostRecentCellOutlet = null;\r\n    }\r\n  }\r\n}\r\n\r\n/** Header template container that contains the cell outlet. Adds the right class and role. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'cdk-header-row, tr[cdk-header-row]',\r\n  template: CDK_ROW_TEMPLATE,\r\n  host: {\r\n    'class': 'cdk-header-row',\r\n    'role': 'row',\r\n  },\r\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\r\n  // tslint:disable-next-line:validate-decorators\r\n  changeDetection: ChangeDetectionStrategy.Default,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class CdkHeaderRow {\r\n}\r\n\r\n\r\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'cdk-footer-row, tr[cdk-footer-row]',\r\n  template: CDK_ROW_TEMPLATE,\r\n  host: {\r\n    'class': 'cdk-footer-row',\r\n    'role': 'row',\r\n  },\r\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\r\n  // tslint:disable-next-line:validate-decorators\r\n  changeDetection: ChangeDetectionStrategy.Default,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class CdkFooterRow {\r\n}\r\n\r\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'cdk-row, tr[cdk-row]',\r\n  template: CDK_ROW_TEMPLATE,\r\n  host: {\r\n    'class': 'cdk-row',\r\n    'role': 'row',\r\n  },\r\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\r\n  // tslint:disable-next-line:validate-decorators\r\n  changeDetection: ChangeDetectionStrategy.Default,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class CdkRow {\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Directions that can be used when setting sticky positioning.\r\n * @docs-private\r\n */\r\nimport {Direction} from '@angular/cdk/bidi';\r\n\r\nexport type StickyDirection = 'top' | 'bottom' | 'left' | 'right';\r\n\r\n/**\r\n * List of all possible directions that can be used for sticky positioning.\r\n * @docs-private\r\n */\r\nexport const STICKY_DIRECTIONS: StickyDirection[] = ['top', 'bottom', 'left', 'right'];\r\n\r\n/**\r\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\r\n * @docs-private\r\n */\r\nexport class StickyStyler {\r\n  /**\r\n   * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\r\n   *     that uses the native `<table>` element.\r\n   * @param _stickCellCss The CSS class that will be applied to every row/cell that has\r\n   *     sticky positioning applied.\r\n   * @param direction The directionality context of the table (ltr/rtl); affects column positioning\r\n   *     by reversing left/right positions.\r\n   * @param _isBrowser Whether the table is currently being rendered on the server or the client.\r\n   */\r\n  constructor(private _isNativeHtmlTable: boolean,\r\n              private _stickCellCss: string,\r\n              public direction: Direction,\r\n              private _isBrowser = true) { }\r\n\r\n  /**\r\n   * Clears the sticky positioning styles from the row and its cells by resetting the `position`\r\n   * style, setting the zIndex to 0, and unsetting each provided sticky direction.\r\n   * @param rows The list of rows that should be cleared from sticking in the provided directions\r\n   * @param stickyDirections The directions that should no longer be set as sticky on the rows.\r\n   */\r\n  clearStickyPositioning(rows: HTMLElement[], stickyDirections: StickyDirection[]) {\r\n    for (const row of rows) {\r\n      // If the row isn't an element (e.g. if it's an `ng-container`),\r\n      // it won't have inline styles or `children` so we skip it.\r\n      if (row.nodeType !== row.ELEMENT_NODE) {\r\n        continue;\r\n      }\r\n\r\n      this._removeStickyStyle(row, stickyDirections);\r\n\r\n      for (let i = 0; i < row.children.length; i++) {\r\n        const cell = row.children[i] as HTMLElement;\r\n        this._removeStickyStyle(cell, stickyDirections);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Applies sticky left and right positions to the cells of each row according to the sticky\r\n   * states of the rendered column definitions.\r\n   * @param rows The rows that should have its set of cells stuck according to the sticky states.\r\n   * @param stickyStartStates A list of boolean states where each state represents whether the cell\r\n   *     in this index position should be stuck to the start of the row.\r\n   * @param stickyEndStates A list of boolean states where each state represents whether the cell\r\n   *     in this index position should be stuck to the end of the row.\r\n   */\r\n  updateStickyColumns(\r\n      rows: HTMLElement[], stickyStartStates: boolean[], stickyEndStates: boolean[]) {\r\n    const hasStickyColumns =\r\n        stickyStartStates.some(state => state) || stickyEndStates.some(state => state);\r\n    if (!rows.length || !hasStickyColumns || !this._isBrowser) {\r\n      return;\r\n    }\r\n\r\n    const firstRow = rows[0];\r\n    const numCells = firstRow.children.length;\r\n    const cellWidths: number[] = this._getCellWidths(firstRow);\r\n\r\n    const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\r\n    const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\r\n    const isRtl = this.direction === 'rtl';\r\n\r\n    for (const row of rows) {\r\n      for (let i = 0; i < numCells; i++) {\r\n        const cell = row.children[i] as HTMLElement;\r\n        if (stickyStartStates[i]) {\r\n          this._addStickyStyle(cell, isRtl ? 'right' : 'left', startPositions[i]);\r\n        }\r\n\r\n        if (stickyEndStates[i]) {\r\n          this._addStickyStyle(cell, isRtl ? 'left' : 'right', endPositions[i]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Applies sticky positioning to the row's cells if using the native table layout, and to the\r\n   * row itself otherwise.\r\n   * @param rowsToStick The list of rows that should be stuck according to their corresponding\r\n   *     sticky state and to the provided top or bottom position.\r\n   * @param stickyStates A list of boolean states where each state represents whether the row\r\n   *     should be stuck in the particular top or bottom position.\r\n   * @param position The position direction in which the row should be stuck if that row should be\r\n   *     sticky.\r\n   *\r\n   */\r\n  stickRows(rowsToStick: HTMLElement[], stickyStates: boolean[], position: 'top' | 'bottom') {\r\n    // Since we can't measure the rows on the server, we can't stick the rows properly.\r\n    if (!this._isBrowser) {\r\n      return;\r\n    }\r\n\r\n    // If positioning the rows to the bottom, reverse their order when evaluating the sticky\r\n    // position such that the last row stuck will be \"bottom: 0px\" and so on.\r\n    const rows = position === 'bottom' ? rowsToStick.reverse() : rowsToStick;\r\n\r\n    let stickyHeight = 0;\r\n    for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\r\n      if (!stickyStates[rowIndex]) {\r\n        continue;\r\n      }\r\n\r\n      const row = rows[rowIndex];\r\n      if (this._isNativeHtmlTable) {\r\n        for (let j = 0; j < row.children.length; j++) {\r\n          const cell = row.children[j] as HTMLElement;\r\n          this._addStickyStyle(cell, position, stickyHeight);\r\n        }\r\n      } else {\r\n        // Flex does not respect the stick positioning on the cells, needs to be applied to the row.\r\n        // If this is applied on a native table, Safari causes the header to fly in wrong direction.\r\n        this._addStickyStyle(row, position, stickyHeight);\r\n      }\r\n\r\n      if (rowIndex === rows.length - 1) {\r\n        // prevent unnecessary reflow from getBoundingClientRect()\r\n        return;\r\n      }\r\n      stickyHeight += row.getBoundingClientRect().height;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\r\n   * footer rows is to apply sticky styling to the tfoot container. This should only be done if\r\n   * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\r\n   * the tfoot element.\r\n   */\r\n  updateStickyFooterContainer(tableElement: Element, stickyStates: boolean[]) {\r\n    if (!this._isNativeHtmlTable) {\r\n      return;\r\n    }\r\n\r\n    const tfoot = tableElement.querySelector('tfoot')!;\r\n    if (stickyStates.some(state => !state)) {\r\n      this._removeStickyStyle(tfoot, ['bottom']);\r\n    } else {\r\n      this._addStickyStyle(tfoot, 'bottom', 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\r\n   * the zIndex, removing each of the provided sticky directions, and removing the\r\n   * sticky position if there are no more directions.\r\n   */\r\n  _removeStickyStyle(element: HTMLElement, stickyDirections: StickyDirection[]) {\r\n    for (const dir of stickyDirections) {\r\n      element.style[dir] = '';\r\n    }\r\n    element.style.zIndex = this._getCalculatedZIndex(element);\r\n\r\n    // If the element no longer has any more sticky directions, remove sticky positioning and\r\n    // the sticky CSS class.\r\n    const hasDirection = STICKY_DIRECTIONS.some(dir => !!element.style[dir]);\r\n    if (!hasDirection) {\r\n      element.style.position = '';\r\n      element.classList.remove(this._stickCellCss);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds the sticky styling to the element by adding the sticky style class, changing position\r\n   * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\r\n   * direction and value.\r\n   */\r\n  _addStickyStyle(element: HTMLElement, dir: StickyDirection, dirValue: number) {\r\n    element.classList.add(this._stickCellCss);\r\n    element.style[dir] = `${dirValue}px`;\r\n    element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\r\n    element.style.zIndex = this._getCalculatedZIndex(element);\r\n  }\r\n\r\n  /**\r\n   * Calculate what the z-index should be for the element, depending on what directions (top,\r\n   * bottom, left, right) have been set. It should be true that elements with a top direction\r\n   * should have the highest index since these are elements like a table header. If any of those\r\n   * elements are also sticky in another direction, then they should appear above other elements\r\n   * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\r\n   * (e.g. footer rows) should then be next in the ordering such that they are below the header\r\n   * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\r\n   * should minimally increment so that they are above non-sticky elements but below top and bottom\r\n   * elements.\r\n   */\r\n  _getCalculatedZIndex(element: HTMLElement): string {\r\n    const zIndexIncrements = {\r\n      top: 100,\r\n      bottom: 10,\r\n      left: 1,\r\n      right: 1,\r\n    };\r\n\r\n    let zIndex = 0;\r\n    for (const dir of STICKY_DIRECTIONS) {\r\n      if (element.style[dir]) {\r\n        zIndex += zIndexIncrements[dir];\r\n      }\r\n    }\r\n\r\n    return zIndex ? `${zIndex}` : '';\r\n  }\r\n\r\n  /** Gets the widths for each cell in the provided row. */\r\n  _getCellWidths(row: HTMLElement): number[] {\r\n    const cellWidths: number[] = [];\r\n    const firstRowCells = row.children;\r\n    for (let i = 0; i < firstRowCells.length; i++) {\r\n      let cell: HTMLElement = firstRowCells[i] as HTMLElement;\r\n      cellWidths.push(cell.getBoundingClientRect().width);\r\n    }\r\n\r\n    return cellWidths;\r\n  }\r\n\r\n  /**\r\n   * Determines the left and right positions of each sticky column cell, which will be the\r\n   * accumulation of all sticky column cell widths to the left and right, respectively.\r\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\r\n   */\r\n  _getStickyStartColumnPositions(widths: number[], stickyStates: boolean[]): number[] {\r\n    const positions: number[] = [];\r\n    let nextPosition = 0;\r\n\r\n    for (let i = 0; i < widths.length; i++) {\r\n      if (stickyStates[i]) {\r\n        positions[i] = nextPosition;\r\n        nextPosition += widths[i];\r\n      }\r\n    }\r\n\r\n    return positions;\r\n  }\r\n\r\n  /**\r\n   * Determines the left and right positions of each sticky column cell, which will be the\r\n   * accumulation of all sticky column cell widths to the left and right, respectively.\r\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\r\n   */\r\n  _getStickyEndColumnPositions(widths: number[], stickyStates: boolean[]): number[] {\r\n    const positions: number[] = [];\r\n    let nextPosition = 0;\r\n\r\n    for (let i = widths.length; i > 0; i--) {\r\n      if (stickyStates[i]) {\r\n        positions[i] = nextPosition;\r\n        nextPosition += widths[i];\r\n      }\r\n    }\r\n\r\n    return positions;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Direction, Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {CollectionViewer, DataSource, isDataSource} from '@angular/cdk/collections';\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  AfterContentChecked,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  EmbeddedViewRef,\r\n  Inject,\r\n  Input,\r\n  isDevMode,\r\n  IterableChangeRecord,\r\n  IterableDiffer,\r\n  IterableDiffers,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  QueryList,\r\n  TemplateRef,\r\n  TrackByFunction,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {BehaviorSubject, Observable, of as observableOf, Subject, Subscription} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\nimport {CdkColumnDef} from './cell';\r\nimport {\r\n  BaseRowDef,\r\n  CdkCellOutlet,\r\n  CdkCellOutletMultiRowContext,\r\n  CdkCellOutletRowContext,\r\n  CdkFooterRowDef,\r\n  CdkHeaderRowDef,\r\n  CdkRowDef\r\n} from './row';\r\nimport {StickyStyler} from './sticky-styler';\r\nimport {\r\n  getTableDuplicateColumnNameError,\r\n  getTableMissingMatchingRowDefError,\r\n  getTableMissingRowDefsError,\r\n  getTableMultipleDefaultRowDefsError,\r\n  getTableUnknownColumnError,\r\n  getTableUnknownDataSourceError\r\n} from './table-errors';\r\n\r\n/** Interface used to provide an outlet for rows to be inserted into. */\r\nexport interface RowOutlet {\r\n  viewContainer: ViewContainerRef;\r\n}\r\n\r\n/**\r\n * Union of the types that can be set as the data source for a `CdkTable`.\r\n * @docs-private\r\n */\r\ntype CdkTableDataSourceInput<T> =\r\n    DataSource<T>|Observable<ReadonlyArray<T>|T[]>|ReadonlyArray<T>|T[];\r\n\r\n/**\r\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\r\n * @docs-private\r\n */\r\n@Directive({selector: '[rowOutlet]'})\r\nexport class DataRowOutlet implements RowOutlet {\r\n  constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) {}\r\n}\r\n\r\n/**\r\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\r\n * @docs-private\r\n */\r\n@Directive({selector: '[headerRowOutlet]'})\r\nexport class HeaderRowOutlet implements RowOutlet {\r\n  constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) {}\r\n}\r\n\r\n/**\r\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\r\n * @docs-private\r\n */\r\n@Directive({selector: '[footerRowOutlet]'})\r\nexport class FooterRowOutlet implements RowOutlet {\r\n  constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) {}\r\n}\r\n\r\n/**\r\n * The table template that can be used by the mat-table. Should not be used outside of the\r\n * material library.\r\n * @docs-private\r\n */\r\nexport const CDK_TABLE_TEMPLATE =\r\n    // Note that according to MDN, the `caption` element has to be projected as the **first**\r\n    // element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\r\n    `\r\n  <ng-content select=\"caption\"></ng-content>\r\n  <ng-container headerRowOutlet></ng-container>\r\n  <ng-container rowOutlet></ng-container>\r\n  <ng-container footerRowOutlet></ng-container>\r\n`;\r\n\r\n/**\r\n * Interface used to conveniently type the possible context interfaces for the render row.\r\n * @docs-private\r\n */\r\nexport interface RowContext<T> extends CdkCellOutletMultiRowContext<T>,\r\n                                       CdkCellOutletRowContext<T> {}\r\n\r\n/**\r\n * Class used to conveniently type the embedded view ref for rows with a context.\r\n * @docs-private\r\n */\r\nabstract class RowViewRef<T> extends EmbeddedViewRef<RowContext<T>> {}\r\n\r\n/**\r\n * Set of properties that represents the identity of a single rendered row.\r\n *\r\n * When the table needs to determine the list of rows to render, it will do so by iterating through\r\n * each data object and evaluating its list of row templates to display (when multiTemplateDataRows\r\n * is false, there is only one template per data object). For each pair of data object and row\r\n * template, a `RenderRow` is added to the list of rows to render. If the data object and row\r\n * template pair has already been rendered, the previously used `RenderRow` is added; else a new\r\n * `RenderRow` is * created. Once the list is complete and all data objects have been itereated\r\n * through, a diff is performed to determine the changes that need to be made to the rendered rows.\r\n *\r\n * @docs-private\r\n */\r\nexport interface RenderRow<T> {\r\n  data: T;\r\n  dataIndex: number;\r\n  rowDef: CdkRowDef<T>;\r\n}\r\n\r\n/**\r\n * A data table that can render a header row, data rows, and a footer row.\r\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\r\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\r\n * connect function that will return an Observable stream that emits the data array to render.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'cdk-table, table[cdk-table]',\r\n  exportAs: 'cdkTable',\r\n  template: CDK_TABLE_TEMPLATE,\r\n  host: {\r\n    'class': 'cdk-table',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\r\n  // The view for `MatTable` consists entirely of templates declared in other views. As they are\r\n  // declared elsewhere, they are checked when their declaration points are checked.\r\n  // tslint:disable-next-line:validate-decorators\r\n  changeDetection: ChangeDetectionStrategy.Default,\r\n})\r\nexport class CdkTable<T> implements AfterContentChecked, CollectionViewer, OnDestroy, OnInit {\r\n  private _document: Document;\r\n\r\n  /** Latest data provided by the data source. */\r\n  protected _data: T[]|ReadonlyArray<T>;\r\n\r\n  /** Subject that emits when the component has been destroyed. */\r\n  private _onDestroy = new Subject<void>();\r\n\r\n  /** List of the rendered rows as identified by their `RenderRow` object. */\r\n  private _renderRows: RenderRow<T>[];\r\n\r\n  /** Subscription that listens for the data provided by the data source. */\r\n  private _renderChangeSubscription: Subscription|null;\r\n\r\n  /**\r\n   * Map of all the user's defined columns (header, data, and footer cell template) identified by\r\n   * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\r\n   * any custom column definitions added to `_customColumnDefs`.\r\n   */\r\n  private _columnDefsByName = new Map<string, CdkColumnDef>();\r\n\r\n  /**\r\n   * Set of all row definitions that can be used by this table. Populated by the rows gathered by\r\n   * using `ContentChildren` as well as any custom row definitions added to `_customRowDefs`.\r\n   */\r\n  private _rowDefs: CdkRowDef<T>[];\r\n\r\n  /**\r\n   * Set of all header row definitions that can be used by this table. Populated by the rows\r\n   * gathered by using `ContentChildren` as well as any custom row definitions added to\r\n   * `_customHeaderRowDefs`.\r\n   */\r\n  private _headerRowDefs: CdkHeaderRowDef[];\r\n\r\n  /**\r\n   * Set of all row definitions that can be used by this table. Populated by the rows gathered by\r\n   * using `ContentChildren` as well as any custom row definitions added to\r\n   * `_customFooterRowDefs`.\r\n   */\r\n  private _footerRowDefs: CdkFooterRowDef[];\r\n\r\n  /** Differ used to find the changes in the data provided by the data source. */\r\n  private _dataDiffer: IterableDiffer<RenderRow<T>>;\r\n\r\n  /** Stores the row definition that does not have a when predicate. */\r\n  private _defaultRowDef: CdkRowDef<T>|null;\r\n\r\n  /**\r\n   * Column definitions that were defined outside of the direct content children of the table.\r\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\r\n   * column definitions as *it's* content child.\r\n   */\r\n  private _customColumnDefs = new Set<CdkColumnDef>();\r\n\r\n  /**\r\n   * Data row definitions that were defined outside of the direct content children of the table.\r\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\r\n   * built-in data rows as *it's* content child.\r\n   */\r\n  private _customRowDefs = new Set<CdkRowDef<T>>();\r\n\r\n  /**\r\n   * Header row definitions that were defined outside of the direct content children of the table.\r\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\r\n   * built-in header rows as *it's* content child.\r\n   */\r\n  private _customHeaderRowDefs = new Set<CdkHeaderRowDef>();\r\n\r\n  /**\r\n   * Footer row definitions that were defined outside of the direct content children of the table.\r\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\r\n   * built-in footer row as *it's* content child.\r\n   */\r\n  private _customFooterRowDefs = new Set<CdkFooterRowDef>();\r\n\r\n  /**\r\n   * Whether the header row definition has been changed. Triggers an update to the header row after\r\n   * content is checked. Initialized as true so that the table renders the initial set of rows.\r\n   */\r\n  private _headerRowDefChanged = true;\r\n\r\n  /**\r\n   * Whether the footer row definition has been changed. Triggers an update to the footer row after\r\n   * content is checked. Initialized as true so that the table renders the initial set of rows.\r\n   */\r\n  private _footerRowDefChanged = true;\r\n\r\n  /**\r\n   * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\r\n   * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\r\n   * the cached `RenderRow` objects when possible, the row identity is preserved when the data\r\n   * and row template matches, which allows the `IterableDiffer` to check rows by reference\r\n   * and understand which rows are added/moved/removed.\r\n   *\r\n   * Implemented as a map of maps where the first key is the `data: T` object and the second is the\r\n   * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\r\n   * contains an array of created pairs. The array is necessary to handle cases where the data\r\n   * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\r\n   * stored.\r\n   */\r\n  private _cachedRenderRowsMap = new Map<T, WeakMap<CdkRowDef<T>, RenderRow<T>[]>>();\r\n\r\n  /** Whether the table is applied to a native `<table>`. */\r\n  private _isNativeHtmlTable: boolean;\r\n\r\n  /**\r\n   * Utility class that is responsible for applying the appropriate sticky positioning styles to\r\n   * the table's rows and cells.\r\n   */\r\n  private _stickyStyler: StickyStyler;\r\n\r\n  /**\r\n   * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\r\n   * table subclasses.\r\n   */\r\n  protected stickyCssClass: string = 'cdk-table-sticky';\r\n\r\n  /**\r\n   * Tracking function that will be used to check the differences in data changes. Used similarly\r\n   * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\r\n   * relative to the function to know if a row should be added/removed/moved.\r\n   * Accepts a function that takes two parameters, `index` and `item`.\r\n   */\r\n  @Input()\r\n  get trackBy(): TrackByFunction<T> {\r\n    return this._trackByFn;\r\n  }\r\n  set trackBy(fn: TrackByFunction<T>) {\r\n    if (isDevMode() && fn != null && typeof fn !== 'function' && <any>console &&\r\n        <any>console.warn) {\r\n      console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\r\n    }\r\n    this._trackByFn = fn;\r\n  }\r\n  private _trackByFn: TrackByFunction<T>;\r\n\r\n  /**\r\n   * The table's source of data, which can be provided in three ways (in order of complexity):\r\n   *   - Simple data array (each object represents one table row)\r\n   *   - Stream that emits a data array each time the array changes\r\n   *   - `DataSource` object that implements the connect/disconnect interface.\r\n   *\r\n   * If a data array is provided, the table must be notified when the array's objects are\r\n   * added, removed, or moved. This can be done by calling the `renderRows()` function which will\r\n   * render the diff since the last table render. If the data array reference is changed, the table\r\n   * will automatically trigger an update to the rows.\r\n   *\r\n   * When providing an Observable stream, the table will trigger an update automatically when the\r\n   * stream emits a new array of data.\r\n   *\r\n   * Finally, when providing a `DataSource` object, the table will use the Observable stream\r\n   * provided by the connect function and trigger updates when that stream emits new data array\r\n   * values. During the table's ngOnDestroy or when the data source is removed from the table, the\r\n   * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\r\n   * subscriptions registered during the connect process).\r\n   */\r\n  @Input()\r\n  get dataSource(): CdkTableDataSourceInput<T> {\r\n    return this._dataSource;\r\n  }\r\n  set dataSource(dataSource: CdkTableDataSourceInput<T>) {\r\n    if (this._dataSource !== dataSource) {\r\n      this._switchDataSource(dataSource);\r\n    }\r\n  }\r\n  private _dataSource: CdkTableDataSourceInput<T>;\r\n\r\n  /**\r\n   * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\r\n   * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\r\n   * dataobject will render the first row that evaluates its when predicate to true, in the order\r\n   * defined in the table, or otherwise the default row which does not have a when predicate.\r\n   */\r\n  @Input()\r\n  get multiTemplateDataRows(): boolean {\r\n    return this._multiTemplateDataRows;\r\n  }\r\n  set multiTemplateDataRows(v: boolean) {\r\n    this._multiTemplateDataRows = coerceBooleanProperty(v);\r\n\r\n    // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\r\n    // this setter will be invoked before the row outlet has been defined hence the null check.\r\n    if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\r\n      this._forceRenderDataRows();\r\n    }\r\n  }\r\n  _multiTemplateDataRows: boolean = false;\r\n\r\n  // TODO(andrewseguin): Remove max value as the end index\r\n  //   and instead calculate the view on init and scroll.\r\n  /**\r\n   * Stream containing the latest information on what rows are being displayed on screen.\r\n   * Can be used by the data source to as a heuristic of what data should be provided.\r\n   *\r\n   * @docs-private\r\n   */\r\n  viewChange: BehaviorSubject<{start: number, end: number}> =\r\n      new BehaviorSubject<{start: number, end: number}>({start: 0, end: Number.MAX_VALUE});\r\n\r\n  // Outlets in the table's template where the header, data rows, and footer will be inserted.\r\n  @ViewChild(DataRowOutlet, {static: true}) _rowOutlet: DataRowOutlet;\r\n  @ViewChild(HeaderRowOutlet, {static: true}) _headerRowOutlet: HeaderRowOutlet;\r\n  @ViewChild(FooterRowOutlet, {static: true}) _footerRowOutlet: FooterRowOutlet;\r\n\r\n  /**\r\n   * The column definitions provided by the user that contain what the header, data, and footer\r\n   * cells should render for each column.\r\n   */\r\n  @ContentChildren(CdkColumnDef) _contentColumnDefs: QueryList<CdkColumnDef>;\r\n\r\n  /** Set of data row definitions that were provided to the table as content children. */\r\n  @ContentChildren(CdkRowDef) _contentRowDefs: QueryList<CdkRowDef<T>>;\r\n\r\n  /** Set of header row definitions that were provided to the table as content children. */\r\n  @ContentChildren(CdkHeaderRowDef) _contentHeaderRowDefs: QueryList<CdkHeaderRowDef>;\r\n\r\n  /** Set of footer row definitions that were provided to the table as content children. */\r\n  @ContentChildren(CdkFooterRowDef) _contentFooterRowDefs: QueryList<CdkFooterRowDef>;\r\n\r\n  constructor(\r\n      protected readonly _differs: IterableDiffers,\r\n      protected readonly _changeDetectorRef: ChangeDetectorRef,\r\n      protected readonly _elementRef: ElementRef, @Attribute('role') role: string,\r\n      @Optional() protected readonly _dir: Directionality, @Inject(DOCUMENT) _document: any,\r\n      private _platform: Platform) {\r\n    if (!role) {\r\n      this._elementRef.nativeElement.setAttribute('role', 'grid');\r\n    }\r\n\r\n    this._document = _document;\r\n    this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._setupStickyStyler();\r\n\r\n    if (this._isNativeHtmlTable) {\r\n      this._applyNativeTableSections();\r\n    }\r\n\r\n    // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\r\n    // the user has provided a custom trackBy, return the result of that function as evaluated\r\n    // with the values of the `RenderRow`'s data and index.\r\n    this._dataDiffer = this._differs.find([]).create((_i: number, dataRow: RenderRow<T>) => {\r\n      return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\r\n    });\r\n  }\r\n\r\n  ngAfterContentChecked() {\r\n    // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\r\n    this._cacheRowDefs();\r\n    this._cacheColumnDefs();\r\n\r\n    // Make sure that the user has at least added header, footer, or data row def.\r\n    if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {\r\n      throw getTableMissingRowDefsError();\r\n    }\r\n\r\n    // Render updates if the list of columns have been changed for the header, row, or footer defs.\r\n    this._renderUpdatedColumns();\r\n\r\n    // If the header row definition has been changed, trigger a render to the header row.\r\n    if (this._headerRowDefChanged) {\r\n      this._forceRenderHeaderRows();\r\n      this._headerRowDefChanged = false;\r\n    }\r\n\r\n    // If the footer row definition has been changed, trigger a render to the footer row.\r\n    if (this._footerRowDefChanged) {\r\n      this._forceRenderFooterRows();\r\n      this._footerRowDefChanged = false;\r\n    }\r\n\r\n    // If there is a data source and row definitions, connect to the data source unless a\r\n    // connection has already been made.\r\n    if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\r\n      this._observeRenderChanges();\r\n    }\r\n\r\n    this._checkStickyStates();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._rowOutlet.viewContainer.clear();\r\n    this._headerRowOutlet.viewContainer.clear();\r\n    this._footerRowOutlet.viewContainer.clear();\r\n\r\n    this._cachedRenderRowsMap.clear();\r\n\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n\r\n    if (isDataSource(this.dataSource)) {\r\n      this.dataSource.disconnect(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Renders rows based on the table's latest set of data, which was either provided directly as an\r\n   * input or retrieved through an Observable stream (directly or from a DataSource).\r\n   * Checks for differences in the data since the last diff to perform only the necessary\r\n   * changes (add/remove/move rows).\r\n   *\r\n   * If the table's data source is a DataSource or Observable, this will be invoked automatically\r\n   * each time the provided Observable stream emits a new data array. Otherwise if your data is\r\n   * an array, this function will need to be called to render any changes.\r\n   */\r\n  renderRows() {\r\n    this._renderRows = this._getAllRenderRows();\r\n    const changes = this._dataDiffer.diff(this._renderRows);\r\n    if (!changes) {\r\n      return;\r\n    }\r\n\r\n    const viewContainer = this._rowOutlet.viewContainer;\r\n\r\n    changes.forEachOperation(\r\n        (record: IterableChangeRecord<RenderRow<T>>, prevIndex: number|null,\r\n         currentIndex: number|null) => {\r\n          if (record.previousIndex == null) {\r\n            this._insertRow(record.item, currentIndex!);\r\n          } else if (currentIndex == null) {\r\n            viewContainer.remove(prevIndex!);\r\n          } else {\r\n            const view = <RowViewRef<T>>viewContainer.get(prevIndex!);\r\n            viewContainer.move(view!, currentIndex);\r\n          }\r\n        });\r\n\r\n    // Update the meta context of a row's context data (index, count, first, last, ...)\r\n    this._updateRowIndexContext();\r\n\r\n    // Update rows that did not get added/removed/moved but may have had their identity changed,\r\n    // e.g. if trackBy matched data on some property but the actual data reference changed.\r\n    changes.forEachIdentityChange((record: IterableChangeRecord<RenderRow<T>>) => {\r\n      const rowView = <RowViewRef<T>>viewContainer.get(record.currentIndex!);\r\n      rowView.context.$implicit = record.item.data;\r\n    });\r\n\r\n    this.updateStickyColumnStyles();\r\n  }\r\n\r\n  /**\r\n   * Sets the header row definition to be used. Overrides the header row definition gathered by\r\n   * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\r\n   * table's content is checked.\r\n   * @docs-private\r\n   * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\r\n   * @breaking-change 8.0.0\r\n   */\r\n  setHeaderRowDef(headerRowDef: CdkHeaderRowDef) {\r\n    this._customHeaderRowDefs = new Set([headerRowDef]);\r\n    this._headerRowDefChanged = true;\r\n  }\r\n\r\n  /**\r\n   * Sets the footer row definition to be used. Overrides the footer row definition gathered by\r\n   * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\r\n   * table's content is checked.\r\n   * @docs-private\r\n   * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\r\n   * @breaking-change 8.0.0\r\n   */\r\n  setFooterRowDef(footerRowDef: CdkFooterRowDef) {\r\n    this._customFooterRowDefs = new Set([footerRowDef]);\r\n    this._footerRowDefChanged = true;\r\n  }\r\n\r\n  /** Adds a column definition that was not included as part of the content children. */\r\n  addColumnDef(columnDef: CdkColumnDef) {\r\n    this._customColumnDefs.add(columnDef);\r\n  }\r\n\r\n  /** Removes a column definition that was not included as part of the content children. */\r\n  removeColumnDef(columnDef: CdkColumnDef) {\r\n    this._customColumnDefs.delete(columnDef);\r\n  }\r\n\r\n  /** Adds a row definition that was not included as part of the content children. */\r\n  addRowDef(rowDef: CdkRowDef<T>) {\r\n    this._customRowDefs.add(rowDef);\r\n  }\r\n\r\n  /** Removes a row definition that was not included as part of the content children. */\r\n  removeRowDef(rowDef: CdkRowDef<T>) {\r\n    this._customRowDefs.delete(rowDef);\r\n  }\r\n\r\n  /** Adds a header row definition that was not included as part of the content children. */\r\n  addHeaderRowDef(headerRowDef: CdkHeaderRowDef) {\r\n    this._customHeaderRowDefs.add(headerRowDef);\r\n    this._headerRowDefChanged = true;\r\n  }\r\n\r\n  /** Removes a header row definition that was not included as part of the content children. */\r\n  removeHeaderRowDef(headerRowDef: CdkHeaderRowDef) {\r\n    this._customHeaderRowDefs.delete(headerRowDef);\r\n    this._headerRowDefChanged = true;\r\n  }\r\n\r\n  /** Adds a footer row definition that was not included as part of the content children. */\r\n  addFooterRowDef(footerRowDef: CdkFooterRowDef) {\r\n    this._customFooterRowDefs.add(footerRowDef);\r\n    this._footerRowDefChanged = true;\r\n  }\r\n\r\n  /** Removes a footer row definition that was not included as part of the content children. */\r\n  removeFooterRowDef(footerRowDef: CdkFooterRowDef) {\r\n    this._customFooterRowDefs.delete(footerRowDef);\r\n    this._footerRowDefChanged = true;\r\n  }\r\n\r\n  /**\r\n   * Updates the header sticky styles. First resets all applied styles with respect to the cells\r\n   * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\r\n   * automatically called when the header row changes its displayed set of columns, or if its\r\n   * sticky input changes. May be called manually for cases where the cell content changes outside\r\n   * of these events.\r\n   */\r\n  updateStickyHeaderRowStyles(): void {\r\n    const headerRows = this._getRenderedRows(this._headerRowOutlet);\r\n    const tableElement = this._elementRef.nativeElement as HTMLElement;\r\n\r\n    // Hide the thead element if there are no header rows. This is necessary to satisfy\r\n    // overzealous a11y checkers that fail because the `rowgroup` element does not contain\r\n    // required child `row`.\r\n    const thead = tableElement.querySelector('thead');\r\n    if (thead) {\r\n      thead.style.display = headerRows.length ? '' : 'none';\r\n    }\r\n\r\n    const stickyStates = this._headerRowDefs.map(def => def.sticky);\r\n    this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\r\n    this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\r\n\r\n    // Reset the dirty state of the sticky input change since it has been used.\r\n    this._headerRowDefs.forEach(def => def.resetStickyChanged());\r\n  }\r\n\r\n  /**\r\n   * Updates the footer sticky styles. First resets all applied styles with respect to the cells\r\n   * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\r\n   * automatically called when the footer row changes its displayed set of columns, or if its\r\n   * sticky input changes. May be called manually for cases where the cell content changes outside\r\n   * of these events.\r\n   */\r\n  updateStickyFooterRowStyles(): void {\r\n    const footerRows = this._getRenderedRows(this._footerRowOutlet);\r\n    const tableElement = this._elementRef.nativeElement as HTMLElement;\r\n\r\n    // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\r\n    // overzealous a11y checkers that fail because the `rowgroup` element does not contain\r\n    // required child `row`.\r\n    const tfoot = tableElement.querySelector('tfoot');\r\n    if (tfoot) {\r\n      tfoot.style.display = footerRows.length ? '' : 'none';\r\n    }\r\n\r\n    const stickyStates = this._footerRowDefs.map(def => def.sticky);\r\n    this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\r\n    this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\r\n    this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\r\n\r\n    // Reset the dirty state of the sticky input change since it has been used.\r\n    this._footerRowDefs.forEach(def => def.resetStickyChanged());\r\n  }\r\n\r\n  /**\r\n   * Updates the column sticky styles. First resets all applied styles with respect to the cells\r\n   * sticking to the left and right. Then sticky styles are added for the left and right according\r\n   * to the column definitions for each cell in each row. This is automatically called when\r\n   * the data source provides a new set of data or when a column definition changes its sticky\r\n   * input. May be called manually for cases where the cell content changes outside of these events.\r\n   */\r\n  updateStickyColumnStyles() {\r\n    const headerRows = this._getRenderedRows(this._headerRowOutlet);\r\n    const dataRows = this._getRenderedRows(this._rowOutlet);\r\n    const footerRows = this._getRenderedRows(this._footerRowOutlet);\r\n\r\n    // Clear the left and right positioning from all columns in the table across all rows since\r\n    // sticky columns span across all table sections (header, data, footer)\r\n    this._stickyStyler.clearStickyPositioning(\r\n        [...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\r\n\r\n    // Update the sticky styles for each header row depending on the def's sticky state\r\n    headerRows.forEach((headerRow, i) => {\r\n      this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\r\n    });\r\n\r\n    // Update the sticky styles for each data row depending on its def's sticky state\r\n    this._rowDefs.forEach(rowDef => {\r\n      // Collect all the rows rendered with this row definition.\r\n      const rows: HTMLElement[] = [];\r\n      for (let i = 0; i < dataRows.length; i++) {\r\n        if (this._renderRows[i].rowDef === rowDef) {\r\n          rows.push(dataRows[i]);\r\n        }\r\n      }\r\n\r\n      this._addStickyColumnStyles(rows, rowDef);\r\n    });\r\n\r\n    // Update the sticky styles for each footer row depending on the def's sticky state\r\n    footerRows.forEach((footerRow, i) => {\r\n      this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\r\n    });\r\n\r\n    // Reset the dirty state of the sticky input change since it has been used.\r\n    Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\r\n  }\r\n\r\n  /**\r\n   * Get the list of RenderRow objects to render according to the current list of data and defined\r\n   * row definitions. If the previous list already contained a particular pair, it should be reused\r\n   * so that the differ equates their references.\r\n   */\r\n  private _getAllRenderRows(): RenderRow<T>[] {\r\n    const renderRows: RenderRow<T>[] = [];\r\n\r\n    // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\r\n    // new cache while unused ones can be picked up by garbage collection.\r\n    const prevCachedRenderRows = this._cachedRenderRowsMap;\r\n    this._cachedRenderRowsMap = new Map();\r\n\r\n    // For each data object, get the list of rows that should be rendered, represented by the\r\n    // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\r\n    for (let i = 0; i < this._data.length; i++) {\r\n      let data = this._data[i];\r\n      const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\r\n\r\n      if (!this._cachedRenderRowsMap.has(data)) {\r\n        this._cachedRenderRowsMap.set(data, new WeakMap());\r\n      }\r\n\r\n      for (let j = 0; j < renderRowsForData.length; j++) {\r\n        let renderRow = renderRowsForData[j];\r\n\r\n        const cache = this._cachedRenderRowsMap.get(renderRow.data)!;\r\n        if (cache.has(renderRow.rowDef)) {\r\n          cache.get(renderRow.rowDef)!.push(renderRow);\r\n        } else {\r\n          cache.set(renderRow.rowDef, [renderRow]);\r\n        }\r\n        renderRows.push(renderRow);\r\n      }\r\n    }\r\n\r\n    return renderRows;\r\n  }\r\n\r\n  /**\r\n   * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\r\n   * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\r\n   * `(T, CdkRowDef)` pair.\r\n   */\r\n  private _getRenderRowsForData(\r\n      data: T, dataIndex: number, cache?: WeakMap<CdkRowDef<T>, RenderRow<T>[]>): RenderRow<T>[] {\r\n    const rowDefs = this._getRowDefs(data, dataIndex);\r\n\r\n    return rowDefs.map(rowDef => {\r\n      const cachedRenderRows = (cache && cache.has(rowDef)) ? cache.get(rowDef)! : [];\r\n      if (cachedRenderRows.length) {\r\n        const dataRow = cachedRenderRows.shift()!;\r\n        dataRow.dataIndex = dataIndex;\r\n        return dataRow;\r\n      } else {\r\n        return {data, rowDef, dataIndex};\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Update the map containing the content's column definitions. */\r\n  private _cacheColumnDefs() {\r\n    this._columnDefsByName.clear();\r\n\r\n    const columnDefs = mergeQueryListAndSet(this._contentColumnDefs, this._customColumnDefs);\r\n    columnDefs.forEach(columnDef => {\r\n      if (this._columnDefsByName.has(columnDef.name)) {\r\n        throw getTableDuplicateColumnNameError(columnDef.name);\r\n      }\r\n      this._columnDefsByName.set(columnDef.name, columnDef);\r\n    });\r\n  }\r\n\r\n  /** Update the list of all available row definitions that can be used. */\r\n  private _cacheRowDefs() {\r\n    this._headerRowDefs =\r\n        mergeQueryListAndSet(this._contentHeaderRowDefs, this._customHeaderRowDefs);\r\n    this._footerRowDefs =\r\n        mergeQueryListAndSet(this._contentFooterRowDefs, this._customFooterRowDefs);\r\n    this._rowDefs = mergeQueryListAndSet(this._contentRowDefs, this._customRowDefs);\r\n\r\n    // After all row definitions are determined, find the row definition to be considered default.\r\n    const defaultRowDefs = this._rowDefs.filter(def => !def.when);\r\n    if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {\r\n      throw getTableMultipleDefaultRowDefsError();\r\n    }\r\n    this._defaultRowDef = defaultRowDefs[0];\r\n  }\r\n\r\n  /**\r\n   * Check if the header, data, or footer rows have changed what columns they want to display or\r\n   * whether the sticky states have changed for the header or footer. If there is a diff, then\r\n   * re-render that section.\r\n   */\r\n  private _renderUpdatedColumns() {\r\n    const columnsDiffReducer = (acc: boolean, def: BaseRowDef) => acc || !!def.getColumnsDiff();\r\n\r\n    // Force re-render data rows if the list of column definitions have changed.\r\n    if (this._rowDefs.reduce(columnsDiffReducer, false)) {\r\n      this._forceRenderDataRows();\r\n    }\r\n\r\n    // Force re-render header/footer rows if the list of column definitions have changed..\r\n    if (this._headerRowDefs.reduce(columnsDiffReducer, false)) {\r\n      this._forceRenderHeaderRows();\r\n    }\r\n\r\n    if (this._footerRowDefs.reduce(columnsDiffReducer, false)) {\r\n      this._forceRenderFooterRows();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\r\n   * render change subscription if one exists. If the data source is null, interpret this by\r\n   * clearing the row outlet. Otherwise start listening for new data.\r\n   */\r\n  private _switchDataSource(dataSource: CdkTableDataSourceInput<T>) {\r\n    this._data = [];\r\n\r\n    if (isDataSource(this.dataSource)) {\r\n      this.dataSource.disconnect(this);\r\n    }\r\n\r\n    // Stop listening for data from the previous data source.\r\n    if (this._renderChangeSubscription) {\r\n      this._renderChangeSubscription.unsubscribe();\r\n      this._renderChangeSubscription = null;\r\n    }\r\n\r\n    if (!dataSource) {\r\n      if (this._dataDiffer) {\r\n        this._dataDiffer.diff([]);\r\n      }\r\n      this._rowOutlet.viewContainer.clear();\r\n    }\r\n\r\n    this._dataSource = dataSource;\r\n  }\r\n\r\n  /** Set up a subscription for the data provided by the data source. */\r\n  private _observeRenderChanges() {\r\n    // If no data source has been set, there is nothing to observe for changes.\r\n    if (!this.dataSource) {\r\n      return;\r\n    }\r\n\r\n    let dataStream: Observable<T[]|ReadonlyArray<T>>|undefined;\r\n\r\n    if (isDataSource(this.dataSource)) {\r\n      dataStream = this.dataSource.connect(this);\r\n    } else if (this.dataSource instanceof Observable) {\r\n      dataStream = this.dataSource;\r\n    } else if (Array.isArray(this.dataSource)) {\r\n      dataStream = observableOf(this.dataSource);\r\n    }\r\n\r\n    if (dataStream === undefined) {\r\n      throw getTableUnknownDataSourceError();\r\n    }\r\n\r\n    this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(data => {\r\n      this._data = data || [];\r\n      this.renderRows();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clears any existing content in the header row outlet and creates a new embedded view\r\n   * in the outlet using the header row definition.\r\n   */\r\n  private _forceRenderHeaderRows() {\r\n    // Clear the header row outlet if any content exists.\r\n    if (this._headerRowOutlet.viewContainer.length > 0) {\r\n      this._headerRowOutlet.viewContainer.clear();\r\n    }\r\n\r\n    this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\r\n    this.updateStickyHeaderRowStyles();\r\n    this.updateStickyColumnStyles();\r\n  }\r\n  /**\r\n   * Clears any existing content in the footer row outlet and creates a new embedded view\r\n   * in the outlet using the footer row definition.\r\n   */\r\n  private _forceRenderFooterRows() {\r\n    // Clear the footer row outlet if any content exists.\r\n    if (this._footerRowOutlet.viewContainer.length > 0) {\r\n      this._footerRowOutlet.viewContainer.clear();\r\n    }\r\n\r\n    this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\r\n    this.updateStickyFooterRowStyles();\r\n    this.updateStickyColumnStyles();\r\n  }\r\n\r\n  /** Adds the sticky column styles for the rows according to the columns' stick states. */\r\n  private _addStickyColumnStyles(rows: HTMLElement[], rowDef: BaseRowDef) {\r\n    const columnDefs = Array.from(rowDef.columns || []).map(columnName => {\r\n      const columnDef = this._columnDefsByName.get(columnName);\r\n      if (!columnDef) {\r\n        throw getTableUnknownColumnError(columnName);\r\n      }\r\n      return columnDef!;\r\n    });\r\n    const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\r\n    const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\r\n    this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates);\r\n  }\r\n\r\n  /** Gets the list of rows that have been rendered in the row outlet. */\r\n  _getRenderedRows(rowOutlet: RowOutlet): HTMLElement[] {\r\n    const renderedRows: HTMLElement[] = [];\r\n\r\n    for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\r\n      const viewRef = (rowOutlet.viewContainer.get(i)! as EmbeddedViewRef<any>);\r\n      renderedRows.push(viewRef.rootNodes[0]);\r\n    }\r\n\r\n    return renderedRows;\r\n  }\r\n\r\n  /**\r\n   * Get the matching row definitions that should be used for this row data. If there is only\r\n   * one row definition, it is returned. Otherwise, find the row definitions that has a when\r\n   * predicate that returns true with the data. If none return true, return the default row\r\n   * definition.\r\n   */\r\n  _getRowDefs(data: T, dataIndex: number): CdkRowDef<T>[] {\r\n    if (this._rowDefs.length == 1) {\r\n      return [this._rowDefs[0]];\r\n    }\r\n\r\n    let rowDefs: CdkRowDef<T>[] = [];\r\n    if (this.multiTemplateDataRows) {\r\n      rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\r\n    } else {\r\n      let rowDef =\r\n          this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\r\n      if (rowDef) {\r\n        rowDefs.push(rowDef);\r\n      }\r\n    }\r\n\r\n    if (!rowDefs.length) {\r\n      throw getTableMissingMatchingRowDefError(data);\r\n    }\r\n\r\n    return rowDefs;\r\n  }\r\n\r\n  /**\r\n   * Create the embedded view for the data row template and place it in the correct index location\r\n   * within the data row view container.\r\n   */\r\n  private _insertRow(renderRow: RenderRow<T>, renderIndex: number) {\r\n    const rowDef = renderRow.rowDef;\r\n    const context: RowContext<T> = {$implicit: renderRow.data};\r\n    this._renderRow(this._rowOutlet, rowDef, renderIndex, context);\r\n  }\r\n\r\n  /**\r\n   * Creates a new row template in the outlet and fills it with the set of cell templates.\r\n   * Optionally takes a context to provide to the row and cells, as well as an optional index\r\n   * of where to place the new row template in the outlet.\r\n   */\r\n  private _renderRow(\r\n      outlet: RowOutlet, rowDef: BaseRowDef, index: number, context: RowContext<T> = {}) {\r\n    // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\r\n    outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\r\n\r\n    for (let cellTemplate of this._getCellTemplates(rowDef)) {\r\n      if (CdkCellOutlet.mostRecentCellOutlet) {\r\n        CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\r\n      }\r\n    }\r\n\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Updates the index-related context for each row to reflect any changes in the index of the rows,\r\n   * e.g. first/last/even/odd.\r\n   */\r\n  private _updateRowIndexContext() {\r\n    const viewContainer = this._rowOutlet.viewContainer;\r\n    for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\r\n      const viewRef = viewContainer.get(renderIndex) as RowViewRef<T>;\r\n      const context = viewRef.context as RowContext<T>;\r\n      context.count = count;\r\n      context.first = renderIndex === 0;\r\n      context.last = renderIndex === count - 1;\r\n      context.even = renderIndex % 2 === 0;\r\n      context.odd = !context.even;\r\n\r\n      if (this.multiTemplateDataRows) {\r\n        context.dataIndex = this._renderRows[renderIndex].dataIndex;\r\n        context.renderIndex = renderIndex;\r\n      } else {\r\n        context.index = this._renderRows[renderIndex].dataIndex;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Gets the column definitions for the provided row def. */\r\n  private _getCellTemplates(rowDef: BaseRowDef): TemplateRef<any>[] {\r\n    if (!rowDef || !rowDef.columns) {\r\n      return [];\r\n    }\r\n    return Array.from(rowDef.columns, columnId => {\r\n      const column = this._columnDefsByName.get(columnId);\r\n\r\n      if (!column) {\r\n        throw getTableUnknownColumnError(columnId);\r\n      }\r\n\r\n      return rowDef.extractCellTemplate(column);\r\n    });\r\n  }\r\n\r\n  /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\r\n  private _applyNativeTableSections() {\r\n    const documentFragment = this._document.createDocumentFragment();\r\n    const sections = [\r\n      {tag: 'thead', outlet: this._headerRowOutlet},\r\n      {tag: 'tbody', outlet: this._rowOutlet},\r\n      {tag: 'tfoot', outlet: this._footerRowOutlet},\r\n    ];\r\n\r\n    for (const section of sections) {\r\n      const element = this._document.createElement(section.tag);\r\n      element.setAttribute('role', 'rowgroup');\r\n      element.appendChild(section.outlet.elementRef.nativeElement);\r\n      documentFragment.appendChild(element);\r\n    }\r\n\r\n    // Use a DocumentFragment so we don't hit the DOM on each iteration.\r\n    this._elementRef.nativeElement.appendChild(documentFragment);\r\n  }\r\n\r\n  /**\r\n   * Forces a re-render of the data rows. Should be called in cases where there has been an input\r\n   * change that affects the evaluation of which rows should be rendered, e.g. toggling\r\n   * `multiTemplateDataRows` or adding/removing row definitions.\r\n   */\r\n  private _forceRenderDataRows() {\r\n    this._dataDiffer.diff([]);\r\n    this._rowOutlet.viewContainer.clear();\r\n    this.renderRows();\r\n    this.updateStickyColumnStyles();\r\n  }\r\n\r\n  /**\r\n   * Checks if there has been a change in sticky states since last check and applies the correct\r\n   * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\r\n   * during a change detection and after the inputs are settled (after content check).\r\n   */\r\n  private _checkStickyStates() {\r\n    const stickyCheckReducer = (acc: boolean, d: CdkHeaderRowDef|CdkFooterRowDef|CdkColumnDef) => {\r\n      return acc || d.hasStickyChanged();\r\n    };\r\n\r\n    // Note that the check needs to occur for every definition since it notifies the definition\r\n    // that it can reset its dirty state. Using another operator like `some` may short-circuit\r\n    // remaining definitions and leave them in an unchecked state.\r\n\r\n    if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\r\n      this.updateStickyHeaderRowStyles();\r\n    }\r\n\r\n    if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\r\n      this.updateStickyFooterRowStyles();\r\n    }\r\n\r\n    if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\r\n      this.updateStickyColumnStyles();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates the sticky styler that will be used for sticky rows and columns. Listens\r\n   * for directionality changes and provides the latest direction to the styler. Re-applies column\r\n   * stickiness when directionality changes.\r\n   */\r\n  private _setupStickyStyler() {\r\n    const direction: Direction = this._dir ? this._dir.value : 'ltr';\r\n    this._stickyStyler = new StickyStyler(\r\n        this._isNativeHtmlTable, this.stickyCssClass, direction, this._platform.isBrowser);\r\n    (this._dir ? this._dir.change : observableOf<Direction>())\r\n        .pipe(takeUntil(this._onDestroy))\r\n        .subscribe(value => {\r\n          this._stickyStyler.direction = value;\r\n          this.updateStickyColumnStyles();\r\n        });\r\n  }\r\n}\r\n\r\n/** Utility function that gets a merged list of the entries in a QueryList and values of a Set. */\r\nfunction mergeQueryListAndSet<T>(queryList: QueryList<T>, set: Set<T>): T[] {\r\n  return queryList.toArray().concat(Array.from(set));\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  isDevMode,\r\n} from '@angular/core';\r\nimport {CdkCellDef, CdkColumnDef, CdkHeaderCellDef} from './cell';\r\nimport {CdkTable} from './table';\r\nimport {\r\n  getTableTextColumnMissingParentTableError,\r\n  getTableTextColumnMissingNameError,\r\n} from './table-errors';\r\n\r\n\r\n/** Configurable options for `CdkTextColumn`. */\r\nexport interface TextColumnOptions<T> {\r\n  /**\r\n   * Default function that provides the header text based on the column name if a header\r\n   * text is not provided.\r\n   */\r\n  defaultHeaderTextTransform?: (name: string) => string;\r\n\r\n  /** Default data accessor to use if one is not provided. */\r\n  defaultDataAccessor?: (data: T, name: string) => string;\r\n}\r\n\r\n/** Injection token that can be used to specify the text column options. */\r\nexport const TEXT_COLUMN_OPTIONS =\r\n    new InjectionToken<TextColumnOptions<any>>('text-column-options');\r\n\r\n/**\r\n * Column that simply shows text content for the header and row cells. Assumes that the table\r\n * is using the native table implementation (`<table>`).\r\n *\r\n * By default, the name of this column will be the header text and data property accessor.\r\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\r\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\r\n * input.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'cdk-text-column',\r\n  template: `\r\n    <ng-container cdkColumnDef>\r\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\r\n        {{headerText}}\r\n      </th>\r\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\r\n        {{dataAccessor(data, name)}}\r\n      </td>\r\n    </ng-container>\r\n  `,\r\n  encapsulation: ViewEncapsulation.None,\r\n  // Change detection is intentionally not set to OnPush. This component's template will be provided\r\n  // to the table to be inserted into its view. This is problematic when change detection runs since\r\n  // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\r\n  // mean's the template in the table's view will not have the updated value (and in fact will cause\r\n  // an ExpressionChangedAfterItHasBeenCheckedError).\r\n  // tslint:disable-next-line:validate-decorators\r\n  changeDetection: ChangeDetectionStrategy.Default,\r\n})\r\nexport class CdkTextColumn<T> implements OnDestroy, OnInit {\r\n  /** Column name that should be used to reference this column. */\r\n  @Input()\r\n  get name(): string {\r\n    return this._name;\r\n  }\r\n  set name(name: string) {\r\n    this._name = name;\r\n\r\n    // With Ivy, inputs can be initialized before static query results are\r\n    // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\r\n    this._syncColumnDefName();\r\n  }\r\n  _name: string;\r\n\r\n  /**\r\n   * Text label that should be used for the column header. If this property is not\r\n   * set, the header text will default to the column name with its first letter capitalized.\r\n   */\r\n  @Input() headerText: string;\r\n\r\n  /**\r\n   * Accessor function to retrieve the data rendered for each cell. If this\r\n   * property is not set, the data cells will render the value found in the data's property matching\r\n   * the column's name. For example, if the column is named `id`, then the rendered value will be\r\n   * value defined by the data's `id` property.\r\n   */\r\n  @Input() dataAccessor: (data: T, name: string) => string;\r\n\r\n  /** Alignment of the cell values. */\r\n  @Input() justify: 'start'|'end' = 'start';\r\n\r\n  /** @docs-private */\r\n  @ViewChild(CdkColumnDef, {static: true}) columnDef: CdkColumnDef;\r\n\r\n  /**\r\n   * The column cell is provided to the column during `ngOnInit` with a static query.\r\n   * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\r\n   * column definition was provided in the same view as the table, which is not the case with this\r\n   * component.\r\n   * @docs-private\r\n   */\r\n  @ViewChild(CdkCellDef, {static: true}) cell: CdkCellDef;\r\n\r\n  /**\r\n   * The column headerCell is provided to the column during `ngOnInit` with a static query.\r\n   * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\r\n   * column definition was provided in the same view as the table, which is not the case with this\r\n   * component.\r\n   * @docs-private\r\n   */\r\n  @ViewChild(CdkHeaderCellDef, {static: true}) headerCell: CdkHeaderCellDef;\r\n\r\n  constructor(\r\n      @Optional() private _table: CdkTable<T>,\r\n      @Optional() @Inject(TEXT_COLUMN_OPTIONS) private _options: TextColumnOptions<T>) {\r\n    this._options = _options || {};\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._syncColumnDefName();\r\n\r\n    if (this.headerText === undefined) {\r\n      this.headerText = this._createDefaultHeaderText();\r\n    }\r\n\r\n    if (!this.dataAccessor) {\r\n      this.dataAccessor =\r\n          this._options.defaultDataAccessor || ((data: T, name: string) => (data as any)[name]);\r\n    }\r\n\r\n    if (this._table) {\r\n      // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\r\n      // since the columnDef will not pick up its content by the time the table finishes checking\r\n      // its content and initializing the rows.\r\n      this.columnDef.cell = this.cell;\r\n      this.columnDef.headerCell = this.headerCell;\r\n      this._table.addColumnDef(this.columnDef);\r\n    } else {\r\n      throw getTableTextColumnMissingParentTableError();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._table) {\r\n      this._table.removeColumnDef(this.columnDef);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a default header text. Use the options' header text transformation function if one\r\n   * has been provided. Otherwise simply capitalize the column name.\r\n   */\r\n  _createDefaultHeaderText() {\r\n    const name = this.name;\r\n\r\n    if (isDevMode() && !name) {\r\n      throw getTableTextColumnMissingNameError();\r\n    }\r\n\r\n    if (this._options && this._options.defaultHeaderTextTransform) {\r\n      return this._options.defaultHeaderTextTransform(name);\r\n    }\r\n\r\n    return name[0].toUpperCase() + name.slice(1);\r\n  }\r\n\r\n  /** Synchronizes the column definition name with the text column name. */\r\n  private _syncColumnDefName() {\r\n    if (this.columnDef) {\r\n      this.columnDef.name = this.name;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {HeaderRowOutlet, DataRowOutlet, CdkTable, FooterRowOutlet} from './table';\r\nimport {\r\n  CdkCellOutlet, CdkFooterRow, CdkFooterRowDef, CdkHeaderRow, CdkHeaderRowDef, CdkRow,\r\n  CdkRowDef\r\n} from './row';\r\nimport {\r\n  CdkColumnDef, CdkHeaderCellDef, CdkHeaderCell, CdkCell, CdkCellDef,\r\n  CdkFooterCellDef, CdkFooterCell\r\n} from './cell';\r\nimport {CdkTextColumn} from './text-column';\r\n\r\nconst EXPORTED_DECLARATIONS = [\r\n  CdkTable,\r\n  CdkRowDef,\r\n  CdkCellDef,\r\n  CdkCellOutlet,\r\n  CdkHeaderCellDef,\r\n  CdkFooterCellDef,\r\n  CdkColumnDef,\r\n  CdkCell,\r\n  CdkRow,\r\n  CdkHeaderCell,\r\n  CdkFooterCell,\r\n  CdkHeaderRow,\r\n  CdkHeaderRowDef,\r\n  CdkFooterRow,\r\n  CdkFooterRowDef,\r\n  DataRowOutlet,\r\n  HeaderRowOutlet,\r\n  FooterRowOutlet,\r\n  CdkTextColumn,\r\n];\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: EXPORTED_DECLARATIONS,\r\n  declarations: EXPORTED_DECLARATIONS\r\n\r\n})\r\nexport class CdkTableModule { }\r\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","mixinHasStickyInput","base","_super","class_1","args","_i","arguments","length","_this","apply","_sticky","_hasStickyChanged","tslib_1.__extends","defineProperty","v","prevValue","coerceBooleanProperty","hasStickyChanged","resetStickyChanged","getTableUnknownColumnError","id","Error","getTableDuplicateColumnNameError","name","getTableMultipleDefaultRowDefsError","getTableMissingMatchingRowDefError","data","JSON","stringify","getTableMissingRowDefsError","getTableUnknownDataSourceError","getTableTextColumnMissingParentTableError","getTableTextColumnMissingNameError","setPrototypeOf","__proto__","Array","p","hasOwnProperty","CdkCellDef","template","type","Directive","selector","TemplateRef","CdkHeaderCellDef","CdkFooterCellDef","CdkColumnDefBase","_CdkColumnDefBase","CdkColumnDef","_stickyEnd","_name","cssClassFriendlyName","replace","inputs","providers","provide","useExisting","Input","stickyEnd","cell","ContentChild","static","headerCell","footerCell","BaseCdkCell","columnDef","elementRef","columnClassName","nativeElement","classList","add","CdkHeaderCell","call","host","class","role","ElementRef","CdkFooterCell","CdkCell","CDK_ROW_TEMPLATE","BaseRowDef","_differs","ngOnChanges","changes","_columnsDiffer","columns","currentValue","find","diff","getColumnsDiff","extractCellTemplate","column","CdkHeaderRowDef","CdkFooterRowDef","CdkHeaderRowDefBase","_CdkHeaderRowDefBase","IterableDiffers","CdkFooterRowDefBase","_CdkFooterRowDefBase","CdkRowDef","CdkCellOutlet","_viewContainer","mostRecentCellOutlet","ngOnDestroy","ViewContainerRef","CdkHeaderRow","Component","CdkFooterRow","decorators","changeDetection","ChangeDetectionStrategy","Default","encapsulation","ViewEncapsulation","None","CdkRow","STICKY_DIRECTIONS","StickyStyler","_isNativeHtmlTable","_stickCellCss","direction","_isBrowser","clearStickyPositioning","rows","stickyDirections","rows_1","row","nodeType","ELEMENT_NODE","_removeStickyStyle","i","children","updateStickyColumns","stickyStartStates","stickyEndStates","hasStickyColumns","some","state","firstRow","numCells","cellWidths","_getCellWidths","startPositions","_getStickyStartColumnPositions","endPositions","_getStickyEndColumnPositions","isRtl","rows_2","_addStickyStyle","stickRows","rowsToStick","stickyStates","position","reverse","stickyHeight","rowIndex","j","getBoundingClientRect","height","updateStickyFooterContainer","tableElement","tfoot","querySelector","element","stickyDirections_1","dir","style","zIndex","_getCalculatedZIndex","remove","dirValue","cssText","zIndexIncrements","top","bottom","left","right","STICKY_DIRECTIONS_1","firstRowCells","push","width","widths","positions","nextPosition","DataRowOutlet","viewContainer","HeaderRowOutlet","FooterRowOutlet","CDK_TABLE_TEMPLATE","CdkTable","RowViewRef","EmbeddedViewRef","_changeDetectorRef","_elementRef","_dir","_document","_platform","_onDestroy","Subject","_columnDefsByName","Map","_customColumnDefs","Set","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_headerRowDefChanged","_footerRowDefChanged","_cachedRenderRowsMap","stickyCssClass","_multiTemplateDataRows","viewChange","BehaviorSubject","start","end","Number","MAX_VALUE","setAttribute","nodeName","_trackByFn","fn","isDevMode","console","warn","_dataSource","dataSource","_switchDataSource","_rowOutlet","_forceRenderDataRows","ngOnInit","_setupStickyStyler","_applyNativeTableSections","_dataDiffer","dataRow","trackBy","dataIndex","ngAfterContentChecked","_cacheRowDefs","_cacheColumnDefs","_headerRowDefs","_footerRowDefs","_rowDefs","_renderUpdatedColumns","_forceRenderHeaderRows","_forceRenderFooterRows","_renderChangeSubscription","_observeRenderChanges","_checkStickyStates","clear","_headerRowOutlet","_footerRowOutlet","next","complete","isDataSource","disconnect","renderRows","_renderRows","_getAllRenderRows","forEachOperation","record","prevIndex","currentIndex","previousIndex","_insertRow","item","view","get","move","_updateRowIndexContext","forEachIdentityChange","context","$implicit","updateStickyColumnStyles","setHeaderRowDef","headerRowDef","setFooterRowDef","footerRowDef","addColumnDef","removeColumnDef","delete","addRowDef","rowDef","removeRowDef","addHeaderRowDef","removeHeaderRowDef","addFooterRowDef","removeFooterRowDef","updateStickyHeaderRowStyles","headerRows","_getRenderedRows","thead","display","map","def","sticky","_stickyStyler","forEach","updateStickyFooterRowStyles","footerRows","dataRows","concat","headerRow","_addStickyColumnStyles","footerRow","from","values","prevCachedRenderRows","_data","renderRowsForData","_getRenderRowsForData","has","set","WeakMap","renderRow","cache","_getRowDefs","cachedRenderRows","shift","mergeQueryListAndSet","_contentColumnDefs","_contentHeaderRowDefs","_contentFooterRowDefs","_contentRowDefs","defaultRowDefs","filter","when","multiTemplateDataRows","_defaultRowDef","columnsDiffReducer","acc","reduce","unsubscribe","dataStream","connect","Observable","isArray","observableOf","undefined","pipe","takeUntil","subscribe","_renderRow","columnDefs","columnName","rowOutlet","renderedRows","viewRef","rootNodes","rowDefs","renderIndex","outlet","index","createEmbeddedView","_a","_b","_getCellTemplates","cellTemplate","markForCheck","count","first","last","even","odd","columnId","documentFragment","createDocumentFragment","sections","tag","sections_1","section","createElement","appendChild","stickyCheckReducer","value","isBrowser","change","exportAs","String","Attribute","Directionality","Optional","Inject","DOCUMENT","Platform","propDecorators","ViewChild","ContentChildren","TEXT_COLUMN_OPTIONS","InjectionToken","CdkTextColumn","_table","_options","justify","_syncColumnDefName","headerText","_createDefaultHeaderText","dataAccessor","defaultDataAccessor","defaultHeaderTextTransform","toUpperCase","slice","EXPORTED_DECLARATIONS","CdkTableModule","NgModule","imports","CommonModule","exports","declarations"],"mappings":"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"}