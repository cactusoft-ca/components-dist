{"version":3,"file":"stepper.es5.js","sources":["../../../src/cdk/stepper/stepper-module.ts","../../../src/cdk/stepper/stepper-button.ts","../../../src/cdk/stepper/stepper.ts","../../../src/cdk/stepper/step-header.ts","../../../src/cdk/stepper/step-label.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {NgModule} from '@angular/core';\r\nimport {CdkStepper, CdkStep} from './stepper';\r\nimport {CommonModule} from '@angular/common';\r\nimport {CdkStepLabel} from './step-label';\r\nimport {CdkStepperNext, CdkStepperPrevious} from './stepper-button';\r\nimport {CdkStepHeader} from './step-header';\r\nimport {BidiModule} from '@angular/cdk/bidi';\r\n\r\n@NgModule({\r\n  imports: [BidiModule, CommonModule],\r\n  exports: [\r\n    CdkStep,\r\n    CdkStepper,\r\n    CdkStepHeader,\r\n    CdkStepLabel,\r\n    CdkStepperNext,\r\n    CdkStepperPrevious,\r\n  ],\r\n  declarations: [\r\n    CdkStep,\r\n    CdkStepper,\r\n    CdkStepHeader,\r\n    CdkStepLabel,\r\n    CdkStepperNext,\r\n    CdkStepperPrevious,\r\n  ]\r\n})\r\nexport class CdkStepperModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, HostListener, Input} from '@angular/core';\r\n\r\nimport {CdkStepper} from './stepper';\r\n\r\n/** Button that moves to the next step in a stepper workflow. */\r\n@Directive({\r\n  selector: 'button[cdkStepperNext]',\r\n  host: {\r\n    '[type]': 'type',\r\n  }\r\n})\r\nexport class CdkStepperNext {\r\n  /** Type of the next button. Defaults to \"submit\" if not specified. */\r\n  @Input() type: string = 'submit';\r\n\r\n  constructor(public _stepper: CdkStepper) {}\r\n\r\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\r\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\r\n  // ViewEngine they're overwritte.\r\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\r\n  // tslint:disable-next-line:no-host-decorator-in-concrete\r\n  @HostListener('click')\r\n  _handleClick() {\r\n    this._stepper.next();\r\n  }\r\n}\r\n\r\n/** Button that moves to the previous step in a stepper workflow. */\r\n@Directive({\r\n  selector: 'button[cdkStepperPrevious]',\r\n  host: {\r\n    '[type]': 'type',\r\n  }\r\n})\r\nexport class CdkStepperPrevious {\r\n  /** Type of the previous button. Defaults to \"button\" if not specified. */\r\n  @Input() type: string = 'button';\r\n\r\n  constructor(public _stepper: CdkStepper) {}\r\n\r\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\r\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\r\n  // ViewEngine they're overwritte.\r\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\r\n  // tslint:disable-next-line:no-host-decorator-in-concrete\r\n  @HostListener('click')\r\n  _handleClick() {\r\n    this._stepper.previous();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\r\nimport {Direction, Directionality} from '@angular/cdk/bidi';\r\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\r\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  Directive,\r\n  EventEmitter,\r\n  ElementRef,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  InjectionToken,\r\n} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {CdkStepLabel} from './step-label';\r\nimport {Observable, Subject, of as obaservableOf} from 'rxjs';\r\nimport {startWith, takeUntil} from 'rxjs/operators';\r\nimport {CdkStepHeader} from './step-header';\r\n\r\n/** Used to generate unique ID for each stepper component. */\r\nlet nextId = 0;\r\n\r\n/**\r\n * Position state of the content of each step in stepper that is used for transitioning\r\n * the content into correct position upon step selection change.\r\n */\r\nexport type StepContentPositionState = 'previous' | 'current' | 'next';\r\n\r\n/** Possible orientation of a stepper. */\r\nexport type StepperOrientation = 'horizontal' | 'vertical';\r\n\r\n/** Change event emitted on selection changes. */\r\nexport class StepperSelectionEvent {\r\n  /** Index of the step now selected. */\r\n  selectedIndex: number;\r\n\r\n  /** Index of the step previously selected. */\r\n  previouslySelectedIndex: number;\r\n\r\n  /** The step instance now selected. */\r\n  selectedStep: CdkStep;\r\n\r\n  /** The step instance previously selected. */\r\n  previouslySelectedStep: CdkStep;\r\n}\r\n\r\n/** The state of each step. */\r\nexport type StepState = 'number' | 'edit' | 'done' | 'error' | string;\r\n\r\n/** Enum to represent the different states of the steps. */\r\nexport const STEP_STATE = {\r\n  NUMBER: 'number',\r\n  EDIT: 'edit',\r\n  DONE: 'done',\r\n  ERROR: 'error'\r\n};\r\n\r\n/** InjectionToken that can be used to specify the global stepper options. */\r\nexport const STEPPER_GLOBAL_OPTIONS =\r\n  new InjectionToken<StepperOptions>('STEPPER_GLOBAL_OPTIONS');\r\n\r\n/**\r\n * InjectionToken that can be used to specify the global stepper options.\r\n * @deprecated Use `STEPPER_GLOBAL_OPTIONS` instead.\r\n * @breaking-change 8.0.0.\r\n */\r\nexport const MAT_STEPPER_GLOBAL_OPTIONS = STEPPER_GLOBAL_OPTIONS;\r\n\r\n/** Configurable options for stepper. */\r\nexport interface StepperOptions {\r\n  /**\r\n   * Whether the stepper should display an error state or not.\r\n   * Default behavior is assumed to be false.\r\n   */\r\n  showError?: boolean;\r\n\r\n  /**\r\n   * Whether the stepper should display the default indicator type\r\n   * or not.\r\n   * Default behavior is assumed to be true.\r\n   */\r\n  displayDefaultIndicatorType?: boolean;\r\n}\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'cdk-step',\r\n  exportAs: 'cdkStep',\r\n  template: '<ng-template><ng-content></ng-content></ng-template>',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CdkStep implements OnChanges {\r\n  private _stepperOptions: StepperOptions;\r\n  _showError: boolean;\r\n  _displayDefaultIndicatorType: boolean;\r\n\r\n  /** Template for step label if it exists. */\r\n  @ContentChild(CdkStepLabel, {static: false}) stepLabel: CdkStepLabel;\r\n\r\n  /** Template for step content. */\r\n  @ViewChild(TemplateRef, {static: true}) content: TemplateRef<any>;\r\n\r\n  /** The top level abstract control of the step. */\r\n  @Input() stepControl: FormControlLike;\r\n\r\n  /** Whether user has seen the expanded step content or not. */\r\n  interacted = false;\r\n\r\n  /** Plain text label of the step. */\r\n  @Input() label: string;\r\n\r\n  /** Error message to display when there's an error. */\r\n  @Input() errorMessage: string;\r\n\r\n  /** Aria label for the tab. */\r\n  @Input('aria-label') ariaLabel: string;\r\n\r\n  /**\r\n   * Reference to the element that the tab is labelled by.\r\n   * Will be cleared if `aria-label` is set at the same time.\r\n   */\r\n  @Input('aria-labelledby') ariaLabelledby: string;\r\n\r\n  /** State of the step. */\r\n  @Input() state: StepState;\r\n\r\n  /** Whether the user can return to this step once it has been marked as completed. */\r\n  @Input()\r\n  get editable(): boolean { return this._editable; }\r\n  set editable(value: boolean) {\r\n    this._editable = coerceBooleanProperty(value);\r\n  }\r\n  private _editable = true;\r\n\r\n  /** Whether the completion of step is optional. */\r\n  @Input()\r\n  get optional(): boolean { return this._optional; }\r\n  set optional(value: boolean) {\r\n    this._optional = coerceBooleanProperty(value);\r\n  }\r\n  private _optional = false;\r\n\r\n  /** Whether step is marked as completed. */\r\n  @Input()\r\n  get completed(): boolean {\r\n    return this._customCompleted == null ? this._getDefaultCompleted() : this._customCompleted;\r\n  }\r\n  set completed(value: boolean) {\r\n    this._customCompleted = coerceBooleanProperty(value);\r\n  }\r\n  private _customCompleted: boolean | null = null;\r\n\r\n  private _getDefaultCompleted() {\r\n    return this.stepControl ? this.stepControl.valid && this.interacted : this.interacted;\r\n  }\r\n\r\n  /** Whether step has an error. */\r\n  @Input()\r\n  get hasError(): boolean {\r\n    return this._customError == null ? this._getDefaultError() : this._customError;\r\n  }\r\n  set hasError(value: boolean) {\r\n    this._customError = coerceBooleanProperty(value);\r\n  }\r\n  private _customError: boolean | null = null;\r\n\r\n  private _getDefaultError() {\r\n    return this.stepControl && this.stepControl.invalid && this.interacted;\r\n  }\r\n\r\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\r\n  constructor(\r\n    @Inject(forwardRef(() => CdkStepper)) private _stepper: CdkStepper,\r\n    @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\r\n    this._stepperOptions = stepperOptions ? stepperOptions : {};\r\n    this._displayDefaultIndicatorType = this._stepperOptions.displayDefaultIndicatorType !== false;\r\n    this._showError = !!this._stepperOptions.showError;\r\n  }\r\n\r\n  /** Selects this step component. */\r\n  select(): void {\r\n    this._stepper.selected = this;\r\n  }\r\n\r\n  /** Resets the step to its initial state. Note that this includes resetting form data. */\r\n  reset(): void {\r\n    this.interacted = false;\r\n\r\n    if (this._customCompleted != null) {\r\n      this._customCompleted = false;\r\n    }\r\n\r\n    if (this._customError != null) {\r\n      this._customError = false;\r\n    }\r\n\r\n    if (this.stepControl) {\r\n      this.stepControl.reset();\r\n    }\r\n  }\r\n\r\n  ngOnChanges() {\r\n    // Since basically all inputs of the MatStep get proxied through the view down to the\r\n    // underlying MatStepHeader, we have to make sure that change detection runs correctly.\r\n    this._stepper._stateChanged();\r\n  }\r\n}\r\n\r\n@Directive({\r\n  selector: '[cdkStepper]',\r\n  exportAs: 'cdkStepper',\r\n})\r\nexport class CdkStepper implements AfterViewInit, OnDestroy {\r\n  /** Emits when the component is destroyed. */\r\n  protected _destroyed = new Subject<void>();\r\n\r\n  /** Used for managing keyboard focus. */\r\n  private _keyManager: FocusKeyManager<FocusableOption>;\r\n\r\n  /**\r\n   * @breaking-change 8.0.0 Remove `| undefined` once the `_document`\r\n   * constructor param is required.\r\n   */\r\n  private _document: Document | undefined;\r\n\r\n  /**\r\n   * The list of step components that the stepper is holding.\r\n   * @deprecated use `steps` instead\r\n   * @breaking-change 9.0.0 remove this property\r\n   */\r\n  @ContentChildren(CdkStep) _steps: QueryList<CdkStep>;\r\n\r\n  /** The list of step components that the stepper is holding. */\r\n  get steps():  QueryList<CdkStep> {\r\n    return this._steps;\r\n  }\r\n\r\n  /**\r\n   * The list of step headers of the steps in the stepper.\r\n   * @deprecated Type to be changed to `QueryList<CdkStepHeader>`.\r\n   * @breaking-change 8.0.0\r\n   */\r\n  @ContentChildren(CdkStepHeader) _stepHeader: QueryList<FocusableOption>;\r\n\r\n  /** Whether the validity of previous steps should be checked or not. */\r\n  @Input()\r\n  get linear(): boolean { return this._linear; }\r\n  set linear(value: boolean) { this._linear = coerceBooleanProperty(value); }\r\n  private _linear = false;\r\n\r\n  /** The index of the selected step. */\r\n  @Input()\r\n  get selectedIndex() { return this._selectedIndex; }\r\n  set selectedIndex(index: number) {\r\n    const newIndex = coerceNumberProperty(index);\r\n\r\n    if (this.steps) {\r\n      // Ensure that the index can't be out of bounds.\r\n      if (newIndex < 0 || newIndex > this.steps.length - 1) {\r\n        throw Error('cdkStepper: Cannot assign out-of-bounds value to `selectedIndex`.');\r\n      }\r\n\r\n      if (this._selectedIndex != newIndex &&\r\n          !this._anyControlsInvalidOrPending(newIndex) &&\r\n          (newIndex >= this._selectedIndex || this.steps.toArray()[newIndex].editable)) {\r\n        this._updateSelectedItemIndex(index);\r\n      }\r\n    } else {\r\n      this._selectedIndex = newIndex;\r\n    }\r\n  }\r\n  private _selectedIndex = 0;\r\n\r\n  /** The step that is selected. */\r\n  @Input()\r\n  get selected(): CdkStep {\r\n    // @breaking-change 8.0.0 Change return type to `CdkStep | undefined`.\r\n    return this.steps ? this.steps.toArray()[this.selectedIndex] : undefined!;\r\n  }\r\n  set selected(step: CdkStep) {\r\n    this.selectedIndex = this.steps ? this.steps.toArray().indexOf(step) : -1;\r\n  }\r\n\r\n  /** Event emitted when the selected step has changed. */\r\n  @Output() selectionChange: EventEmitter<StepperSelectionEvent>\r\n      = new EventEmitter<StepperSelectionEvent>();\r\n\r\n  /** Used to track unique ID for each stepper component. */\r\n  _groupId: number;\r\n\r\n  protected _orientation: StepperOrientation = 'horizontal';\r\n\r\n  constructor(\r\n    @Optional() private _dir: Directionality,\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    // @breaking-change 8.0.0 `_elementRef` and `_document` parameters to become required.\r\n    private _elementRef?: ElementRef<HTMLElement>,\r\n    @Inject(DOCUMENT) _document?: any) {\r\n    this._groupId = nextId++;\r\n    this._document = _document;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // Note that while the step headers are content children by default, any components that\r\n    // extend this one might have them as view chidren. We initialize the keyboard handling in\r\n    // AfterViewInit so we're guaranteed for both view and content children to be defined.\r\n    this._keyManager = new FocusKeyManager<FocusableOption>(this._stepHeader)\r\n      .withWrap()\r\n      .withVerticalOrientation(this._orientation === 'vertical');\r\n\r\n    (this._dir ? this._dir.change as Observable<Direction> : obaservableOf<Direction>())\r\n      .pipe(startWith(this._layoutDirection()), takeUntil(this._destroyed))\r\n      .subscribe(direction => this._keyManager.withHorizontalOrientation(direction));\r\n\r\n    this._keyManager.updateActiveItemIndex(this._selectedIndex);\r\n\r\n    this.steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => {\r\n      if (!this.selected) {\r\n        this._selectedIndex = Math.max(this._selectedIndex - 1, 0);\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /** Selects and focuses the next step in list. */\r\n  next(): void {\r\n    this.selectedIndex = Math.min(this._selectedIndex + 1, this.steps.length - 1);\r\n  }\r\n\r\n  /** Selects and focuses the previous step in list. */\r\n  previous(): void {\r\n    this.selectedIndex = Math.max(this._selectedIndex - 1, 0);\r\n  }\r\n\r\n  /** Resets the stepper to its initial state. Note that this includes clearing form data. */\r\n  reset(): void {\r\n    this._updateSelectedItemIndex(0);\r\n    this.steps.forEach(step => step.reset());\r\n    this._stateChanged();\r\n  }\r\n\r\n  /** Returns a unique id for each step label element. */\r\n  _getStepLabelId(i: number): string {\r\n    return `cdk-step-label-${this._groupId}-${i}`;\r\n  }\r\n\r\n  /** Returns unique id for each step content element. */\r\n  _getStepContentId(i: number): string {\r\n    return `cdk-step-content-${this._groupId}-${i}`;\r\n  }\r\n\r\n  /** Marks the component to be change detected. */\r\n  _stateChanged() {\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Returns position state of the step with the given index. */\r\n  _getAnimationDirection(index: number): StepContentPositionState {\r\n    const position = index - this._selectedIndex;\r\n    if (position < 0) {\r\n      return this._layoutDirection() === 'rtl' ? 'next' : 'previous';\r\n    } else if (position > 0) {\r\n      return this._layoutDirection() === 'rtl' ? 'previous' : 'next';\r\n    }\r\n    return 'current';\r\n  }\r\n\r\n  /** Returns the type of icon to be displayed. */\r\n  _getIndicatorType(index: number, state: StepState = STEP_STATE.NUMBER): StepState {\r\n    const step = this.steps.toArray()[index];\r\n    const isCurrentStep = this._isCurrentStep(index);\r\n\r\n    return step._displayDefaultIndicatorType\r\n      ? this._getDefaultIndicatorLogic(step, isCurrentStep)\r\n      : this._getGuidelineLogic(step, isCurrentStep, state);\r\n  }\r\n\r\n  private _getDefaultIndicatorLogic(step: CdkStep, isCurrentStep: boolean): StepState {\r\n    if (step._showError && step.hasError && !isCurrentStep) {\r\n      return STEP_STATE.ERROR;\r\n    } else if (!step.completed || isCurrentStep) {\r\n      return STEP_STATE.NUMBER;\r\n    } else {\r\n      return step.editable ? STEP_STATE.EDIT : STEP_STATE.DONE;\r\n    }\r\n  }\r\n\r\n  private _getGuidelineLogic(\r\n    step: CdkStep,\r\n    isCurrentStep: boolean,\r\n    state: StepState = STEP_STATE.NUMBER): StepState {\r\n    if (step._showError && step.hasError && !isCurrentStep) {\r\n      return STEP_STATE.ERROR;\r\n    } else if (step.completed && !isCurrentStep) {\r\n      return STEP_STATE.DONE;\r\n    } else if (step.completed && isCurrentStep) {\r\n      return state;\r\n    } else if (step.editable && isCurrentStep) {\r\n      return STEP_STATE.EDIT;\r\n    } else {\r\n      return state;\r\n    }\r\n  }\r\n\r\n  private _isCurrentStep(index: number) {\r\n    return this._selectedIndex === index;\r\n  }\r\n\r\n  /** Returns the index of the currently-focused step header. */\r\n  _getFocusIndex() {\r\n    return this._keyManager ? this._keyManager.activeItemIndex : this._selectedIndex;\r\n  }\r\n\r\n  private _updateSelectedItemIndex(newIndex: number): void {\r\n    const stepsArray = this.steps.toArray();\r\n    this.selectionChange.emit({\r\n      selectedIndex: newIndex,\r\n      previouslySelectedIndex: this._selectedIndex,\r\n      selectedStep: stepsArray[newIndex],\r\n      previouslySelectedStep: stepsArray[this._selectedIndex],\r\n    });\r\n\r\n    // If focus is inside the stepper, move it to the next header, otherwise it may become\r\n    // lost when the active step content is hidden. We can't be more granular with the check\r\n    // (e.g. checking whether focus is inside the active step), because we don't have a\r\n    // reference to the elements that are rendering out the content.\r\n    this._containsFocus() ? this._keyManager.setActiveItem(newIndex) :\r\n                            this._keyManager.updateActiveItemIndex(newIndex);\r\n\r\n    this._selectedIndex = newIndex;\r\n    this._stateChanged();\r\n  }\r\n\r\n  _onKeydown(event: KeyboardEvent) {\r\n    const hasModifier = hasModifierKey(event);\r\n    const keyCode = event.keyCode;\r\n    const manager = this._keyManager;\r\n\r\n    if (manager.activeItemIndex != null && !hasModifier &&\r\n        (keyCode === SPACE || keyCode === ENTER)) {\r\n      this.selectedIndex = manager.activeItemIndex;\r\n      event.preventDefault();\r\n    } else if (keyCode === HOME) {\r\n      manager.setFirstItemActive();\r\n      event.preventDefault();\r\n    } else if (keyCode === END) {\r\n      manager.setLastItemActive();\r\n      event.preventDefault();\r\n    } else {\r\n      manager.onKeydown(event);\r\n    }\r\n  }\r\n\r\n  private _anyControlsInvalidOrPending(index: number): boolean {\r\n    const steps = this.steps.toArray();\r\n\r\n    steps[this._selectedIndex].interacted = true;\r\n\r\n    if (this._linear && index >= 0) {\r\n      return steps.slice(0, index).some(step => {\r\n        const control = step.stepControl;\r\n        const isIncomplete = control ?\r\n            (control.invalid || control.pending || !step.interacted) :\r\n            !step.completed;\r\n        return isIncomplete && !step.optional;\r\n      });\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private _layoutDirection(): Direction {\r\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\r\n  }\r\n\r\n  /** Checks whether the stepper contains the focused element. */\r\n  private _containsFocus(): boolean {\r\n    if (!this._document || !this._elementRef) {\r\n      return false;\r\n    }\r\n\r\n    const stepperElement = this._elementRef.nativeElement;\r\n    const focusedElement = this._document.activeElement;\r\n    return stepperElement === focusedElement || stepperElement.contains(focusedElement);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Simplified representation of a FormControl from @angular/forms.\r\n * Used to avoid having to bring in @angular/forms for a single optional interface.\r\n * @docs-private\r\n */\r\ninterface FormControlLike {\r\n  asyncValidator: () => any | null;\r\n  dirty: boolean;\r\n  disabled: boolean;\r\n  enabled: boolean;\r\n  errors: {[key: string]: any} | null;\r\n  invalid: boolean;\r\n  parent: any;\r\n  pending: boolean;\r\n  pristine: boolean;\r\n  root: FormControlLike;\r\n  status: string;\r\n  statusChanges: Observable<any>;\r\n  touched: boolean;\r\n  untouched: boolean;\r\n  updateOn: any;\r\n  valid: boolean;\r\n  validator: () => any | null;\r\n  value: any;\r\n  valueChanges: Observable<any>;\r\n  clearAsyncValidators(): void;\r\n  clearValidators(): void;\r\n  disable(opts?: any): void;\r\n  enable(opts?: any): void;\r\n  get(path: (string | number)[] | string): FormControlLike | null;\r\n  getError(errorCode: string, path?: (string | number)[] | string): any;\r\n  hasError(errorCode: string, path?: (string | number)[] | string): boolean;\r\n  markAllAsTouched(): void;\r\n  markAsDirty(opts?: any): void;\r\n  markAsPending(opts?: any): void;\r\n  markAsPristine(opts?: any): void;\r\n  markAsTouched(opts?: any): void;\r\n  markAsUntouched(opts?: any): void;\r\n  patchValue(value: any, options?: Object): void;\r\n  reset(value?: any, options?: Object): void;\r\n  setAsyncValidators(newValidator: () => any | (() => any)[] | null): void;\r\n  setErrors(errors: {[key: string]: any} | null, opts?: any): void;\r\n  setParent(parent: any): void;\r\n  setValidators(newValidator: () => any | (() => any)[] | null): void;\r\n  setValue(value: any, options?: Object): void;\r\n  updateValueAndValidity(opts?: any): void;\r\n  patchValue(value: any, options?: any): void;\r\n  registerOnChange(fn: Function): void;\r\n  registerOnDisabledChange(fn: (isDisabled: boolean) => void): void;\r\n  reset(formState?: any, options?: any): void;\r\n  setValue(value: any, options?: any): void;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, ElementRef} from '@angular/core';\r\nimport {FocusableOption} from '@angular/cdk/a11y';\r\n\r\n\r\n@Directive({\r\n  selector: '[cdkStepHeader]',\r\n  host: {\r\n    'role': 'tab',\r\n  },\r\n})\r\nexport class CdkStepHeader implements FocusableOption {\r\n  constructor(protected _elementRef: ElementRef<HTMLElement>) {}\r\n\r\n  /** Focuses the step header. */\r\n  focus() {\r\n    this._elementRef.nativeElement.focus();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Directive, TemplateRef} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[cdkStepLabel]',\r\n})\r\nexport class CdkStepLabel {\r\n  constructor(/** @docs-private */ public template: TemplateRef<any>) { }\r\n}\r\n"],"names":["obaservableOf"],"mappings":";;;;;;;;;;;;;;;;;;;;AIUA,IAAA,YAAA,kBAAA,YAAA;IAIE,SAAF,YAAA,sBAA0C,QAA0B,EAApE;QAA0C,IAA1C,CAAA,QAAkD,GAAR,QAAQ,CAAkB;KAAK;;QAJzE,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW;oBACT,QAAQ,EAAE,gBAAgB;iBAC3B,EAAD,EAAA;;;;QAJA,EAAA,IAAA,EAAmB,WAAW,EAA9B;;IAOA,OAAA,YAAC,CAAD;CAAC,EAAD,CAAA;;;;;;ADHA,IAAA,aAAA,kBAAA,YAAA;IAOE,SAAF,aAAA,CAAwB,WAAoC,EAA5D;QAAwB,IAAxB,CAAA,WAAmC,GAAX,WAAW,CAAyB;KAAI;;;;;;IAG9D,aAAF,CAAA,SAAA,CAAA,KAAO;;;;IAAL,YAAF;QACI,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;KACxC,CAAH;;QAZA,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW;oBACT,QAAQ,EAAE,iBAAiB;oBAC3B,IAAI,EAAE;wBACJ,MAAM,EAAE,KAAK;qBACd;iBACF,EAAD,EAAA;;;;QATA,EAAA,IAAA,EAAmB,UAAU,EAA7B;;IAiBA,OAAA,aAAC,CAAD;CAAC,EAAD,CAAA;;;;;;;;;;ADiBA,IAAI,MAAM,GAAG,CAAC,CAAd;;;;AAYA,AAAA,IAAA;;;;IAAA,SAAA,qBAAA,GAAA;KAYC;IAAD,OAAA,qBAAC,CAAD;CAAC,EAAD,CAAA,CAAC;;;;;AAMD,AAAA,IAAa,UAAU,GAAG;IACxB,MAAM,EAAE,QAAQ;IAChB,IAAI,EAAE,MAAM;IACZ,IAAI,EAAE,MAAM;IACZ,KAAK,EAAE,OAAO;CACf,CAAD;;;;;AAGA,AAAA,IAAa,sBAAsB,GACjC,IAAI,cAAc,CAAiB,wBAAwB,CAAC,CAD9D;;;;;;;AAQA,AAAA,IAAa,0BAA0B,GAAG,sBAAsB,CAAhE;AAkBA,IAAA,OAAA,kBAAA,YAAA;;IAwFE,SAAF,OAAA,CACkD,QAAoB,EACtB,cAA+B,EAF/E;QACkD,IAAlD,CAAA,QAA0D,GAAR,QAAQ,CAAY;;;;QAlEpE,IAAF,CAAA,UAAY,GAAG,KAAK,CAAC;QA0BX,IAAV,CAAA,SAAmB,GAAG,IAAI,CAAC;QAQjB,IAAV,CAAA,SAAmB,GAAG,KAAK,CAAC;QAUlB,IAAV,CAAA,gBAA0B,GAAmB,IAAI,CAAC;QAcxC,IAAV,CAAA,YAAsB,GAAmB,IAAI,CAAC;QAU1C,IAAI,CAAC,eAAe,GAAG,cAAc,GAAG,cAAc,GAAG,EAAE,CAAC;QAC5D,IAAI,CAAC,4BAA4B,GAAG,IAAI,CAAC,eAAe,CAAC,2BAA2B,KAAK,KAAK,CAAC;QAC/F,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC;KACpD;IAlDD,MAAF,CAAA,cAAA,CACM,OADN,CAAA,SAAA,EAAA,UACc,EADd;;;;;;QAAE,YAAF,EAC4B,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE;;;;;QAClD,UAAa,KAAc,EAA7B;YACI,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;SAC/C;;;KAHH,CAAA,CAAoD;IAOlD,MAAF,CAAA,cAAA,CACM,OADN,CAAA,SAAA,EAAA,UACc,EADd;;;;;;QAAE,YAAF,EAC4B,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE;;;;;QAClD,UAAa,KAAc,EAA7B;YACI,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;SAC/C;;;KAHH,CAAA,CAAoD;IAOlD,MAAF,CAAA,cAAA,CACM,OADN,CAAA,SAAA,EAAA,WACe,EADf;;;;;;QAAE,YAAF;YAEI,OAAO,IAAI,CAAC,gBAAgB,IAAI,IAAI,GAAG,IAAI,CAAC,oBAAoB,EAAE,GAAG,IAAI,CAAC,gBAAgB,CAAC;SAC5F;;;;;QACD,UAAc,KAAc,EAA9B;YACI,IAAI,CAAC,gBAAgB,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;SACtD;;;KAHH,CAAA,CAAG;;;;;IAMO,OAAV,CAAA,SAAA,CAAA,oBAA8B;;;;IAA5B,YAAF;QACI,OAAO,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,IAAI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;KACvF,CAAH;IAGE,MAAF,CAAA,cAAA,CACM,OADN,CAAA,SAAA,EAAA,UACc,EADd;;;;;;QAAE,YAAF;YAEI,OAAO,IAAI,CAAC,YAAY,IAAI,IAAI,GAAG,IAAI,CAAC,gBAAgB,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC;SAChF;;;;;QACD,UAAa,KAAc,EAA7B;YACI,IAAI,CAAC,YAAY,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;SAClD;;;KAHH,CAAA,CAAG;;;;;IAMO,OAAV,CAAA,SAAA,CAAA,gBAA0B;;;;IAAxB,YAAF;QACI,OAAO,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC;KACxE,CAAH;;;;;;IAYE,OAAF,CAAA,SAAA,CAAA,MAAQ;;;;IAAN,YAAF;QACI,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC;KAC/B,CAAH;;;;;;IAGE,OAAF,CAAA,SAAA,CAAA,KAAO;;;;IAAL,YAAF;QACI,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QAExB,IAAI,IAAI,CAAC,gBAAgB,IAAI,IAAI,EAAE;YACjC,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;SAC/B;QAED,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;YAC7B,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;SAC3B;QAED,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;SAC1B;KACF,CAAH;;;;IAEE,OAAF,CAAA,SAAA,CAAA,WAAa;;;IAAX,YAAF;;;QAGI,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC;KAC/B,CAAH;;QA1HA,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW,CAAX,QAAA,EAAA,UAAA;oBACE,QAAQ,EAAE,SAAS;oBACnB,QAAQ,EAAE,sDAAZ;oBACE,aAAF,EAAA,iBAAA,CAAA,IAAA;oBACE,eAAF,EAAA,uBAAA,CAAA,MAAA;iBACA,EAAA,EAAA;KACA,CAAA;;;;;;;;KAmFA,CAAA,EAAA,CAAA;IACA,OAAA,CAAA,cAAA,GAAA;;;QA5EA,WAAA,EAAA,CAAA,EAAA,IAAG,EAAH,KAAA,EAAA,CAAA;QAGA,KAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA;QAGA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA;QAMA,SAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,CAAA,YAAA,EAAA,EAAA,CAAA;QAGA,cAAA,EAAA,CAAA,EAAA,IAAG,EAAH,KAAA,EAAA,IAAA,EAAA,CAAA,iBAAA,EAAA,EAAA,CAAA;QAGA,KAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA;QAMA,QAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA;QAGA,QAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA;QAGA,SAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA;QAQA,QAAA,EAAA,CAAA,EAAA,IAAA,EAAG,KAAK,EAAR,CAAA;KAQA,CAAA;IAcA,OAAA,OAAA,CAAA;;AAiDA,AAlCA,IAAI,UAAJ,kBAAA,YAAA;;QAoCA,IAAA,CAAA,IAAA,GAAA,IAAA,CAAA;QAoFA,IAAA,CAAA,kBAAA,GAAA,kBAAA,CAAA;QACwB,IAAxB,CAAA,WAA4B,GAA5B,WAAA,CAAA;;;;;;QA/EY,IAAZ,CAAA,cAAA,GAA6B,CAA7B,CAAA;;;;;;QAsEY,IAAZ,CAAA,QAAA,GAAA,MAAA,EAAA,CAAA;QAMY,IAAZ,CAAA,SAAA,GAAwB,SAAxB,CAAA;KAQA;IACA,MAAA,CAAA,cAAqB,CAArB,UAAA,CAAA,SAAA,EAAA,OAAA,EAAA;;QAlEA,GAAA;;;;;;SAAA;QACA,UAAA,EAAA,IAAgB;QACd,YAAF,EAAA,IAAA;;;;QAUA,GAAA;;;;;;;;;;;QAEE,YAAF,EAAA,IAAA;;;;QAIA,GAAA;;;;;;;;;;;YAEA,IAAA,QAAA,GAAA,oBAAA,CAAA,KAAA,CAAA,CAAA;;;gBAGQ,IAAI,QAAQ,GAApB,CAAA,IAAA,QAAA,GAAA,IAAA,CAAA,KAAA,CAAA,MAAA,GAAA,CAAA,EAAA;oBACA,MAAA,KAAA,CAAA,mEAAA,CAAA,CAAA;iBACA;gBACA,IAAQ,IAAR,CAAA,cAAA,IAAA,QAAA;oBACA,CAAA,IAAA,CAAA,4BAAA,CAAA,QAAA,CAAA;qBAEA,QAAA,IAAA,IAAA,CAAA,cAAA,IAAA,IAAA,CAAA,KAAA,CAAA,OAAA,EAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,EAAA;oBACU,IAAV,CAAe,wBAAf,CAAA,KAA6C,CAA7C,CAAA;iBACA;aACA;iBACO;gBACP,IAAA,CAAA,cAAA,GAAA,QAAA,CAAA;aAAA;SACA;QACA,UAAA,EAAA,IAAA;QACE,YAAF,EAAA,IAAA;;;;QAIA,GAAA;;;;;;YAAA,OAAA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA,KAAA,CAAA,OAAA,EAAA,CAAA,IAAA,CAAA,aAAA,CAAA,sBAAA,SAAA,EAAA,CAAA;SAEA;QACA,GAAA;;;;;;SAEA;QACA,UAAA,EAAA,IAAA;QACE,YAAF,EAAA,IAAA;;;;;;;;;;;;;QAuBI,IAAJ,CAAA,WAAA,GAAA,IAAA,eAAA,CAAA,IAAA,CAAA,WAAA,CAAA;aACA,QAAA,EAAA;aACS,uBAAT,CAAA,IAAA,CAAA,YAAA,KAAA,UAAA,CAAA,CAAA;QACA,CAAA,IAAO,CAAP,IAAA,sBAAA,IAAA,CAAA,IAAA,CAAA,MAAA,KAAAA,EAAA,EAAA;aACO,IAAP,CAAA,SAAA,CAAA,IAAA,CAAA,gBAAA,EAAA,CAAA,EAAgD,SAAhD,CAAA,IAAA,CAA+D,UAA/D,CAAA,CAAA;aAES,SAAT;;;;;;QAEiB,IAAjB,CAAA,KAAiB,CAAjB,OAAA,CAA0B,IAAI,CAA9B,SAAA,CAAA,IAAA,CAAA,UAAA,CAAA,CAAA,CAAA,SAAA;;;;;gBAIA,KAAA,CAAA,cAAA,GAAA,IAAA,CAAA,GAAA,CAAA,KAAA,CAAA,cAAA,GAAA,CAAA,EAAA,CAAA,CAAA,CAAA;aACA;SACA,EAAA,CAAA;KACA,CAAA;;;;;;;;;QAIA,IAAA,CAAA,UAAA,CAAA,QAAA,EAAA,CAAA;KACA,CAAA;;;;;;;;;;;;KAKA,CAAA;;;;;;;;;;;;KAKA,CAAA;;;;;;;;;;;;QAKA,IAAA,CAAA,KAAA,CAAA,OAAA;;;;;;KAEA,CAAA;;;;;;;;;;;;;;KAKA,CAAA;;;;;;;;;;;;;;KAKA,CAAA;;;;;;;;;;;;KAKA,CAAA;;;;;;;;;;;;;;QAKA,IAAA,QAAA,GAAA,KAAA,GAAA,IAAA,CAAA,cAAA,CAAA;;YACU,OAAV,IAAqB,CAArB,gBAAA,EAAA,KAAA,KAAA,GAAA,MAAA,GAAA,UAAA,CAAA;SACA;aACA,IAAA,QAAA,GAAA,CAAA,EAAA;YACA,OAAA,IAAA,CAAA,gBAAA,EAAA,KAAA,KAAA,GAAA,UAAA,GAAA,MAAA,CAAA;SAAA;QACA,OAAA,SAAkB,CAAlB;KACA,CAAA;;;;;;;;;;;;;;;;;QAKmC,IAAnC,IAAA,GAAA,IAAA,CAAA,KAAA,CAAmC,OAAnC,EAAA,CAAsD,KAAtD,CAAA,CAAA;;QACA,IAAU,aAAV,GAAA,IAAA,CAAA,cAAA,CAAA,KAAA,CAAA,CAAA;;cACA,IAAA,CAAA,yBAAA,CAAA,IAAA,EAAA,aAAA,CAAA;cAEA,IAAA,CAAe,kBAAf,CAAA,IAAA,EAAA,aAAA,EAAA,KAAA,CAAA,CAAA;KACA,CAAA;;;;;;;;;;;;;;;YAIA,OAAA,UAAA,CAAA,KAAA,CAAA;SACA;aACA,IAAA,CAAA,IAAA,CAAA,SAAA,IAA8B,aAA9B,EAAA;YACA,OAAA,UAAA,CAAA,MAAA,CAAA;SAAA;aACA;YACA,OAAA,IAAA,CAAA,QAAA,GAAA,UAAA,CAAA,IAAA,GAAA,UAAA,CAAA,IAAA,CAAA;SAAA;KACA,CAAA;;;;;;;;;;;;;;;;;QAIA,IAAA,IAAA,CAAA,UAAA,IAAA,IAGI,CAHJ,QAAA,IAAA,CAAA,aAAA,EAAA;YAGA,OAAA,UAAA,CAAI,KAAJ,CAAA;SACA;aACA,IAAA,IAAA,CAAA,SAAA,IAA6B,CAAC,aAA9B,EAAA;YACA,OAAA,UAAA,CAAA,IAAA,CAAA;SAAA;aACA,IAAA,IAAA,CAAA,SAAA,IAA6B,aAA7B,EAAA;YACA,OAAA,KAAA,CAAA;SAAA;aACA,IAAA,IAAA,CAAA,QAAA,IAAA,aAAA,EAAA;YACA,OAAA,UAAA,CAAA,IAAA,CAAA;SAAA;aACA;YACA,OAAA,KAAA,CAAA;SAAA;KACA,CAAA;;;;;;;;;;;;;KAIA,CAAA;;;;;;;;;;;;KAKA,CAAA;;;;;;;;;;;;;QAIA,IAAA,UAAmD,GAAnD,IAAA,CAAA,KAAA,CAAA,OAAA,EAAA,CAAA;;YACU,aAAa,EAAvB,QAAiC;YACzB,uBAAR,EAAA,IAAA,CAAA,cAAA;YACM,YAAN,EAAA,UAAA,CAAA,QAAA,CAAA;YACM,sBAAN,EAAA,UAAA,CAAA,IAAA,CAAA,cAAA,CAAA;SACA,CAAA,CAAA;;;;;QAMI,IAAJ,CAAA,cAAA,EAAA,GAAA,IAAA,CAAA,WAAA,CAAA,aAAA,CAAA,QAAA,CAAA;YACA,IAAA,CAAA,WAAA,CAAA,qBAAA,CAAA,QAAA,CAAA,CAAA;QACI,IAAI,CAAC,cAAc,GAAG,QAA1B,CAAA;QACA,IAA4B,CAA5B,aAAA,EAA4C,CAAC;KAE7C,CAAA;;;;;;;;;;;QAIA,IAAA,WAAA,GAAA,cAAA,CAAA,KAAA,CAAA,CAAA;;QACA,IAAU,OAAV,GAAA,KAAA,CAAA,OAAA,CAAA;;QACA,IAAU,OAAO,GAAG,IAApB,CAAyB,WAAzB,CAAA;;aACA,OAAA,KAAA,KAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA;YAEQ,IAAR,CAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;YACQ,KAAR,CAAA,cAAA,EAA8B,CAA9B;SACA;aACA,IAAW,OAAX,KAAA,IAAA,EAA6B;YAC7B,OAAA,CAAA,kBAAA,EAAA,CAAA;YAAA,KAAe,CAAf,cAAA,EAAA,CAAiC;SACjC;aACA,IAAW,OAAX,KAAA,GAA0B,EAAE;YAC5B,OAAA,CAAA,iBAAA,EAAA,CAAA;YAAA,KAAe,CAAf,cAA8B,EAAE,CAAhC;SACA;aACA;YACA,OAAA,CAAA,SAAA,CAAA,KAAA,CAAA,CAAA;SAAA;KACA,CAAA;;;;;;;;;;;;;QAIA,IAAA,KAAA,GAAA,IAAA,CAAA,KAAA,CAAA,OAAA,EAAA,CAAA;;QACA,IAAU,IAAV,CAAe,OAAO,IAAtB,KAAA,IAAA,CAAoC,EAAE;YAEtC,OAAe,KAAf,CAAA,KAAA,CAAA,CAAA,EAA8B,KAA9B,CAAA,CAAA,IAAyC;;;;;;gBAGzC,IAAA,OAAA,GAAA,IAAA,CAAA,WAAA,CAAA;;gBACA,IAAc,YAAd,GAA6B,OAA7B;;oBACc,CAAd,IAAA,CAAA,SAA6B,CAA7B;gBACA,OAAA,YAAA,IAAA,CAAgC,IAAhC,CAAA,QAAA,CAAA;aACA,EAAA,CAAA;SACA;QACA,OAAQ,KAAR,CAAA;KACA,CAAA;;;;;;;;;;;KAKA,CAAA;;;;;;;;;;;;;;YAKA,OAAA,KAAA,CAAA;SACA;;QAEA,IAAA,cAAA,GAAA,IAAA,CAAA,WAAA,CAAA,aAAA,CAAA;;QAEA,IAAU,cAAc,GAAG,IAAI,CAAC,SAAhC,CAAA,aAAA,CAAA;;KACA,CAAA;IACA,UAAA,CAAW,UAAX,GAAA;QACA,EAAA,IAAA,EAAA,SAAA,EAAA,IAAA,EAAA,CAAA;;oBAxRA,QAAA,EAAA,YAAA;iBACA,EAAA,EAAA;KACA,CAAA;;;;;QAhOA,EAAA,IAAA,EAAmB,UAAnB,EAAA;QAMA,EAAA,IAAA,EAAE,SAAF,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,CAAA,QAAA,EAAA,EAAA,CAAA,EAAA;KAMA,CAAA,EAAA,CAAA;IA2SA,UAAA,CAAA,cAAA,GAAA;;;QAnEA,MAAA,EAAA,CAAA,EAAA,IAAA,EAAG,KAAH,EAAA,CAAA;QAYA,aAAA,EAAA,CAAA,EAAA,IAAG,EAAH,KAAA,EAAA,CAAA;QAGA,QAAA,EAAA,CAAA,EAAA,IAAG,EAAH,KAAA,EAAA,CAAA;QAMA,eAAA,EAAA,CAAA,EAAA,IAAG,EAAH,MAAA,EAAA,CAAA;KAuBA,CAAA;IAUA,OAAA,UAAA,CAAA;;;;;;;;;;ADtSA,AAAA,IAAA,cAAA,kBAAA,YAAA;IAUE,SAAF,cAAA,CAAqB,QAAoB,EAAzC;QAAqB,IAArB,CAAA,QAA6B,GAAR,QAAQ,CAAY;;;;QAF9B,IAAX,CAAA,IAAe,GAAW,QAAQ,CAAC;KAEU;;;;;;;;;;;;;;IAQ3C,cAAF,CAAA,SAAA,CAAA,YAAc;;;;;;;;;IADZ,YAAF;QAEI,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;KACtB,CAAH;;QApBA,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW;oBACT,QAAQ,EAAE,wBAAwB;oBAClC,IAAI,EAAE;wBACJ,QAAQ,EAAE,MAAM;qBACjB;iBACF,EAAD,EAAA;;;;QARA,EAAA,IAAA,EAAQ,UAAU,EAAlB;;;QAWA,IAAA,EAAA,CAAA,EAAA,IAAA,EAAG,KAAK,EAAR,CAAA;QASA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAG,YAAY,EAAf,IAAA,EAAA,CAAgB,OAAO,EAAvB,EAAA,CAAA;;IAIA,OAAA,cAAC,CAAD;CAAC,EAAD,CAAA,CAAC;AAfD;;;AAkBA,AAAA,IAAA,kBAAA,kBAAA,YAAA;IAUE,SAAF,kBAAA,CAAqB,QAAoB,EAAzC;QAAqB,IAArB,CAAA,QAA6B,GAAR,QAAQ,CAAY;;;;QAF9B,IAAX,CAAA,IAAe,GAAW,QAAQ,CAAC;KAEU;;;;;;;;;;;;;;IAQ3C,kBAAF,CAAA,SAAA,CAAA,YAAc;;;;;;;;;IADZ,YAAF;QAEI,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;KAC1B,CAAH;;QApBA,EAAA,IAAA,EAAC,SAAS,EAAV,IAAA,EAAA,CAAW;oBACT,QAAQ,EAAE,4BAA4B;oBACtC,IAAI,EAAE;wBACJ,QAAQ,EAAE,MAAM;qBACjB;iBACF,EAAD,EAAA;;;;QAhCA,EAAA,IAAA,EAAQ,UAAU,EAAlB;;;QAmCA,IAAA,EAAA,CAAA,EAAA,IAAA,EAAG,KAAK,EAAR,CAAA;QASA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAG,YAAY,EAAf,IAAA,EAAA,CAAgB,OAAO,EAAvB,EAAA,CAAA;;IAIA,OAAA,kBAAC,CAAD;CAAC,EAAD,CAAA;;;;;;AD1CA,IAAA,gBAAA,kBAAA,YAAA;IAAA,SAAA,gBAAA,GAAA;KAmBgC;;QAnBhC,EAAA,IAAA,EAAC,QAAQ,EAAT,IAAA,EAAA,CAAU;oBACR,OAAO,EAAE,CAAC,UAAU,EAAE,YAAY,CAAC;oBACnC,OAAO,EAAE;wBACP,OAAO;wBACP,UAAU;wBACV,aAAa;wBACb,YAAY;wBACZ,cAAc;wBACd,kBAAkB;qBACnB;oBACD,YAAY,EAAE;wBACZ,OAAO;wBACP,UAAU;wBACV,aAAa;wBACb,YAAY;wBACZ,cAAc;wBACd,kBAAkB;qBACnB;iBACF,EAAD,EAAA;;IAC+B,OAA/B,gBAAgC,CAAhC;CAAgC,EAAhC,CAAA;;;;;;;;;;;;;;"}