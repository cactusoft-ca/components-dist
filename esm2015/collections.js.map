{"version":3,"file":"collections.js","sources":["../../../src/cdk/collections/unique-selection-dispatcher.ts","../../../src/cdk/collections/selection.ts","../../../src/cdk/collections/array-data-source.ts","../../../src/cdk/collections/data-source.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Injectable, OnDestroy} from '@angular/core';\r\n\r\n\r\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\r\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\r\n\r\n/**\r\n * Class to coordinate unique selection based on name.\r\n * Intended to be consumed as an Angular service.\r\n * This service is needed because native radio change events are only fired on the item currently\r\n * being selected, and we still need to uncheck the previous selection.\r\n *\r\n * This service does not *store* any IDs and names because they may change at any time, so it is\r\n * less error-prone if they are simply passed through when the events occur.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class UniqueSelectionDispatcher implements OnDestroy {\r\n  private _listeners: UniqueSelectionDispatcherListener[] = [];\r\n\r\n  /**\r\n   * Notify other items that selection for the given name has been set.\r\n   * @param id ID of the item.\r\n   * @param name Name of the item.\r\n   */\r\n  notify(id: string, name: string) {\r\n    for (let listener of this._listeners) {\r\n      listener(id, name);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Listen for future changes to item selection.\r\n   * @return Function used to deregister listener\r\n   */\r\n  listen(listener: UniqueSelectionDispatcherListener): () => void {\r\n    this._listeners.push(listener);\r\n    return () => {\r\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\r\n        return listener !== registered;\r\n      });\r\n    };\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._listeners = [];\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Subject} from 'rxjs';\r\n\r\n/**\r\n * Class to be used to power selecting one or more options from a list.\r\n */\r\nexport class SelectionModel<T> {\r\n  /** Currently-selected values. */\r\n  private _selection = new Set<T>();\r\n\r\n  /** Keeps track of the deselected options that haven't been emitted by the change event. */\r\n  private _deselectedToEmit: T[] = [];\r\n\r\n  /** Keeps track of the selected options that haven't been emitted by the change event. */\r\n  private _selectedToEmit: T[] = [];\r\n\r\n  /** Cache for the array value of the selected items. */\r\n  private _selected: T[] | null;\r\n\r\n  /** Selected values. */\r\n  get selected(): T[] {\r\n    if (!this._selected) {\r\n      this._selected = Array.from(this._selection.values());\r\n    }\r\n\r\n    return this._selected;\r\n  }\r\n\r\n  /** Event emitted when the value has changed. */\r\n  changed: Subject<SelectionChange<T>> = new Subject();\r\n\r\n  /**\r\n   * Event emitted when the value has changed.\r\n   * @deprecated Use `changed` instead.\r\n   * @breaking-change 8.0.0 To be changed to `changed`\r\n   */\r\n  onChange: Subject<SelectionChange<T>> = this.changed;\r\n\r\n  constructor(\r\n    private _multiple = false,\r\n    initiallySelectedValues?: T[],\r\n    private _emitChanges = true) {\r\n\r\n    if (initiallySelectedValues && initiallySelectedValues.length) {\r\n      if (_multiple) {\r\n        initiallySelectedValues.forEach(value => this._markSelected(value));\r\n      } else {\r\n        this._markSelected(initiallySelectedValues[0]);\r\n      }\r\n\r\n      // Clear the array in order to avoid firing the change event for preselected values.\r\n      this._selectedToEmit.length = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects a value or an array of values.\r\n   */\r\n  select(...values: T[]): void {\r\n    this._verifyValueAssignment(values);\r\n    values.forEach(value => this._markSelected(value));\r\n    this._emitChangeEvent();\r\n  }\r\n\r\n  /**\r\n   * Deselects a value or an array of values.\r\n   */\r\n  deselect(...values: T[]): void {\r\n    this._verifyValueAssignment(values);\r\n    values.forEach(value => this._unmarkSelected(value));\r\n    this._emitChangeEvent();\r\n  }\r\n\r\n  /**\r\n   * Toggles a value between selected and deselected.\r\n   */\r\n  toggle(value: T): void {\r\n    this.isSelected(value) ? this.deselect(value) : this.select(value);\r\n  }\r\n\r\n  /**\r\n   * Clears all of the selected values.\r\n   */\r\n  clear(): void {\r\n    this._unmarkAll();\r\n    this._emitChangeEvent();\r\n  }\r\n\r\n  /**\r\n   * Determines whether a value is selected.\r\n   */\r\n  isSelected(value: T): boolean {\r\n    return this._selection.has(value);\r\n  }\r\n\r\n  /**\r\n   * Determines whether the model does not have a value.\r\n   */\r\n  isEmpty(): boolean {\r\n    return this._selection.size === 0;\r\n  }\r\n\r\n  /**\r\n   * Determines whether the model has a value.\r\n   */\r\n  hasValue(): boolean {\r\n    return !this.isEmpty();\r\n  }\r\n\r\n  /**\r\n   * Sorts the selected values based on a predicate function.\r\n   */\r\n  sort(predicate?: (a: T, b: T) => number): void {\r\n    if (this._multiple && this.selected) {\r\n      this._selected!.sort(predicate);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets whether multiple values can be selected.\r\n   */\r\n  isMultipleSelection() {\r\n    return this._multiple;\r\n  }\r\n\r\n  /** Emits a change event and clears the records of selected and deselected values. */\r\n  private _emitChangeEvent() {\r\n    // Clear the selected values so they can be re-cached.\r\n    this._selected = null;\r\n\r\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\r\n      this.changed.next({\r\n        source: this,\r\n        added: this._selectedToEmit,\r\n        removed: this._deselectedToEmit\r\n      });\r\n\r\n      this._deselectedToEmit = [];\r\n      this._selectedToEmit = [];\r\n    }\r\n  }\r\n\r\n  /** Selects a value. */\r\n  private _markSelected(value: T) {\r\n    if (!this.isSelected(value)) {\r\n      if (!this._multiple) {\r\n        this._unmarkAll();\r\n      }\r\n\r\n      this._selection.add(value);\r\n\r\n      if (this._emitChanges) {\r\n        this._selectedToEmit.push(value);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Deselects a value. */\r\n  private _unmarkSelected(value: T) {\r\n    if (this.isSelected(value)) {\r\n      this._selection.delete(value);\r\n\r\n      if (this._emitChanges) {\r\n        this._deselectedToEmit.push(value);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Clears out the selected values. */\r\n  private _unmarkAll() {\r\n    if (!this.isEmpty()) {\r\n      this._selection.forEach(value => this._unmarkSelected(value));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifies the value assignment and throws an error if the specified value array is\r\n   * including multiple values while the selection model is not supporting multiple values.\r\n   */\r\n  private _verifyValueAssignment(values: T[]) {\r\n    if (values.length > 1 && !this._multiple) {\r\n      throw getMultipleValuesInSingleSelectionError();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Event emitted when the value of a MatSelectionModel has changed.\r\n * @docs-private\r\n */\r\nexport interface SelectionChange<T> {\r\n  /** Model that dispatched the event. */\r\n  source: SelectionModel<T>;\r\n  /** Options that were added to the model. */\r\n  added: T[];\r\n  /** Options that were removed from the model. */\r\n  removed: T[];\r\n}\r\n\r\n/**\r\n * Returns an error that reports that multiple values are passed into a selection model\r\n * with a single value.\r\n * @docs-private\r\n */\r\nexport function getMultipleValuesInSingleSelectionError() {\r\n  return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Observable, of as observableOf} from 'rxjs';\r\nimport {DataSource} from './data-source';\r\n\r\n\r\n/** DataSource wrapper for a native array. */\r\nexport class ArrayDataSource<T> extends DataSource<T> {\r\n  constructor(private _data: T[] | ReadonlyArray<T> | Observable<T[] | ReadonlyArray<T>>) {\r\n    super();\r\n  }\r\n\r\n  connect(): Observable<T[] | ReadonlyArray<T>> {\r\n    return this._data instanceof Observable ? this._data : observableOf(this._data);\r\n  }\r\n\r\n  disconnect() {}\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Observable} from 'rxjs';\r\nimport {CollectionViewer} from './collection-viewer';\r\n\r\nexport abstract class DataSource<T> {\r\n  /**\r\n   * Connects a collection viewer (such as a data-table) to this data source. Note that\r\n   * the stream provided will be accessed during change detection and should not directly change\r\n   * values that are bound in template views.\r\n   * @param collectionViewer The component that exposes a view over the data provided by this\r\n   *     data source.\r\n   * @returns Observable that emits a new value when the data changes.\r\n   */\r\n  abstract connect(collectionViewer: CollectionViewer): Observable<T[] | ReadonlyArray<T>>;\r\n\r\n  /**\r\n   * Disconnects a collection viewer (such as a data-table) from this data source. Can be used\r\n   * to perform any clean-up or tear-down operations when a view is being destroyed.\r\n   *\r\n   * @param collectionViewer The component that exposes a view over the data provided by this\r\n   *     data source.\r\n   */\r\n  abstract disconnect(collectionViewer: CollectionViewer): void;\r\n}\r\n\r\n/** Checks whether an object is a data source. */\r\nexport function isDataSource(value: any): value is DataSource<any> {\r\n  // Check if the value is a DataSource by observing if it has a connect function. Cannot\r\n  // be checked as an `instanceof DataSource` since people could create their own sources\r\n  // that match the interface, but don't extend DataSource.\r\n  return value && typeof value.connect === 'function';\r\n}\r\n"],"names":["observableOf"],"mappings":"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"}