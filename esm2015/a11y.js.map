{"version":3,"file":"a11y.js","sources":["../../../src/cdk/a11y/a11y-module.ts","../../../src/cdk/a11y/fake-mousedown.ts","../../../src/cdk/a11y/focus-monitor/focus-monitor.ts","../../../src/cdk/a11y/live-announcer/live-announcer.ts","../../../src/cdk/a11y/live-announcer/live-announcer-tokens.ts","../../../src/cdk/a11y/focus-trap/focus-trap.ts","../../../src/cdk/a11y/interactivity-checker/interactivity-checker.ts","../../../src/cdk/a11y/key-manager/focus-key-manager.ts","../../../src/cdk/a11y/key-manager/activedescendant-key-manager.ts","../../../src/cdk/a11y/key-manager/list-key-manager.ts","../../../src/cdk/a11y/aria-describer/aria-describer.ts","../../../src/cdk/a11y/aria-describer/aria-reference.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ObserversModule} from '@angular/cdk/observers';\r\nimport {PlatformModule} from '@angular/cdk/platform';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {CdkMonitorFocus} from './focus-monitor/focus-monitor';\r\nimport {CdkTrapFocus} from './focus-trap/focus-trap';\r\nimport {CdkAriaLive} from './live-announcer/live-announcer';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, PlatformModule, ObserversModule],\r\n  declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\r\n  exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\r\n})\r\nexport class A11yModule {}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Screenreaders will often fire fake mousedown events when a focusable element\r\n * is activated using the keyboard. We can typically distinguish between these faked\r\n * mousedown events and real mousedown events using the \"buttons\" property. While\r\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\r\n * the left mouse button), faked mousedowns will usually set the property value to 0.\r\n */\r\nexport function isFakeMousedownFromScreenReader(event: MouseEvent): boolean {\r\n  return event.buttons === 0;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Injectable,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  SkipSelf,\r\n} from '@angular/core';\r\nimport {Observable, of as observableOf, Subject, Subscription} from 'rxjs';\r\nimport {coerceElement} from '@angular/cdk/coercion';\r\n\r\n\r\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\r\n// that a value of around 650ms seems appropriate.\r\nexport const TOUCH_BUFFER_MS = 650;\r\n\r\n\r\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program' | null;\r\n\r\n/**\r\n * Corresponds to the options that can be passed to the native `focus` event.\r\n * via https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus\r\n */\r\nexport interface FocusOptions {\r\n  /** Whether the browser should scroll to the element when it is focused. */\r\n  preventScroll?: boolean;\r\n}\r\n\r\ntype MonitoredElementInfo = {\r\n  unlisten: Function,\r\n  checkChildren: boolean,\r\n  subject: Subject<FocusOrigin>\r\n};\r\n\r\n/**\r\n * Event listener options that enable capturing and also\r\n * mark the listener as passive if the browser supports it.\r\n */\r\nconst captureEventListenerOptions = normalizePassiveListenerOptions({\r\n  passive: true,\r\n  capture: true\r\n});\r\n\r\n\r\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\r\n@Injectable({providedIn: 'root'})\r\nexport class FocusMonitor implements OnDestroy {\r\n  /** The focus origin that the next focus event is a result of. */\r\n  private _origin: FocusOrigin = null;\r\n\r\n  /** The FocusOrigin of the last focus event tracked by the FocusMonitor. */\r\n  private _lastFocusOrigin: FocusOrigin;\r\n\r\n  /** Whether the window has just been focused. */\r\n  private _windowFocused = false;\r\n\r\n  /** The target of the last touch event. */\r\n  private _lastTouchTarget: EventTarget | null;\r\n\r\n  /** The timeout id of the touch timeout, used to cancel timeout later. */\r\n  private _touchTimeoutId: number;\r\n\r\n  /** The timeout id of the window focus timeout. */\r\n  private _windowFocusTimeoutId: number;\r\n\r\n  /** The timeout id of the origin clearing timeout. */\r\n  private _originTimeoutId: number;\r\n\r\n  /** Map of elements being monitored to their info. */\r\n  private _elementInfo = new Map<HTMLElement, MonitoredElementInfo>();\r\n\r\n  /** The number of elements currently being monitored. */\r\n  private _monitoredElementCount = 0;\r\n\r\n  /**\r\n   * Event listener for `keydown` events on the document.\r\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\r\n   */\r\n  private _documentKeydownListener = () => {\r\n    // On keydown record the origin and clear any touch event that may be in progress.\r\n    this._lastTouchTarget = null;\r\n    this._setOriginForCurrentEventQueue('keyboard');\r\n  }\r\n\r\n  /**\r\n   * Event listener for `mousedown` events on the document.\r\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\r\n   */\r\n  private _documentMousedownListener = () => {\r\n    // On mousedown record the origin only if there is not touch\r\n    // target, since a mousedown can happen as a result of a touch event.\r\n    if (!this._lastTouchTarget) {\r\n      this._setOriginForCurrentEventQueue('mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event listener for `touchstart` events on the document.\r\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\r\n   */\r\n  private _documentTouchstartListener = (event: TouchEvent) => {\r\n    // When the touchstart event fires the focus event is not yet in the event queue. This means\r\n    // we can't rely on the trick used above (setting timeout of 1ms). Instead we wait 650ms to\r\n    // see if a focus happens.\r\n    if (this._touchTimeoutId != null) {\r\n      clearTimeout(this._touchTimeoutId);\r\n    }\r\n    this._lastTouchTarget = event.target;\r\n    this._touchTimeoutId = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\r\n  }\r\n\r\n  /**\r\n   * Event listener for `focus` events on the window.\r\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\r\n   */\r\n  private _windowFocusListener = () => {\r\n    // Make a note of when the window regains focus, so we can\r\n    // restore the origin info for the focused element.\r\n    this._windowFocused = true;\r\n    this._windowFocusTimeoutId = setTimeout(() => this._windowFocused = false);\r\n  }\r\n\r\n  constructor(private _ngZone: NgZone, private _platform: Platform) {}\r\n\r\n  /**\r\n   * Monitors focus on an element and applies appropriate CSS classes.\r\n   * @param element The element to monitor\r\n   * @param checkChildren Whether to count the element as focused when its children are focused.\r\n   * @returns An observable that emits when the focus state of the element changes.\r\n   *     When the element is blurred, null will be emitted.\r\n   */\r\n  monitor(element: HTMLElement, checkChildren?: boolean): Observable<FocusOrigin>;\r\n\r\n  /**\r\n   * Monitors focus on an element and applies appropriate CSS classes.\r\n   * @param element The element to monitor\r\n   * @param checkChildren Whether to count the element as focused when its children are focused.\r\n   * @returns An observable that emits when the focus state of the element changes.\r\n   *     When the element is blurred, null will be emitted.\r\n   */\r\n  monitor(element: ElementRef<HTMLElement>, checkChildren?: boolean): Observable<FocusOrigin>;\r\n\r\n  monitor(element: HTMLElement | ElementRef<HTMLElement>,\r\n          checkChildren: boolean = false): Observable<FocusOrigin> {\r\n    // Do nothing if we're not on the browser platform.\r\n    if (!this._platform.isBrowser) {\r\n      return observableOf(null);\r\n    }\r\n\r\n    const nativeElement = coerceElement(element);\r\n\r\n    // Check if we're already monitoring this element.\r\n    if (this._elementInfo.has(nativeElement)) {\r\n      let cachedInfo = this._elementInfo.get(nativeElement);\r\n      cachedInfo!.checkChildren = checkChildren;\r\n      return cachedInfo!.subject.asObservable();\r\n    }\r\n\r\n    // Create monitored element info.\r\n    let info: MonitoredElementInfo = {\r\n      unlisten: () => {},\r\n      checkChildren: checkChildren,\r\n      subject: new Subject<FocusOrigin>()\r\n    };\r\n    this._elementInfo.set(nativeElement, info);\r\n    this._incrementMonitoredElementCount();\r\n\r\n    // Start listening. We need to listen in capture phase since focus events don't bubble.\r\n    let focusListener = (event: FocusEvent) => this._onFocus(event, nativeElement);\r\n    let blurListener = (event: FocusEvent) => this._onBlur(event, nativeElement);\r\n    this._ngZone.runOutsideAngular(() => {\r\n      nativeElement.addEventListener('focus', focusListener, true);\r\n      nativeElement.addEventListener('blur', blurListener, true);\r\n    });\r\n\r\n    // Create an unlisten function for later.\r\n    info.unlisten = () => {\r\n      nativeElement.removeEventListener('focus', focusListener, true);\r\n      nativeElement.removeEventListener('blur', blurListener, true);\r\n    };\r\n\r\n    return info.subject.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Stops monitoring an element and removes all focus classes.\r\n   * @param element The element to stop monitoring.\r\n   */\r\n  stopMonitoring(element: HTMLElement): void;\r\n\r\n  /**\r\n   * Stops monitoring an element and removes all focus classes.\r\n   * @param element The element to stop monitoring.\r\n   */\r\n  stopMonitoring(element: ElementRef<HTMLElement>): void;\r\n\r\n  stopMonitoring(element: HTMLElement | ElementRef<HTMLElement>): void {\r\n    const nativeElement = coerceElement(element);\r\n    const elementInfo = this._elementInfo.get(nativeElement);\r\n\r\n    if (elementInfo) {\r\n      elementInfo.unlisten();\r\n      elementInfo.subject.complete();\r\n\r\n      this._setClasses(nativeElement);\r\n      this._elementInfo.delete(nativeElement);\r\n      this._decrementMonitoredElementCount();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focuses the element via the specified focus origin.\r\n   * @param element Element to focus.\r\n   * @param origin Focus origin.\r\n   * @param options Options that can be used to configure the focus behavior.\r\n   */\r\n  focusVia(element: HTMLElement, origin: FocusOrigin, options?: FocusOptions): void;\r\n\r\n  /**\r\n   * Focuses the element via the specified focus origin.\r\n   * @param element Element to focus.\r\n   * @param origin Focus origin.\r\n   * @param options Options that can be used to configure the focus behavior.\r\n   */\r\n  focusVia(element: ElementRef<HTMLElement>, origin: FocusOrigin, options?: FocusOptions): void;\r\n\r\n  focusVia(element: HTMLElement | ElementRef<HTMLElement>,\r\n          origin: FocusOrigin,\r\n          options?: FocusOptions): void {\r\n\r\n    const nativeElement = coerceElement(element);\r\n\r\n    this._setOriginForCurrentEventQueue(origin);\r\n\r\n    // `focus` isn't available on the server\r\n    if (typeof nativeElement.focus === 'function') {\r\n      // Cast the element to `any`, because the TS typings don't have the `options` parameter yet.\r\n      (nativeElement as any).focus(options);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\r\n  }\r\n\r\n  private _toggleClass(element: Element, className: string, shouldSet: boolean) {\r\n    if (shouldSet) {\r\n      element.classList.add(className);\r\n    } else {\r\n      element.classList.remove(className);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the focus classes on the element based on the given focus origin.\r\n   * @param element The element to update the classes on.\r\n   * @param origin The focus origin.\r\n   */\r\n  private _setClasses(element: HTMLElement, origin?: FocusOrigin): void {\r\n    const elementInfo = this._elementInfo.get(element);\r\n\r\n    if (elementInfo) {\r\n      this._toggleClass(element, 'cdk-focused', !!origin);\r\n      this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\r\n      this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\r\n      this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\r\n      this._toggleClass(element, 'cdk-program-focused', origin === 'program');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the origin and schedules an async function to clear it at the end of the event queue.\r\n   * @param origin The origin to set.\r\n   */\r\n  private _setOriginForCurrentEventQueue(origin: FocusOrigin): void {\r\n    this._ngZone.runOutsideAngular(() => {\r\n      this._origin = origin;\r\n      // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*\r\n      // tick after the interaction event fired. To ensure the focus origin is always correct,\r\n      // the focus origin will be determined at the beginning of the next tick.\r\n      this._originTimeoutId = setTimeout(() => this._origin = null, 1);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Checks whether the given focus event was caused by a touchstart event.\r\n   * @param event The focus event to check.\r\n   * @returns Whether the event was caused by a touch.\r\n   */\r\n  private _wasCausedByTouch(event: FocusEvent): boolean {\r\n    // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\r\n    // Consider the following dom structure:\r\n    //\r\n    // <div #parent tabindex=\"0\" cdkFocusClasses>\r\n    //   <div #child (click)=\"#parent.focus()\"></div>\r\n    // </div>\r\n    //\r\n    // If the user touches the #child element and the #parent is programmatically focused as a\r\n    // result, this code will still consider it to have been caused by the touch event and will\r\n    // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\r\n    // relatively small edge-case that can be worked around by using\r\n    // focusVia(parentEl, 'program') to focus the parent element.\r\n    //\r\n    // If we decide that we absolutely must handle this case correctly, we can do so by listening\r\n    // for the first focus event after the touchstart, and then the first blur event after that\r\n    // focus event. When that blur event fires we know that whatever follows is not a result of the\r\n    // touchstart.\r\n    let focusTarget = event.target;\r\n    return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\r\n        (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\r\n  }\r\n\r\n  /**\r\n   * Handles focus events on a registered element.\r\n   * @param event The focus event.\r\n   * @param element The monitored element.\r\n   */\r\n  private _onFocus(event: FocusEvent, element: HTMLElement) {\r\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\r\n    // focus event affecting the monitored element. If we want to use the origin of the first event\r\n    // instead we should check for the cdk-focused class here and return if the element already has\r\n    // it. (This only matters for elements that have includesChildren = true).\r\n\r\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\r\n    // monitored element itself.\r\n    const elementInfo = this._elementInfo.get(element);\r\n    if (!elementInfo || (!elementInfo.checkChildren && element !== event.target)) {\r\n      return;\r\n    }\r\n\r\n    // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\r\n    // 1) The window has just regained focus, in which case we want to restore the focused state of\r\n    //    the element from before the window blurred.\r\n    // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\r\n    // 3) The element was programmatically focused, in which case we should mark the origin as\r\n    //    'program'.\r\n    let origin = this._origin;\r\n    if (!origin) {\r\n      if (this._windowFocused && this._lastFocusOrigin) {\r\n        origin = this._lastFocusOrigin;\r\n      } else if (this._wasCausedByTouch(event)) {\r\n        origin = 'touch';\r\n      } else {\r\n        origin = 'program';\r\n      }\r\n    }\r\n\r\n    this._setClasses(element, origin);\r\n    this._emitOrigin(elementInfo.subject, origin);\r\n    this._lastFocusOrigin = origin;\r\n  }\r\n\r\n  /**\r\n   * Handles blur events on a registered element.\r\n   * @param event The blur event.\r\n   * @param element The monitored element.\r\n   */\r\n  _onBlur(event: FocusEvent, element: HTMLElement) {\r\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\r\n    // order to focus another child of the monitored element.\r\n    const elementInfo = this._elementInfo.get(element);\r\n\r\n    if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\r\n        element.contains(event.relatedTarget))) {\r\n      return;\r\n    }\r\n\r\n    this._setClasses(element);\r\n    this._emitOrigin(elementInfo.subject, null);\r\n  }\r\n\r\n  private _emitOrigin(subject: Subject<FocusOrigin>, origin: FocusOrigin) {\r\n    this._ngZone.run(() => subject.next(origin));\r\n  }\r\n\r\n  private _incrementMonitoredElementCount() {\r\n    // Register global listeners when first element is monitored.\r\n    if (++this._monitoredElementCount == 1 && this._platform.isBrowser) {\r\n      // Note: we listen to events in the capture phase so we\r\n      // can detect them even if the user stops propagation.\r\n      this._ngZone.runOutsideAngular(() => {\r\n        document.addEventListener('keydown', this._documentKeydownListener,\r\n          captureEventListenerOptions);\r\n        document.addEventListener('mousedown', this._documentMousedownListener,\r\n          captureEventListenerOptions);\r\n        document.addEventListener('touchstart', this._documentTouchstartListener,\r\n          captureEventListenerOptions);\r\n        window.addEventListener('focus', this._windowFocusListener);\r\n      });\r\n    }\r\n  }\r\n\r\n  private _decrementMonitoredElementCount() {\r\n    // Unregister global listeners when last element is unmonitored.\r\n    if (!--this._monitoredElementCount) {\r\n      document.removeEventListener('keydown', this._documentKeydownListener,\r\n        captureEventListenerOptions);\r\n      document.removeEventListener('mousedown', this._documentMousedownListener,\r\n        captureEventListenerOptions);\r\n      document.removeEventListener('touchstart', this._documentTouchstartListener,\r\n        captureEventListenerOptions);\r\n      window.removeEventListener('focus', this._windowFocusListener);\r\n\r\n      // Clear timeouts for all potentially pending timeouts to prevent the leaks.\r\n      clearTimeout(this._windowFocusTimeoutId);\r\n      clearTimeout(this._touchTimeoutId);\r\n      clearTimeout(this._originTimeoutId);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\r\n * programmatically) and adds corresponding classes to the element.\r\n *\r\n * There are two variants of this directive:\r\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\r\n *    focused.\r\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\r\n */\r\n@Directive({\r\n  selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\r\n})\r\nexport class CdkMonitorFocus implements OnDestroy {\r\n  private _monitorSubscription: Subscription;\r\n  @Output() cdkFocusChange = new EventEmitter<FocusOrigin>();\r\n\r\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _focusMonitor: FocusMonitor) {\r\n    this._monitorSubscription = this._focusMonitor.monitor(\r\n        this._elementRef,\r\n        this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\r\n        .subscribe(origin => this.cdkFocusChange.emit(origin));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._focusMonitor.stopMonitoring(this._elementRef);\r\n    this._monitorSubscription.unsubscribe();\r\n  }\r\n}\r\n\r\n/** @docs-private @deprecated @breaking-change 8.0.0 */\r\nexport function FOCUS_MONITOR_PROVIDER_FACTORY(\r\n    parentDispatcher: FocusMonitor, ngZone: NgZone, platform: Platform) {\r\n  return parentDispatcher || new FocusMonitor(ngZone, platform);\r\n}\r\n\r\n/** @docs-private @deprecated @breaking-change 8.0.0 */\r\nexport const FOCUS_MONITOR_PROVIDER = {\r\n  // If there is already a FocusMonitor available, use that. Otherwise, provide a new one.\r\n  provide: FocusMonitor,\r\n  deps: [[new Optional(), new SkipSelf(), FocusMonitor], NgZone, Platform],\r\n  useFactory: FOCUS_MONITOR_PROVIDER_FACTORY\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ContentObserver} from '@angular/cdk/observers';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  Inject,\r\n  Injectable,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Provider,\r\n  SkipSelf,\r\n} from '@angular/core';\r\nimport {Subscription} from 'rxjs';\r\nimport {\r\n  AriaLivePoliteness,\r\n  LiveAnnouncerDefaultOptions,\r\n  LIVE_ANNOUNCER_ELEMENT_TOKEN,\r\n  LIVE_ANNOUNCER_DEFAULT_OPTIONS,\r\n} from './live-announcer-tokens';\r\n\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class LiveAnnouncer implements OnDestroy {\r\n  private _liveElement: HTMLElement;\r\n  private _document: Document;\r\n  private _previousTimeout?: number;\r\n\r\n  constructor(\r\n      @Optional() @Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN) elementToken: any,\r\n      private _ngZone: NgZone,\r\n      @Inject(DOCUMENT) _document: any,\r\n      @Optional() @Inject(LIVE_ANNOUNCER_DEFAULT_OPTIONS)\r\n      private _defaultOptions?: LiveAnnouncerDefaultOptions) {\r\n\r\n    // We inject the live element and document as `any` because the constructor signature cannot\r\n    // reference browser globals (HTMLElement, Document) on non-browser environments, since having\r\n    // a class decorator causes TypeScript to preserve the constructor signature types.\r\n    this._document = _document;\r\n    this._liveElement = elementToken || this._createLiveElement();\r\n  }\r\n\r\n  /**\r\n   * Announces a message to screenreaders.\r\n   * @param message Message to be announced to the screenreader.\r\n   * @returns Promise that will be resolved when the message is added to the DOM.\r\n   */\r\n  announce(message: string): Promise<void>;\r\n\r\n  /**\r\n   * Announces a message to screenreaders.\r\n   * @param message Message to be announced to the screenreader.\r\n   * @param politeness The politeness of the announcer element.\r\n   * @returns Promise that will be resolved when the message is added to the DOM.\r\n   */\r\n  announce(message: string, politeness?: AriaLivePoliteness): Promise<void>;\r\n\r\n  /**\r\n   * Announces a message to screenreaders.\r\n   * @param message Message to be announced to the screenreader.\r\n   * @param duration Time in milliseconds after which to clear out the announcer element. Note\r\n   *   that this takes effect after the message has been added to the DOM, which can be up to\r\n   *   100ms after `announce` has been called.\r\n   * @returns Promise that will be resolved when the message is added to the DOM.\r\n   */\r\n  announce(message: string, duration?: number): Promise<void>;\r\n\r\n  /**\r\n   * Announces a message to screenreaders.\r\n   * @param message Message to be announced to the screenreader.\r\n   * @param politeness The politeness of the announcer element.\r\n   * @param duration Time in milliseconds after which to clear out the announcer element. Note\r\n   *   that this takes effect after the message has been added to the DOM, which can be up to\r\n   *   100ms after `announce` has been called.\r\n   * @returns Promise that will be resolved when the message is added to the DOM.\r\n   */\r\n  announce(message: string, politeness?: AriaLivePoliteness, duration?: number): Promise<void>;\r\n\r\n  announce(message: string, ...args: any[]): Promise<void> {\r\n    const defaultOptions = this._defaultOptions;\r\n    let politeness: AriaLivePoliteness | undefined;\r\n    let duration: number | undefined;\r\n\r\n    if (args.length === 1 && typeof args[0] === 'number') {\r\n      duration = args[0];\r\n    } else {\r\n      [politeness, duration] = args;\r\n    }\r\n\r\n    this.clear();\r\n    clearTimeout(this._previousTimeout);\r\n\r\n    if (!politeness) {\r\n      politeness =\r\n          (defaultOptions && defaultOptions.politeness) ? defaultOptions.politeness : 'polite';\r\n    }\r\n\r\n    if (duration == null && defaultOptions) {\r\n      duration = defaultOptions.duration;\r\n    }\r\n\r\n    // TODO: ensure changing the politeness works on all environments we support.\r\n    this._liveElement.setAttribute('aria-live', politeness);\r\n\r\n    // This 100ms timeout is necessary for some browser + screen-reader combinations:\r\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\r\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\r\n    //   second time without clearing and then using a non-zero delay.\r\n    // (using JAWS 17 at time of this writing).\r\n    return this._ngZone.runOutsideAngular(() => {\r\n      return new Promise(resolve => {\r\n        clearTimeout(this._previousTimeout);\r\n        this._previousTimeout = setTimeout(() => {\r\n          this._liveElement.textContent = message;\r\n          resolve();\r\n\r\n          if (typeof duration === 'number') {\r\n            this._previousTimeout = setTimeout(() => this.clear(), duration);\r\n          }\r\n        }, 100);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clears the current text from the announcer element. Can be used to prevent\r\n   * screen readers from reading the text out again while the user is going\r\n   * through the page landmarks.\r\n   */\r\n  clear() {\r\n    if (this._liveElement) {\r\n      this._liveElement.textContent = '';\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    clearTimeout(this._previousTimeout);\r\n\r\n    if (this._liveElement && this._liveElement.parentNode) {\r\n      this._liveElement.parentNode.removeChild(this._liveElement);\r\n      this._liveElement = null!;\r\n    }\r\n  }\r\n\r\n  private _createLiveElement(): HTMLElement {\r\n    const elementClass = 'cdk-live-announcer-element';\r\n    const previousElements = this._document.getElementsByClassName(elementClass);\r\n    const liveEl = this._document.createElement('div');\r\n\r\n    // Remove any old containers. This can happen when coming in from a server-side-rendered page.\r\n    for (let i = 0; i < previousElements.length; i++) {\r\n      previousElements[i].parentNode!.removeChild(previousElements[i]);\r\n    }\r\n\r\n    liveEl.classList.add(elementClass);\r\n    liveEl.classList.add('cdk-visually-hidden');\r\n\r\n    liveEl.setAttribute('aria-atomic', 'true');\r\n    liveEl.setAttribute('aria-live', 'polite');\r\n\r\n    this._document.body.appendChild(liveEl);\r\n\r\n    return liveEl;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\r\n * with a wider range of browsers and screen readers.\r\n */\r\n@Directive({\r\n  selector: '[cdkAriaLive]',\r\n  exportAs: 'cdkAriaLive',\r\n})\r\nexport class CdkAriaLive implements OnDestroy {\r\n  /** The aria-live politeness level to use when announcing messages. */\r\n  @Input('cdkAriaLive')\r\n  get politeness(): AriaLivePoliteness { return this._politeness; }\r\n  set politeness(value: AriaLivePoliteness) {\r\n    this._politeness = value === 'polite' || value === 'assertive' ? value : 'off';\r\n    if (this._politeness === 'off') {\r\n      if (this._subscription) {\r\n        this._subscription.unsubscribe();\r\n        this._subscription = null;\r\n      }\r\n    } else if (!this._subscription) {\r\n      this._subscription = this._ngZone.runOutsideAngular(() => {\r\n        return this._contentObserver\r\n          .observe(this._elementRef)\r\n          .subscribe(() => {\r\n            // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\r\n            const elementText = this._elementRef.nativeElement.textContent;\r\n\r\n            // The `MutationObserver` fires also for attribute\r\n            // changes which we don't want to announce.\r\n            if (elementText !== this._previousAnnouncedText) {\r\n              this._liveAnnouncer.announce(elementText, this._politeness);\r\n              this._previousAnnouncedText = elementText;\r\n            }\r\n          });\r\n      });\r\n    }\r\n  }\r\n  private _politeness: AriaLivePoliteness = 'off';\r\n\r\n  private _previousAnnouncedText?: string;\r\n  private _subscription: Subscription | null;\r\n\r\n  constructor(private _elementRef: ElementRef, private _liveAnnouncer: LiveAnnouncer,\r\n              private _contentObserver: ContentObserver, private _ngZone: NgZone) {}\r\n\r\n  ngOnDestroy() {\r\n    if (this._subscription) {\r\n      this._subscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/** @docs-private @deprecated @breaking-change 8.0.0 */\r\nexport function LIVE_ANNOUNCER_PROVIDER_FACTORY(\r\n    parentAnnouncer: LiveAnnouncer, liveElement: any, _document: any, ngZone: NgZone) {\r\n  return parentAnnouncer || new LiveAnnouncer(liveElement, ngZone, _document);\r\n}\r\n\r\n\r\n/** @docs-private @deprecated @breaking-change 8.0.0 */\r\nexport const LIVE_ANNOUNCER_PROVIDER: Provider = {\r\n  // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.\r\n  provide: LiveAnnouncer,\r\n  deps: [\r\n    [new Optional(), new SkipSelf(), LiveAnnouncer],\r\n    [new Optional(), new Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)],\r\n    DOCUMENT,\r\n    NgZone,\r\n  ],\r\n  useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {InjectionToken} from '@angular/core';\r\n\r\n// The tokens for the live announcer are defined in a separate file from LiveAnnouncer\r\n// as a workaround for https://github.com/angular/angular/issues/22559\r\n\r\n/** Possible politeness levels. */\r\nexport type AriaLivePoliteness = 'off' | 'polite' | 'assertive';\r\n\r\nexport const LIVE_ANNOUNCER_ELEMENT_TOKEN =\r\n    new InjectionToken<HTMLElement | null>('liveAnnouncerElement', {\r\n      providedIn: 'root',\r\n      factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,\r\n    });\r\n\r\n/** @docs-private */\r\nexport function LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY(): null {\r\n  return null;\r\n}\r\n\r\n/** Object that can be used to configure the default options for the LiveAnnouncer. */\r\nexport interface LiveAnnouncerDefaultOptions {\r\n  /** Default politeness for the announcements. */\r\n  politeness?: AriaLivePoliteness;\r\n\r\n  /** Default duration for the announcement messages. */\r\n  duration?: number;\r\n}\r\n\r\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\r\nexport const LIVE_ANNOUNCER_DEFAULT_OPTIONS =\r\n    new InjectionToken<LiveAnnouncerDefaultOptions>('LIVE_ANNOUNCER_DEFAULT_OPTIONS');\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  AfterContentInit,\r\n  Directive,\r\n  ElementRef,\r\n  Inject,\r\n  Injectable,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  DoCheck,\r\n  isDevMode,\r\n} from '@angular/core';\r\nimport {take} from 'rxjs/operators';\r\nimport {InteractivityChecker} from '../interactivity-checker/interactivity-checker';\r\n\r\n\r\n/**\r\n * Class that allows for trapping focus within a DOM element.\r\n *\r\n * This class currently uses a relatively simple approach to focus trapping.\r\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\r\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause to two to misalign.\r\n */\r\nexport class FocusTrap {\r\n  private _startAnchor: HTMLElement | null;\r\n  private _endAnchor: HTMLElement | null;\r\n  private _hasAttached = false;\r\n\r\n  // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\r\n  protected startAnchorListener = () => this.focusLastTabbableElement();\r\n  protected endAnchorListener = () => this.focusFirstTabbableElement();\r\n\r\n  /** Whether the focus trap is active. */\r\n  get enabled(): boolean { return this._enabled; }\r\n  set enabled(value: boolean) {\r\n    this._enabled = value;\r\n\r\n    if (this._startAnchor && this._endAnchor) {\r\n      this._toggleAnchorTabIndex(value, this._startAnchor);\r\n      this._toggleAnchorTabIndex(value, this._endAnchor);\r\n    }\r\n  }\r\n  private _enabled: boolean = true;\r\n\r\n  constructor(\r\n    private _element: HTMLElement,\r\n    private _checker: InteractivityChecker,\r\n    private _ngZone: NgZone,\r\n    private _document: Document,\r\n    deferAnchors = false) {\r\n\r\n    if (!deferAnchors) {\r\n      this.attachAnchors();\r\n    }\r\n  }\r\n\r\n  /** Destroys the focus trap by cleaning up the anchors. */\r\n  destroy() {\r\n    const startAnchor = this._startAnchor;\r\n    const endAnchor = this._endAnchor;\r\n\r\n    if (startAnchor) {\r\n      startAnchor.removeEventListener('focus', this.startAnchorListener);\r\n\r\n      if (startAnchor.parentNode) {\r\n        startAnchor.parentNode.removeChild(startAnchor);\r\n      }\r\n    }\r\n\r\n    if (endAnchor) {\r\n      endAnchor.removeEventListener('focus', this.endAnchorListener);\r\n\r\n      if (endAnchor.parentNode) {\r\n        endAnchor.parentNode.removeChild(endAnchor);\r\n      }\r\n    }\r\n\r\n    this._startAnchor = this._endAnchor = null;\r\n  }\r\n\r\n  /**\r\n   * Inserts the anchors into the DOM. This is usually done automatically\r\n   * in the constructor, but can be deferred for cases like directives with `*ngIf`.\r\n   * @returns Whether the focus trap managed to attach successfuly. This may not be the case\r\n   * if the target element isn't currently in the DOM.\r\n   */\r\n  attachAnchors(): boolean {\r\n    // If we're not on the browser, there can be no focus to trap.\r\n    if (this._hasAttached) {\r\n      return true;\r\n    }\r\n\r\n    this._ngZone.runOutsideAngular(() => {\r\n      if (!this._startAnchor) {\r\n        this._startAnchor = this._createAnchor();\r\n        this._startAnchor!.addEventListener('focus', this.startAnchorListener);\r\n      }\r\n\r\n      if (!this._endAnchor) {\r\n        this._endAnchor = this._createAnchor();\r\n        this._endAnchor!.addEventListener('focus', this.endAnchorListener);\r\n      }\r\n    });\r\n\r\n    if (this._element.parentNode) {\r\n      this._element.parentNode.insertBefore(this._startAnchor!, this._element);\r\n      this._element.parentNode.insertBefore(this._endAnchor!, this._element.nextSibling);\r\n      this._hasAttached = true;\r\n    }\r\n\r\n    return this._hasAttached;\r\n  }\r\n\r\n  /**\r\n   * Waits for the zone to stabilize, then either focuses the first element that the\r\n   * user specified, or the first tabbable element.\r\n   * @returns Returns a promise that resolves with a boolean, depending\r\n   * on whether focus was moved successfuly.\r\n   */\r\n  focusInitialElementWhenReady(): Promise<boolean> {\r\n    return new Promise<boolean>(resolve => {\r\n      this._executeOnStable(() => resolve(this.focusInitialElement()));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Waits for the zone to stabilize, then focuses\r\n   * the first tabbable element within the focus trap region.\r\n   * @returns Returns a promise that resolves with a boolean, depending\r\n   * on whether focus was moved successfuly.\r\n   */\r\n  focusFirstTabbableElementWhenReady(): Promise<boolean> {\r\n    return new Promise<boolean>(resolve => {\r\n      this._executeOnStable(() => resolve(this.focusFirstTabbableElement()));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Waits for the zone to stabilize, then focuses\r\n   * the last tabbable element within the focus trap region.\r\n   * @returns Returns a promise that resolves with a boolean, depending\r\n   * on whether focus was moved successfuly.\r\n   */\r\n  focusLastTabbableElementWhenReady(): Promise<boolean> {\r\n    return new Promise<boolean>(resolve => {\r\n      this._executeOnStable(() => resolve(this.focusLastTabbableElement()));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the specified boundary element of the trapped region.\r\n   * @param bound The boundary to get (start or end of trapped region).\r\n   * @returns The boundary element.\r\n   */\r\n  private _getRegionBoundary(bound: 'start' | 'end'): HTMLElement | null {\r\n    // Contains the deprecated version of selector, for temporary backwards comparability.\r\n    let markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` +\r\n                                                 `[cdkFocusRegion${bound}], ` +\r\n                                                 `[cdk-focus-${bound}]`) as NodeListOf<HTMLElement>;\r\n\r\n    for (let i = 0; i < markers.length; i++) {\r\n      // @breaking-change 8.0.0\r\n      if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\r\n        console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` +\r\n                     `use 'cdkFocusRegion${bound}' instead. The deprecated ` +\r\n                     `attribute will be removed in 8.0.0.`, markers[i]);\r\n      } else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\r\n        console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` +\r\n                     `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` +\r\n                     `will be removed in 8.0.0.`, markers[i]);\r\n      }\r\n    }\r\n\r\n    if (bound == 'start') {\r\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\r\n    }\r\n    return markers.length ?\r\n        markers[markers.length - 1] : this._getLastTabbableElement(this._element);\r\n  }\r\n\r\n  /**\r\n   * Focuses the element that should be focused when the focus trap is initialized.\r\n   * @returns Whether focus was moved successfuly.\r\n   */\r\n  focusInitialElement(): boolean {\r\n    // Contains the deprecated version of selector, for temporary backwards comparability.\r\n    const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` +\r\n                                                          `[cdkFocusInitial]`) as HTMLElement;\r\n\r\n    if (redirectToElement) {\r\n      // @breaking-change 8.0.0\r\n      if (redirectToElement.hasAttribute(`cdk-focus-initial`)) {\r\n        console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` +\r\n                    `use 'cdkFocusInitial' instead. The deprecated attribute ` +\r\n                    `will be removed in 8.0.0`, redirectToElement);\r\n      }\r\n\r\n      // Warn the consumer if the element they've pointed to\r\n      // isn't focusable, when not in production mode.\r\n      if (isDevMode() && !this._checker.isFocusable(redirectToElement)) {\r\n        console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\r\n      }\r\n\r\n      redirectToElement.focus();\r\n      return true;\r\n    }\r\n\r\n    return this.focusFirstTabbableElement();\r\n  }\r\n\r\n  /**\r\n   * Focuses the first tabbable element within the focus trap region.\r\n   * @returns Whether focus was moved successfuly.\r\n   */\r\n  focusFirstTabbableElement(): boolean {\r\n    const redirectToElement = this._getRegionBoundary('start');\r\n\r\n    if (redirectToElement) {\r\n      redirectToElement.focus();\r\n    }\r\n\r\n    return !!redirectToElement;\r\n  }\r\n\r\n  /**\r\n   * Focuses the last tabbable element within the focus trap region.\r\n   * @returns Whether focus was moved successfuly.\r\n   */\r\n  focusLastTabbableElement(): boolean {\r\n    const redirectToElement = this._getRegionBoundary('end');\r\n\r\n    if (redirectToElement) {\r\n      redirectToElement.focus();\r\n    }\r\n\r\n    return !!redirectToElement;\r\n  }\r\n\r\n  /**\r\n   * Checks whether the focus trap has successfuly been attached.\r\n   */\r\n  hasAttached(): boolean {\r\n    return this._hasAttached;\r\n  }\r\n\r\n  /** Get the first tabbable element from a DOM subtree (inclusive). */\r\n  private _getFirstTabbableElement(root: HTMLElement): HTMLElement | null {\r\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\r\n      return root;\r\n    }\r\n\r\n    // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\r\n    // back to `childNodes` which includes text nodes, comments etc.\r\n    let children = root.children || root.childNodes;\r\n\r\n    for (let i = 0; i < children.length; i++) {\r\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\r\n        this._getFirstTabbableElement(children[i] as HTMLElement) :\r\n        null;\r\n\r\n      if (tabbableChild) {\r\n        return tabbableChild;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /** Get the last tabbable element from a DOM subtree (inclusive). */\r\n  private _getLastTabbableElement(root: HTMLElement): HTMLElement | null {\r\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\r\n      return root;\r\n    }\r\n\r\n    // Iterate in reverse DOM order.\r\n    let children = root.children || root.childNodes;\r\n\r\n    for (let i = children.length - 1; i >= 0; i--) {\r\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\r\n        this._getLastTabbableElement(children[i] as HTMLElement) :\r\n        null;\r\n\r\n      if (tabbableChild) {\r\n        return tabbableChild;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /** Creates an anchor element. */\r\n  private _createAnchor(): HTMLElement {\r\n    const anchor = this._document.createElement('div');\r\n    this._toggleAnchorTabIndex(this._enabled, anchor);\r\n    anchor.classList.add('cdk-visually-hidden');\r\n    anchor.classList.add('cdk-focus-trap-anchor');\r\n    anchor.setAttribute('aria-hidden', 'true');\r\n    return anchor;\r\n  }\r\n\r\n  /**\r\n   * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\r\n   * @param isEnabled Whether the focus trap is enabled.\r\n   * @param anchor Anchor on which to toggle the tabindex.\r\n   */\r\n  private _toggleAnchorTabIndex(isEnabled: boolean, anchor: HTMLElement) {\r\n    // Remove the tabindex completely, rather than setting it to -1, because if the\r\n    // element has a tabindex, the user might still hit it when navigating with the arrow keys.\r\n    isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\r\n  }\r\n\r\n  /** Executes a function when the zone is stable. */\r\n  private _executeOnStable(fn: () => any): void {\r\n    if (this._ngZone.isStable) {\r\n      fn();\r\n    } else {\r\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(fn);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/** Factory that allows easy instantiation of focus traps. */\r\n@Injectable({providedIn: 'root'})\r\nexport class FocusTrapFactory {\r\n  private _document: Document;\r\n\r\n  constructor(\r\n      private _checker: InteractivityChecker,\r\n      private _ngZone: NgZone,\r\n      @Inject(DOCUMENT) _document: any) {\r\n\r\n    this._document = _document;\r\n  }\r\n\r\n  /**\r\n   * Creates a focus-trapped region around the given element.\r\n   * @param element The element around which focus will be trapped.\r\n   * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\r\n   *     manually by the user.\r\n   * @returns The created focus trap instance.\r\n   */\r\n  create(element: HTMLElement, deferCaptureElements: boolean = false): FocusTrap {\r\n    return new FocusTrap(\r\n        element, this._checker, this._ngZone, this._document, deferCaptureElements);\r\n  }\r\n}\r\n\r\n/** Directive for trapping focus within a region. */\r\n@Directive({\r\n  selector: '[cdkTrapFocus]',\r\n  exportAs: 'cdkTrapFocus',\r\n})\r\nexport class CdkTrapFocus implements OnDestroy, AfterContentInit, DoCheck {\r\n  private _document: Document;\r\n\r\n  /** Underlying FocusTrap instance. */\r\n  focusTrap: FocusTrap;\r\n\r\n  /** Previously focused element to restore focus to upon destroy when using autoCapture. */\r\n  private _previouslyFocusedElement: HTMLElement | null = null;\r\n\r\n  /** Whether the focus trap is active. */\r\n  @Input('cdkTrapFocus')\r\n  get enabled(): boolean { return this.focusTrap.enabled; }\r\n  set enabled(value: boolean) { this.focusTrap.enabled = coerceBooleanProperty(value); }\r\n\r\n  /**\r\n   * Whether the directive should automatially move focus into the trapped region upon\r\n   * initialization and return focus to the previous activeElement upon destruction.\r\n   */\r\n  @Input('cdkTrapFocusAutoCapture')\r\n  get autoCapture(): boolean { return this._autoCapture; }\r\n  set autoCapture(value: boolean) { this._autoCapture = coerceBooleanProperty(value); }\r\n  private _autoCapture: boolean;\r\n\r\n  constructor(\r\n      private _elementRef: ElementRef<HTMLElement>,\r\n      private _focusTrapFactory: FocusTrapFactory,\r\n      @Inject(DOCUMENT) _document: any) {\r\n\r\n    this._document = _document;\r\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.focusTrap.destroy();\r\n\r\n    // If we stored a previously focused element when using autoCapture, return focus to that\r\n    // element now that the trapped region is being destroyed.\r\n    if (this._previouslyFocusedElement) {\r\n      this._previouslyFocusedElement.focus();\r\n      this._previouslyFocusedElement = null;\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this.focusTrap.attachAnchors();\r\n\r\n    if (this.autoCapture) {\r\n      this._previouslyFocusedElement = this._document.activeElement as HTMLElement;\r\n      this.focusTrap.focusInitialElementWhenReady();\r\n    }\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (!this.focusTrap.hasAttached()) {\r\n      this.focusTrap.attachAnchors();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {Platform} from '@angular/cdk/platform';\r\nimport {Injectable} from '@angular/core';\r\n\r\n\r\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\r\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\r\n// supported.\r\n\r\n/**\r\n * Utility for checking the interactivity of an element, such as whether is is focusable or\r\n * tabbable.\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class InteractivityChecker {\r\n\r\n  constructor(private _platform: Platform) {}\r\n\r\n  /**\r\n   * Gets whether an element is disabled.\r\n   *\r\n   * @param element Element to be checked.\r\n   * @returns Whether the element is disabled.\r\n   */\r\n  isDisabled(element: HTMLElement): boolean {\r\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\r\n    // a form control inside of a disabled form, but should capture the most common cases.\r\n    return element.hasAttribute('disabled');\r\n  }\r\n\r\n  /**\r\n   * Gets whether an element is visible for the purposes of interactivity.\r\n   *\r\n   * This will capture states like `display: none` and `visibility: hidden`, but not things like\r\n   * being clipped by an `overflow: hidden` parent or being outside the viewport.\r\n   *\r\n   * @returns Whether the element is visible.\r\n   */\r\n  isVisible(element: HTMLElement): boolean {\r\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\r\n  }\r\n\r\n  /**\r\n   * Gets whether an element can be reached via Tab key.\r\n   * Assumes that the element has already been checked with isFocusable.\r\n   *\r\n   * @param element Element to be checked.\r\n   * @returns Whether the element is tabbable.\r\n   */\r\n  isTabbable(element: HTMLElement): boolean {\r\n    // Nothing is tabbable on the server 😎\r\n    if (!this._platform.isBrowser) {\r\n      return false;\r\n    }\r\n\r\n    const frameElement = getFrameElement(getWindow(element));\r\n\r\n    if (frameElement) {\r\n      const frameType = frameElement && frameElement.nodeName.toLowerCase();\r\n\r\n      // Frame elements inherit their tabindex onto all child elements.\r\n      if (getTabIndexValue(frameElement) === -1) {\r\n        return false;\r\n      }\r\n\r\n      // Webkit and Blink consider anything inside of an <object> element as non-tabbable.\r\n      if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {\r\n        return false;\r\n      }\r\n\r\n      // Webkit and Blink disable tabbing to an element inside of an invisible frame.\r\n      if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {\r\n        return false;\r\n      }\r\n\r\n    }\r\n\r\n    let nodeName = element.nodeName.toLowerCase();\r\n    let tabIndexValue = getTabIndexValue(element);\r\n\r\n    if (element.hasAttribute('contenteditable')) {\r\n      return tabIndexValue !== -1;\r\n    }\r\n\r\n    if (nodeName === 'iframe') {\r\n      // The frames may be tabbable depending on content, but it's not possibly to reliably\r\n      // investigate the content of the frames.\r\n      return false;\r\n    }\r\n\r\n    if (nodeName === 'audio') {\r\n      if (!element.hasAttribute('controls')) {\r\n        // By default an <audio> element without the controls enabled is not tabbable.\r\n        return false;\r\n      } else if (this._platform.BLINK) {\r\n        // In Blink <audio controls> elements are always tabbable.\r\n        return true;\r\n      }\r\n    }\r\n\r\n    if (nodeName === 'video') {\r\n      if (!element.hasAttribute('controls') && this._platform.TRIDENT) {\r\n        // In Trident a <video> element without the controls enabled is not tabbable.\r\n        return false;\r\n      } else if (this._platform.BLINK || this._platform.FIREFOX) {\r\n        // In Chrome and Firefox <video controls> elements are always tabbable.\r\n        return true;\r\n      }\r\n    }\r\n\r\n    if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {\r\n      // In all Blink and WebKit based browsers <object> elements are never tabbable.\r\n      return false;\r\n    }\r\n\r\n    // In iOS the browser only considers some specific elements as tabbable.\r\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\r\n      return false;\r\n    }\r\n\r\n    return element.tabIndex >= 0;\r\n  }\r\n\r\n  /**\r\n   * Gets whether an element can be focused by the user.\r\n   *\r\n   * @param element Element to be checked.\r\n   * @returns Whether the element is focusable.\r\n   */\r\n  isFocusable(element: HTMLElement): boolean {\r\n    // Perform checks in order of left to most expensive.\r\n    // Again, naive approach that does not capture many edge cases and browser quirks.\r\n    return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\r\n * the frameElement property is being accessed from a different host address, this property\r\n * should be accessed carefully.\r\n */\r\nfunction getFrameElement(window: Window) {\r\n  try {\r\n    return window.frameElement as HTMLElement;\r\n  } catch {\r\n    return null;\r\n  }\r\n}\r\n\r\n/** Checks whether the specified element has any geometry / rectangles. */\r\nfunction hasGeometry(element: HTMLElement): boolean {\r\n  // Use logic from jQuery to check for an invisible element.\r\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\r\n  return !!(element.offsetWidth || element.offsetHeight ||\r\n      (typeof element.getClientRects === 'function' && element.getClientRects().length));\r\n}\r\n\r\n/** Gets whether an element's  */\r\nfunction isNativeFormElement(element: Node) {\r\n  let nodeName = element.nodeName.toLowerCase();\r\n  return nodeName === 'input' ||\r\n      nodeName === 'select' ||\r\n      nodeName === 'button' ||\r\n      nodeName === 'textarea';\r\n}\r\n\r\n/** Gets whether an element is an `<input type=\"hidden\">`. */\r\nfunction isHiddenInput(element: HTMLElement): boolean {\r\n  return isInputElement(element) && element.type == 'hidden';\r\n}\r\n\r\n/** Gets whether an element is an anchor that has an href attribute. */\r\nfunction isAnchorWithHref(element: HTMLElement): boolean {\r\n  return isAnchorElement(element) && element.hasAttribute('href');\r\n}\r\n\r\n/** Gets whether an element is an input element. */\r\nfunction isInputElement(element: HTMLElement): element is HTMLInputElement {\r\n  return element.nodeName.toLowerCase() == 'input';\r\n}\r\n\r\n/** Gets whether an element is an anchor element. */\r\nfunction isAnchorElement(element: HTMLElement): element is HTMLAnchorElement {\r\n  return element.nodeName.toLowerCase() == 'a';\r\n}\r\n\r\n/** Gets whether an element has a valid tabindex. */\r\nfunction hasValidTabIndex(element: HTMLElement): boolean {\r\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\r\n    return false;\r\n  }\r\n\r\n  let tabIndex = element.getAttribute('tabindex');\r\n\r\n  // IE11 parses tabindex=\"\" as the value \"-32768\"\r\n  if (tabIndex == '-32768') {\r\n    return false;\r\n  }\r\n\r\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\r\n}\r\n\r\n/**\r\n * Returns the parsed tabindex from the element attributes instead of returning the\r\n * evaluated tabindex from the browsers defaults.\r\n */\r\nfunction getTabIndexValue(element: HTMLElement): number | null {\r\n  if (!hasValidTabIndex(element)) {\r\n    return null;\r\n  }\r\n\r\n  // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\r\n  const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\r\n\r\n  return isNaN(tabIndex) ? -1 : tabIndex;\r\n}\r\n\r\n/** Checks whether the specified element is potentially tabbable on iOS */\r\nfunction isPotentiallyTabbableIOS(element: HTMLElement): boolean {\r\n  let nodeName = element.nodeName.toLowerCase();\r\n  let inputType = nodeName === 'input' && (element as HTMLInputElement).type;\r\n\r\n  return inputType === 'text'\r\n      || inputType === 'password'\r\n      || nodeName === 'select'\r\n      || nodeName === 'textarea';\r\n}\r\n\r\n/**\r\n * Gets whether an element is potentially focusable without taking current visible/disabled state\r\n * into account.\r\n */\r\nfunction isPotentiallyFocusable(element: HTMLElement): boolean {\r\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\r\n  if (isHiddenInput(element)) {\r\n    return false;\r\n  }\r\n\r\n  return isNativeFormElement(element) ||\r\n      isAnchorWithHref(element) ||\r\n      element.hasAttribute('contenteditable') ||\r\n      hasValidTabIndex(element);\r\n}\r\n\r\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\r\nfunction getWindow(node: HTMLElement): Window {\r\n  // ownerDocument is null if `node` itself *is* a document.\r\n  return node.ownerDocument && node.ownerDocument.defaultView || window;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\r\nimport {FocusOrigin} from '../focus-monitor/focus-monitor';\r\n\r\n/**\r\n * This is the interface for focusable items (used by the FocusKeyManager).\r\n * Each item must know how to focus itself, whether or not it is currently disabled\r\n * and be able to supply it's label.\r\n */\r\nexport interface FocusableOption extends ListKeyManagerOption {\r\n  /** Focuses the `FocusableOption`. */\r\n  focus(origin?: FocusOrigin): void;\r\n}\r\n\r\nexport class FocusKeyManager<T> extends ListKeyManager<FocusableOption & T> {\r\n  private _origin: FocusOrigin = 'program';\r\n\r\n  /**\r\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\r\n   * @param origin Focus origin to be used when focusing items.\r\n   */\r\n  setFocusOrigin(origin: FocusOrigin): this {\r\n    this._origin = origin;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the active item to the item at the specified\r\n   * index and focuses the newly active item.\r\n   * @param index Index of the item to be set as active.\r\n   */\r\n  setActiveItem(index: number): void;\r\n\r\n  /**\r\n   * Sets the active item to the item that is specified and focuses it.\r\n   * @param item Item to be set as active.\r\n   */\r\n  setActiveItem(item: T): void;\r\n\r\n  setActiveItem(item: any): void {\r\n    super.setActiveItem(item);\r\n\r\n    if (this.activeItem) {\r\n      this.activeItem.focus(this._origin);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\r\n\r\n/**\r\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\r\n * Each item must know how to style itself as active or inactive and whether or not it is\r\n * currently disabled.\r\n */\r\nexport interface Highlightable extends ListKeyManagerOption {\r\n  /** Applies the styles for an active item to this item. */\r\n  setActiveStyles(): void;\r\n\r\n  /** Applies the styles for an inactive item to this item. */\r\n  setInactiveStyles(): void;\r\n}\r\n\r\nexport class ActiveDescendantKeyManager<T> extends ListKeyManager<Highlightable & T> {\r\n\r\n  /**\r\n   * Sets the active item to the item at the specified index and adds the\r\n   * active styles to the newly active item. Also removes active styles\r\n   * from the previously active item.\r\n   * @param index Index of the item to be set as active.\r\n   */\r\n  setActiveItem(index: number): void;\r\n\r\n  /**\r\n   * Sets the active item to the item to the specified one and adds the\r\n   * active styles to the it. Also removes active styles from the\r\n   * previously active item.\r\n   * @param item Item to be set as active.\r\n   */\r\n  setActiveItem(item: T): void;\r\n\r\n  setActiveItem(index: any): void {\r\n    if (this.activeItem) {\r\n      this.activeItem.setInactiveStyles();\r\n    }\r\n    super.setActiveItem(index);\r\n    if (this.activeItem) {\r\n      this.activeItem.setActiveStyles();\r\n    }\r\n  }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {QueryList} from '@angular/core';\r\nimport {Subject, Subscription} from 'rxjs';\r\nimport {\r\n  UP_ARROW,\r\n  DOWN_ARROW,\r\n  LEFT_ARROW,\r\n  RIGHT_ARROW,\r\n  TAB,\r\n  A,\r\n  Z,\r\n  ZERO,\r\n  NINE,\r\n  hasModifierKey,\r\n} from '@angular/cdk/keycodes';\r\nimport {debounceTime, filter, map, tap} from 'rxjs/operators';\r\n\r\n/** This interface is for items that can be passed to a ListKeyManager. */\r\nexport interface ListKeyManagerOption {\r\n  /** Whether the option is disabled. */\r\n  disabled?: boolean;\r\n\r\n  /** Gets the label for this option. */\r\n  getLabel?(): string;\r\n}\r\n\r\n/** Modifier keys handled by the ListKeyManager. */\r\nexport type ListKeyManagerModifierKey = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey';\r\n\r\n/**\r\n * This class manages keyboard events for selectable lists. If you pass it a query list\r\n * of items, it will set the active item correctly when arrow events occur.\r\n */\r\nexport class ListKeyManager<T extends ListKeyManagerOption> {\r\n  private _activeItemIndex = -1;\r\n  private _activeItem: T | null = null;\r\n  private _wrap = false;\r\n  private _letterKeyStream = new Subject<string>();\r\n  private _typeaheadSubscription = Subscription.EMPTY;\r\n  private _vertical = true;\r\n  private _horizontal: 'ltr' | 'rtl' | null;\r\n  private _allowedModifierKeys: ListKeyManagerModifierKey[] = [];\r\n\r\n  /**\r\n   * Predicate function that can be used to check whether an item should be skipped\r\n   * by the key manager. By default, disabled items are skipped.\r\n   */\r\n  private _skipPredicateFn = (item: T) => item.disabled;\r\n\r\n  // Buffer for the letters that the user has pressed when the typeahead option is turned on.\r\n  private _pressedLetters: string[] = [];\r\n\r\n  constructor(private _items: QueryList<T> | T[]) {\r\n    // We allow for the items to be an array because, in some cases, the consumer may\r\n    // not have access to a QueryList of the items they want to manage (e.g. when the\r\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\r\n    if (_items instanceof QueryList) {\r\n      _items.changes.subscribe((newItems: QueryList<T>) => {\r\n        if (this._activeItem) {\r\n          const itemArray = newItems.toArray();\r\n          const newIndex = itemArray.indexOf(this._activeItem);\r\n\r\n          if (newIndex > -1 && newIndex !== this._activeItemIndex) {\r\n            this._activeItemIndex = newIndex;\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stream that emits any time the TAB key is pressed, so components can react\r\n   * when focus is shifted off of the list.\r\n   */\r\n  tabOut: Subject<void> = new Subject<void>();\r\n\r\n  /** Stream that emits whenever the active item of the list manager changes. */\r\n  change = new Subject<number>();\r\n\r\n  /**\r\n   * Sets the predicate function that determines which items should be skipped by the\r\n   * list key manager.\r\n   * @param predicate Function that determines whether the given item should be skipped.\r\n   */\r\n  skipPredicate(predicate: (item: T) => boolean): this {\r\n    this._skipPredicateFn = predicate;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Configures wrapping mode, which determines whether the active item will wrap to\r\n   * the other end of list when there are no more items in the given direction.\r\n   * @param shouldWrap Whether the list should wrap when reaching the end.\r\n   */\r\n  withWrap(shouldWrap = true): this {\r\n    this._wrap = shouldWrap;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Configures whether the key manager should be able to move the selection vertically.\r\n   * @param enabled Whether vertical selection should be enabled.\r\n   */\r\n  withVerticalOrientation(enabled: boolean = true): this {\r\n    this._vertical = enabled;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Configures the key manager to move the selection horizontally.\r\n   * Passing in `null` will disable horizontal movement.\r\n   * @param direction Direction in which the selection can be moved.\r\n   */\r\n  withHorizontalOrientation(direction: 'ltr' | 'rtl' | null): this {\r\n    this._horizontal = direction;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Modifier keys which are allowed to be held down and whose default actions will be prevented\r\n   * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\r\n   */\r\n  withAllowedModifierKeys(keys: ListKeyManagerModifierKey[]): this {\r\n    this._allowedModifierKeys = keys;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Turns on typeahead mode which allows users to set the active item by typing.\r\n   * @param debounceInterval Time to wait after the last keystroke before setting the active item.\r\n   */\r\n  withTypeAhead(debounceInterval: number = 200): this {\r\n    if (this._items.length && this._items.some(item => typeof item.getLabel !== 'function')) {\r\n      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\r\n    }\r\n\r\n    this._typeaheadSubscription.unsubscribe();\r\n\r\n    // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\r\n    // and convert those letters back into a string. Afterwards find the first item that starts\r\n    // with that string and select it.\r\n    this._typeaheadSubscription = this._letterKeyStream.pipe(\r\n      tap(keyCode => this._pressedLetters.push(keyCode)),\r\n      debounceTime(debounceInterval),\r\n      filter(() => this._pressedLetters.length > 0),\r\n      map(() => this._pressedLetters.join(''))\r\n    ).subscribe(inputString => {\r\n      const items = this._getItemsArray();\r\n\r\n      // Start at 1 because we want to start searching at the item immediately\r\n      // following the current active item.\r\n      for (let i = 1; i < items.length + 1; i++) {\r\n        const index = (this._activeItemIndex + i) % items.length;\r\n        const item = items[index];\r\n\r\n        if (!this._skipPredicateFn(item) &&\r\n            item.getLabel!().toUpperCase().trim().indexOf(inputString) === 0) {\r\n\r\n          this.setActiveItem(index);\r\n          break;\r\n        }\r\n      }\r\n\r\n      this._pressedLetters = [];\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the active item to the item at the index specified.\r\n   * @param index The index of the item to be set as active.\r\n   */\r\n  setActiveItem(index: number): void;\r\n\r\n  /**\r\n   * Sets the active item to the specified item.\r\n   * @param item The item to be set as active.\r\n   */\r\n  setActiveItem(item: T): void;\r\n\r\n  setActiveItem(item: any): void {\r\n    const previousIndex = this._activeItemIndex;\r\n\r\n    this.updateActiveItem(item);\r\n\r\n    if (this._activeItemIndex !== previousIndex) {\r\n      this.change.next(this._activeItemIndex);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the active item depending on the key event passed in.\r\n   * @param event Keyboard event to be used for determining which element should be active.\r\n   */\r\n  onKeydown(event: KeyboardEvent): void {\r\n    const keyCode = event.keyCode;\r\n    const modifiers: ListKeyManagerModifierKey[] = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\r\n    const isModifierAllowed = modifiers.every(modifier => {\r\n      return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\r\n    });\r\n\r\n    switch (keyCode) {\r\n      case TAB:\r\n        this.tabOut.next();\r\n        return;\r\n\r\n      case DOWN_ARROW:\r\n        if (this._vertical && isModifierAllowed) {\r\n          this.setNextItemActive();\r\n          break;\r\n        } else {\r\n          return;\r\n        }\r\n\r\n      case UP_ARROW:\r\n        if (this._vertical && isModifierAllowed) {\r\n          this.setPreviousItemActive();\r\n          break;\r\n        } else {\r\n          return;\r\n        }\r\n\r\n      case RIGHT_ARROW:\r\n        if (this._horizontal && isModifierAllowed) {\r\n          this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\r\n          break;\r\n        } else {\r\n          return;\r\n        }\r\n\r\n      case LEFT_ARROW:\r\n        if (this._horizontal && isModifierAllowed) {\r\n          this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\r\n          break;\r\n        } else {\r\n          return;\r\n        }\r\n\r\n      default:\r\n      if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\r\n          // Attempt to use the `event.key` which also maps it to the user's keyboard language,\r\n          // otherwise fall back to resolving alphanumeric characters via the keyCode.\r\n          if (event.key && event.key.length === 1) {\r\n            this._letterKeyStream.next(event.key.toLocaleUpperCase());\r\n          } else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\r\n            this._letterKeyStream.next(String.fromCharCode(keyCode));\r\n          }\r\n        }\r\n\r\n        // Note that we return here, in order to avoid preventing\r\n        // the default action of non-navigational keys.\r\n        return;\r\n    }\r\n\r\n    this._pressedLetters = [];\r\n    event.preventDefault();\r\n  }\r\n\r\n  /** Index of the currently active item. */\r\n  get activeItemIndex(): number | null {\r\n    return this._activeItemIndex;\r\n  }\r\n\r\n  /** The active item. */\r\n  get activeItem(): T | null {\r\n    return this._activeItem;\r\n  }\r\n\r\n  /** Sets the active item to the first enabled item in the list. */\r\n  setFirstItemActive(): void {\r\n    this._setActiveItemByIndex(0, 1);\r\n  }\r\n\r\n  /** Sets the active item to the last enabled item in the list. */\r\n  setLastItemActive(): void {\r\n    this._setActiveItemByIndex(this._items.length - 1, -1);\r\n  }\r\n\r\n  /** Sets the active item to the next enabled item in the list. */\r\n  setNextItemActive(): void {\r\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\r\n  }\r\n\r\n  /** Sets the active item to a previous enabled item in the list. */\r\n  setPreviousItemActive(): void {\r\n    this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive()\r\n                                            : this._setActiveItemByDelta(-1);\r\n  }\r\n\r\n  /**\r\n   * Allows setting the active without any other effects.\r\n   * @param index Index of the item to be set as active.\r\n   */\r\n  updateActiveItem(index: number): void;\r\n\r\n  /**\r\n   * Allows setting the active item without any other effects.\r\n   * @param item Item to be set as active.\r\n   */\r\n  updateActiveItem(item: T): void;\r\n\r\n  updateActiveItem(item: any): void {\r\n    const itemArray = this._getItemsArray();\r\n    const index = typeof item === 'number' ? item : itemArray.indexOf(item);\r\n    const activeItem = itemArray[index];\r\n\r\n    // Explicitly check for `null` and `undefined` because other falsy values are valid.\r\n    this._activeItem = activeItem == null ? null : activeItem;\r\n    this._activeItemIndex = index;\r\n  }\r\n\r\n  /**\r\n   * Allows setting of the activeItemIndex without any other effects.\r\n   * @param index The new activeItemIndex.\r\n   * @deprecated Use `updateActiveItem` instead.\r\n   * @breaking-change 8.0.0\r\n   */\r\n  updateActiveItemIndex(index: number): void {\r\n    this.updateActiveItem(index);\r\n  }\r\n\r\n  /**\r\n   * This method sets the active item, given a list of items and the delta between the\r\n   * currently active item and the new active item. It will calculate differently\r\n   * depending on whether wrap mode is turned on.\r\n   */\r\n  private _setActiveItemByDelta(delta: -1 | 1): void {\r\n    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\r\n  }\r\n\r\n  /**\r\n   * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\r\n   * down the list until it finds an item that is not disabled, and it will wrap if it\r\n   * encounters either end of the list.\r\n   */\r\n  private _setActiveInWrapMode(delta: -1 | 1): void {\r\n    const items = this._getItemsArray();\r\n\r\n    for (let i = 1; i <= items.length; i++) {\r\n      const index = (this._activeItemIndex + (delta * i) + items.length) % items.length;\r\n      const item = items[index];\r\n\r\n      if (!this._skipPredicateFn(item)) {\r\n        this.setActiveItem(index);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the active item properly given the default mode. In other words, it will\r\n   * continue to move down the list until it finds an item that is not disabled. If\r\n   * it encounters either end of the list, it will stop and not wrap.\r\n   */\r\n  private _setActiveInDefaultMode(delta: -1 | 1): void {\r\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\r\n  }\r\n\r\n  /**\r\n   * Sets the active item to the first enabled item starting at the index specified. If the\r\n   * item is disabled, it will move in the fallbackDelta direction until it either\r\n   * finds an enabled item or encounters the end of the list.\r\n   */\r\n  private _setActiveItemByIndex(index: number, fallbackDelta: -1 | 1): void {\r\n    const items = this._getItemsArray();\r\n\r\n    if (!items[index]) {\r\n      return;\r\n    }\r\n\r\n    while (this._skipPredicateFn(items[index])) {\r\n      index += fallbackDelta;\r\n\r\n      if (!items[index]) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.setActiveItem(index);\r\n  }\r\n\r\n  /** Returns the items as an array. */\r\n  private _getItemsArray(): T[] {\r\n    return this._items instanceof QueryList ? this._items.toArray() : this._items;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {\r\n  Inject,\r\n  Injectable,\r\n  InjectionToken,\r\n  OnDestroy,\r\n  Optional,\r\n  SkipSelf,\r\n} from '@angular/core';\r\nimport {addAriaReferencedId, getAriaReferenceIds, removeAriaReferencedId} from './aria-reference';\r\n\r\n\r\n/**\r\n * Interface used to register message elements and keep a count of how many registrations have\r\n * the same message and the reference to the message element used for the `aria-describedby`.\r\n */\r\nexport interface RegisteredMessage {\r\n  /** The element containing the message. */\r\n  messageElement: Element;\r\n\r\n  /** The number of elements that reference this message element via `aria-describedby`. */\r\n  referenceCount: number;\r\n}\r\n\r\n/** ID used for the body container where all messages are appended. */\r\nexport const MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\r\n\r\n/** ID prefix used for each created message element. */\r\nexport const CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\r\n\r\n/** Attribute given to each host element that is described by a message element. */\r\nexport const CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\r\n\r\n/** Global incremental identifier for each registered message element. */\r\nlet nextId = 0;\r\n\r\n/** Global map of all registered message elements that have been placed into the document. */\r\nconst messageRegistry = new Map<string, RegisteredMessage>();\r\n\r\n/** Container for all registered messages. */\r\nlet messagesContainer: HTMLElement | null = null;\r\n\r\n/**\r\n * Utility that creates visually hidden elements with a message content. Useful for elements that\r\n * want to use aria-describedby to further describe themselves without adding additional visual\r\n * content.\r\n * @docs-private\r\n */\r\n@Injectable({providedIn: 'root'})\r\nexport class AriaDescriber implements OnDestroy {\r\n  private _document: Document;\r\n\r\n  constructor(@Inject(DOCUMENT) _document: any) {\r\n    this._document = _document;\r\n  }\r\n\r\n  /**\r\n   * Adds to the host element an aria-describedby reference to a hidden element that contains\r\n   * the message. If the same message has already been registered, then it will reuse the created\r\n   * message element.\r\n   */\r\n  describe(hostElement: Element, message: string) {\r\n    if (!this._canBeDescribed(hostElement, message)) {\r\n      return;\r\n    }\r\n\r\n    if (!messageRegistry.has(message)) {\r\n      this._createMessageElement(message);\r\n    }\r\n\r\n    if (!this._isElementDescribedByMessage(hostElement, message)) {\r\n      this._addMessageReference(hostElement, message);\r\n    }\r\n  }\r\n\r\n  /** Removes the host element's aria-describedby reference to the message element. */\r\n  removeDescription(hostElement: Element, message: string) {\r\n    if (!this._isElementNode(hostElement)) {\r\n      return;\r\n    }\r\n\r\n    if (this._isElementDescribedByMessage(hostElement, message)) {\r\n      this._removeMessageReference(hostElement, message);\r\n    }\r\n\r\n    const registeredMessage = messageRegistry.get(message);\r\n    if (registeredMessage && registeredMessage.referenceCount === 0) {\r\n      this._deleteMessageElement(message);\r\n    }\r\n\r\n    if (messagesContainer && messagesContainer.childNodes.length === 0) {\r\n      this._deleteMessagesContainer();\r\n    }\r\n  }\r\n\r\n  /** Unregisters all created message elements and removes the message container. */\r\n  ngOnDestroy() {\r\n    const describedElements =\r\n        this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\r\n\r\n    for (let i = 0; i < describedElements.length; i++) {\r\n      this._removeCdkDescribedByReferenceIds(describedElements[i]);\r\n      describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\r\n    }\r\n\r\n    if (messagesContainer) {\r\n      this._deleteMessagesContainer();\r\n    }\r\n\r\n    messageRegistry.clear();\r\n  }\r\n\r\n  /**\r\n   * Creates a new element in the visually hidden message container element with the message\r\n   * as its content and adds it to the message registry.\r\n   */\r\n  private _createMessageElement(message: string) {\r\n    const messageElement = this._document.createElement('div');\r\n    messageElement.setAttribute('id', `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`);\r\n    messageElement.appendChild(this._document.createTextNode(message)!);\r\n\r\n    this._createMessagesContainer();\r\n    messagesContainer!.appendChild(messageElement);\r\n\r\n    messageRegistry.set(message, {messageElement, referenceCount: 0});\r\n  }\r\n\r\n  /** Deletes the message element from the global messages container. */\r\n  private _deleteMessageElement(message: string) {\r\n    const registeredMessage = messageRegistry.get(message);\r\n    const messageElement = registeredMessage && registeredMessage.messageElement;\r\n    if (messagesContainer && messageElement) {\r\n      messagesContainer.removeChild(messageElement);\r\n    }\r\n    messageRegistry.delete(message);\r\n  }\r\n\r\n  /** Creates the global container for all aria-describedby messages. */\r\n  private _createMessagesContainer() {\r\n    if (!messagesContainer) {\r\n      const preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID);\r\n\r\n      // When going from the server to the client, we may end up in a situation where there's\r\n      // already a container on the page, but we don't have a reference to it. Clear the\r\n      // old container so we don't get duplicates. Doing this, instead of emptying the previous\r\n      // container, should be slightly faster.\r\n      if (preExistingContainer) {\r\n        preExistingContainer.parentNode!.removeChild(preExistingContainer);\r\n      }\r\n\r\n      messagesContainer = this._document.createElement('div');\r\n      messagesContainer.id = MESSAGES_CONTAINER_ID;\r\n      messagesContainer.setAttribute('aria-hidden', 'true');\r\n      messagesContainer.style.display = 'none';\r\n      this._document.body.appendChild(messagesContainer);\r\n    }\r\n  }\r\n\r\n  /** Deletes the global messages container. */\r\n  private _deleteMessagesContainer() {\r\n    if (messagesContainer && messagesContainer.parentNode) {\r\n      messagesContainer.parentNode.removeChild(messagesContainer);\r\n      messagesContainer = null;\r\n    }\r\n  }\r\n\r\n  /** Removes all cdk-describedby messages that are hosted through the element. */\r\n  private _removeCdkDescribedByReferenceIds(element: Element) {\r\n    // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\r\n    const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby')\r\n        .filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\r\n    element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\r\n  }\r\n\r\n  /**\r\n   * Adds a message reference to the element using aria-describedby and increments the registered\r\n   * message's reference count.\r\n   */\r\n  private _addMessageReference(element: Element, message: string) {\r\n    const registeredMessage = messageRegistry.get(message)!;\r\n\r\n    // Add the aria-describedby reference and set the\r\n    // describedby_host attribute to mark the element.\r\n    addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\r\n    element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\r\n\r\n    registeredMessage.referenceCount++;\r\n  }\r\n\r\n  /**\r\n   * Removes a message reference from the element using aria-describedby\r\n   * and decrements the registered message's reference count.\r\n   */\r\n  private _removeMessageReference(element: Element, message: string) {\r\n    const registeredMessage = messageRegistry.get(message)!;\r\n    registeredMessage.referenceCount--;\r\n\r\n    removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\r\n    element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\r\n  }\r\n\r\n  /** Returns true if the element has been described by the provided message ID. */\r\n  private _isElementDescribedByMessage(element: Element, message: string): boolean {\r\n    const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\r\n    const registeredMessage = messageRegistry.get(message);\r\n    const messageId = registeredMessage && registeredMessage.messageElement.id;\r\n\r\n    return !!messageId && referenceIds.indexOf(messageId) != -1;\r\n  }\r\n\r\n  /** Determines whether a message can be described on a particular element. */\r\n  private _canBeDescribed(element: Element, message: string): boolean {\r\n    if (!this._isElementNode(element)) {\r\n      return false;\r\n    }\r\n\r\n    const trimmedMessage = message == null ? '' : `${message}`.trim();\r\n    const ariaLabel = element.getAttribute('aria-label');\r\n\r\n    // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the element,\r\n    // because screen readers will end up reading out the same text twice in a row.\r\n    return trimmedMessage ? (!ariaLabel || ariaLabel.trim() !== trimmedMessage) : false;\r\n  }\r\n\r\n  /** Checks whether a node is an Element node. */\r\n  private _isElementNode(element: Node): element is Element {\r\n    return element.nodeType === this._document.ELEMENT_NODE;\r\n  }\r\n}\r\n\r\n\r\n/** @docs-private @deprecated @breaking-change 8.0.0 */\r\nexport function ARIA_DESCRIBER_PROVIDER_FACTORY(parentDispatcher: AriaDescriber, _document: any) {\r\n  return parentDispatcher || new AriaDescriber(_document);\r\n}\r\n\r\n/** @docs-private @deprecated @breaking-change 8.0.0 */\r\nexport const ARIA_DESCRIBER_PROVIDER = {\r\n  // If there is already an AriaDescriber available, use that. Otherwise, provide a new one.\r\n  provide: AriaDescriber,\r\n  deps: [\r\n    [new Optional(), new SkipSelf(), AriaDescriber],\r\n    DOCUMENT as InjectionToken<any>\r\n  ],\r\n  useFactory: ARIA_DESCRIBER_PROVIDER_FACTORY\r\n};\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/** IDs are deliminated by an empty space, as per the spec. */\r\nconst ID_DELIMINATOR = ' ';\r\n\r\n/**\r\n * Adds the given ID to the specified ARIA attribute on an element.\r\n * Used for attributes such as aria-labelledby, aria-owns, etc.\r\n */\r\nexport function addAriaReferencedId(el: Element, attr: string, id: string) {\r\n  const ids = getAriaReferenceIds(el, attr);\r\n  if (ids.some(existingId => existingId.trim() == id.trim())) { return; }\r\n  ids.push(id.trim());\r\n\r\n  el.setAttribute(attr, ids.join(ID_DELIMINATOR));\r\n}\r\n\r\n/**\r\n * Removes the given ID from the specified ARIA attribute on an element.\r\n * Used for attributes such as aria-labelledby, aria-owns, etc.\r\n */\r\nexport function removeAriaReferencedId(el: Element, attr: string, id: string) {\r\n  const ids = getAriaReferenceIds(el, attr);\r\n  const filteredIds = ids.filter(val => val != id.trim());\r\n\r\n  el.setAttribute(attr, filteredIds.join(ID_DELIMINATOR));\r\n}\r\n\r\n/**\r\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\r\n * Used for attributes such as aria-labelledby, aria-owns, etc.\r\n */\r\nexport function getAriaReferenceIds(el: Element, attr: string): string[] {\r\n  // Get string array of all individual ids (whitespace deliminated) in the attribute value\r\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\r\n}\r\n"],"names":["observableOf"],"mappings":"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"}